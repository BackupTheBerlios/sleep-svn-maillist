From rsmudge at mail.berlios.de  Fri Dec 21 04:36:21 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 21 Dec 2007 04:36:21 +0100
Subject: [Sleep-svn] r316 - in sleep: . docs src/sleep/bridges
	src/sleep/console src/sleep/parser tests tests/output
Message-ID: <200712210336.lBL3aLwq028630@sheep.berlios.de>

Author: rsmudge
Date: 2007-12-21 04:36:20 +0100 (Fri, 21 Dec 2007)
New Revision: 316

Added:
   sleep/tests/debug64.sl
   sleep/tests/output/debug64.sl
Modified:
   sleep/build.xml
   sleep/docs/console.txt
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/console/ConsoleImplementation.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/whatsnew.txt
Log:
a few changes... lots o fun.


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/build.xml	2007-12-21 03:36:20 UTC (rev 316)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/docs/console.txt
===================================================================
--- sleep/docs/console.txt	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/docs/console.txt	2007-12-21 03:36:20 UTC (rev 316)
@@ -69,3 +69,6 @@
 
 x <expression>
    Evaluates a sleep expression and displays the value.
+
+? <predicate expression>
+   Evaluates a sleep predicate expression and displays the truth value.

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-12-21 03:36:20 UTC (rev 316)
@@ -79,6 +79,7 @@
         temp.put("&splice", this);
         temp.put("&subarray", this);
         temp.put("&copy",  new copy());
+        temp.put("&value", this);
  
         map map_f = new map();
 
@@ -1108,6 +1109,10 @@
 
           return a;
        }
+       else if (n.equals("&value"))
+       {
+          return SleepUtils.getScalar(value);
+       }
        else if (n.equals("&subarray"))
        {
           return subarray(value, BridgeUtilities.getInt(l, 0), BridgeUtilities.getInt(l, value.getArray().size()));

Modified: sleep/src/sleep/console/ConsoleImplementation.java
===================================================================
--- sleep/src/sleep/console/ConsoleImplementation.java	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/src/sleep/console/ConsoleImplementation.java	2007-12-21 03:36:20 UTC (rev 316)
@@ -241,6 +241,11 @@
                 Scalar value = eval("return " + args + ";", args);
                 if (value != null) { getProxy().consolePrintln(value + ""); }
              }
+             else if (command.equals("?") && args != null)
+             {
+                Scalar value = eval("return iff(" + args + ", 'true', 'false');", args);
+                if (value != null) { getProxy().consolePrintln(value + ""); }
+             }
              else if (command.equals("quit") || command.equals("exit") || command.equals("done"))
              {
                 getProxy().consolePrintln("Good bye!");
@@ -276,7 +281,7 @@
        getProxy().consolePrintln("quit");
        getProxy().consolePrintln("version");
        getProxy().consolePrintln("x <expression>");
-
+       getProxy().consolePrintln("? <predicate expression>");
    }
 
    private void help(String command)
@@ -336,6 +341,11 @@
           getProxy().consolePrintln("x <expression>");
           getProxy().consolePrintln("   evaluates a sleep expression and displays the value");
        }
+       else if (command.equals("?"))
+       {
+          getProxy().consolePrintln("? <predicate expression>");
+          getProxy().consolePrintln("   evaluates a sleep predicate expression and displays the truth value");
+       }
        else
        {
           getProxy().consolePrintln("help [command]");

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/src/sleep/parser/CodeGenerator.java	2007-12-21 03:36:20 UTC (rev 316)
@@ -864,7 +864,10 @@
            a = restore();
 
            // dew the lewp while the assigned value is not $null
-           atom = GeneratedSteps.Goto(new Check("!is", a), b, null);
+           tempp = GeneratedSteps.Check("!is", a);
+           tempp.setInfo(tokens[1].getHint());
+
+           atom = GeneratedSteps.Goto(tempp, b, null);
            add(atom, tokens[1]);
 
            break;

Added: sleep/tests/debug64.sl
===================================================================
--- sleep/tests/debug64.sl	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/tests/debug64.sl	2007-12-21 03:36:20 UTC (rev 316)
@@ -0,0 +1,15 @@
+debug(64);
+
+$handle = fork({
+   while $text (readln($source))
+   {
+      println("read: $text");
+   }
+   println("done!");
+});
+
+println($handle, "this is a test... *pHEAR*");
+printEOF($handle);
+wait($handle);
+
+println("Whee... we are done now :)");

Added: sleep/tests/output/debug64.sl
===================================================================
--- sleep/tests/output/debug64.sl	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/tests/output/debug64.sl	2007-12-21 03:36:20 UTC (rev 316)
@@ -0,0 +1,5 @@
+Trace: 'this is a test... *pHEAR*' !is $null ? TRUE at debug64.sl:4
+read: this is a test... *pHEAR*
+Trace: $null !is $null ? FALSE at debug64.sl:4
+done!
+Whee... we are done now :)

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-11-13 00:58:42 UTC (rev 315)
+++ sleep/whatsnew.txt	2007-12-21 03:36:20 UTC (rev 316)
@@ -1,3 +1,14 @@
+2.1-beta 21 
+===========
+- added &value function to return a new scalar container with the
+  same value as its argument.  This should be used when one does 
+  not want to pass a reference of a scalar that can be affected:
+  
+  function arguments, lambda, let, and fork all pass by reference.
+- assignment loops now record proper line number information for
+  error reporting purposes.
+- added a ? command to evaluate predicates in the Sleep console.
+
 2.1-beta 20  (12 Nov 07)
 ===========
 - fix debug mode 24 error handling inconsistency bug.



From rsmudge at mail.berlios.de  Fri Dec 21 04:46:59 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 21 Dec 2007 04:46:59 +0100
Subject: [Sleep-svn] r317 - in sleep: . src/sleep/parser tests tests/output
Message-ID: <200712210346.lBL3kx1K029260@sheep.berlios.de>

Author: rsmudge
Date: 2007-12-21 04:46:58 +0100 (Fri, 21 Dec 2007)
New Revision: 317

Added:
   sleep/tests/backtickin.sl
   sleep/tests/output/backtickin.sl
Modified:
   sleep/src/sleep/parser/Checkers.java
   sleep/whatsnew.txt
Log:
backtick expressions are indexable now.


Modified: sleep/src/sleep/parser/Checkers.java
===================================================================
--- sleep/src/sleep/parser/Checkers.java	2007-12-21 03:36:20 UTC (rev 316)
+++ sleep/src/sleep/parser/Checkers.java	2007-12-21 03:46:58 UTC (rev 317)
@@ -211,7 +211,7 @@
 
    public static boolean isIndexableItem(String a, String b)
    {
-      return (isIndex(b) && (isFunctionCall(a) || isExpression(a) || isVariable(a) || isIndex(a) || isFunctionReferenceToken(a)));
+      return (isIndex(b) && (isFunctionCall(a) || isExpression(a) || isVariable(a) || isIndex(a) || isFunctionReferenceToken(a) || isBacktick(a)));
    }
 
    public static boolean isIndexableItem(String a)

Added: sleep/tests/backtickin.sl
===================================================================
--- sleep/tests/backtickin.sl	2007-12-21 03:36:20 UTC (rev 316)
+++ sleep/tests/backtickin.sl	2007-12-21 03:46:58 UTC (rev 317)
@@ -0,0 +1,10 @@
+# phear
+
+if (`cat backtickin.sl`[0] eq "# phear") 
+{
+   println('PHEAR');
+}
+else
+{
+   println("broken!!!");
+}

Added: sleep/tests/output/backtickin.sl
===================================================================
--- sleep/tests/output/backtickin.sl	2007-12-21 03:36:20 UTC (rev 316)
+++ sleep/tests/output/backtickin.sl	2007-12-21 03:46:58 UTC (rev 317)
@@ -0,0 +1 @@
+PHEAR

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-12-21 03:36:20 UTC (rev 316)
+++ sleep/whatsnew.txt	2007-12-21 03:46:58 UTC (rev 317)
@@ -8,6 +8,7 @@
 - assignment loops now record proper line number information for
   error reporting purposes.
 - added a ? command to evaluate predicates in the Sleep console.
+- index operator can now be applied to backtick expressions
 
 2.1-beta 20  (12 Nov 07)
 ===========



