From rsmudge at mail.berlios.de  Wed Apr 16 19:53:22 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 16 Apr 2008 19:53:22 +0200
Subject: [Sleep-svn] r334 - in sleep: . docs src/sleep/bridges
	src/sleep/console src/sleep/parser src/sleep/runtime tests
	tests/output
Message-ID: <200804161753.m3GHrMUu003026@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-16 19:53:20 +0200 (Wed, 16 Apr 2008)
New Revision: 334

Added:
   sleep/tests/ioerr.sl
   sleep/tests/iternotrace.sl
   sleep/tests/output/ioerr.sl
   sleep/tests/output/iternotrace.sl
Modified:
   sleep/docs/sleeplang.html
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/SleepClosure.java
   sleep/src/sleep/console/TextConsole.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/callccfreeze.sl
   sleep/tests/output/fe_generatordb.sl
   sleep/tests/output/nmesgs.sl
   sleep/tests/output/proxy.sl
   sleep/tests/output/tcatch4.sl
   sleep/tests/output/tracepo.sl
   sleep/whatsnew.txt
Log:
..


Modified: sleep/docs/sleeplang.html
===================================================================
--- sleep/docs/sleeplang.html	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/docs/sleeplang.html	2008-04-16 17:53:20 UTC (rev 334)
@@ -2788,8 +2788,8 @@
  </tr>
  <tr>
   <td>$</td>
-  <td>round($scalar)</td>
-  <td>rounds $scalar to the nearest whole number</td>
+  <td>round($scalar, [places])</td>
+  <td>rounds $scalar to the nearest whole number or specified number of places</td>
  </tr>
  <tr>
   <td>$</td>

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-04-16 17:53:20 UTC (rev 334)
@@ -655,7 +655,14 @@
 
        if (l.size() >= args)
        {
-          a = (IOObject)BridgeUtilities.getObject(l);
+          Scalar b = (Scalar)l.pop();
+
+          if (!(b.objectValue() instanceof IOObject))
+          {
+             throw new IllegalArgumentException("expected I/O handle argument, received: " + SleepUtils.describe(b));
+          }
+
+          a = (IOObject)b.objectValue();
        }
        else
        {

Modified: sleep/src/sleep/bridges/SleepClosure.java
===================================================================
--- sleep/src/sleep/bridges/SleepClosure.java	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/src/sleep/bridges/SleepClosure.java	2008-04-16 17:53:20 UTC (rev 334)
@@ -175,10 +175,22 @@
        if (locals == null)
            locals = new Stack();
 
-       Scalar temp = evaluate(message, si, locals);
+       si.getScriptEnvironment().pushSource("<internal>");
+       si.getScriptEnvironment().CreateFrame();
+       si.getScriptEnvironment().CreateFrame(locals); /* dump the local vars here plz */
+
+       CallRequest request = new CallRequest.ClosureCallRequest(si.getScriptEnvironment(), -1, SleepUtils.getScalar(this), message);
+       request.CallFunction();
+
+       /* get the return value */    
+       Scalar rv = si.getScriptEnvironment().getCurrentFrame().isEmpty() ? SleepUtils.getEmptyScalar() : (Scalar)si.getScriptEnvironment().getCurrentFrame().pop();
+
+       /* handle the cleanup */
+       si.getScriptEnvironment().KillFrame();
        si.getScriptEnvironment().clearReturn();
+       si.getScriptEnvironment().popSource();
 
-       return temp;
+       return rv;
     }
 
     /** Evaluates the closure, use callClosure instead. */

Modified: sleep/src/sleep/console/TextConsole.java
===================================================================
--- sleep/src/sleep/console/TextConsole.java	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/src/sleep/console/TextConsole.java	2008-04-16 17:53:20 UTC (rev 334)
@@ -36,8 +36,9 @@
              System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
              System.out.println("Usage: java [properties] -jar sleep.jar [options] [-|file|expression]");
              System.out.println("       properties:");
+             System.out.println("         -Dsleep.assert=<true|false>");
+             System.out.println("         -Dsleep.classpath=<path to locate 3rd party jars from>");
              System.out.println("         -Dsleep.debug=<debug level>");
-             System.out.println("         -Dsleep.classpath=<path to locate 3rd party jars from>");
              System.out.println("       options:");
              System.out.println("         -a --ast       display the abstract syntax tree of the specified script");
              System.out.println("         -c --check     check the syntax of the specified file");

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-04-16 17:53:20 UTC (rev 334)
@@ -1130,6 +1130,11 @@
               return;
            }
 
+           if (Boolean.parseBoolean(System.getProperty("sleep.assert", "true")) == false)
+           {
+              return;
+           }
+
            Token assert_terms[] = ParserUtilities.groupByMessageTerm(parser, tokens[1]).getTokens();
            
            backup();

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-16 17:53:20 UTC (rev 334)
@@ -137,22 +137,8 @@
     */
    public static Scalar runCode(ScriptInstance script, Block code, HashMap vars)
    {
-       Stack locals = new Stack();
-
-       /* turn our hashmap into some acceptable local variables */
-       if (vars != null)
-       {
-          Iterator i = vars.entrySet().iterator();
-          while (i.hasNext())
-          {
-             Map.Entry value = (Map.Entry)i.next();
-             locals.push(new KeyValuePair(SleepUtils.getScalar(value.getKey().toString()), (Scalar)value.getValue()));
-          }
-       }
-    
-       /* do the actual call yo */
        CallRequest request = new CallRequest.InlineCallRequest(script.getScriptEnvironment(), Integer.MIN_VALUE, "eval", code);
-       return runCode(request, script, locals);
+       return runCode(request, script, getArgumentStack(vars));
    }
 
    /** "safely" run a snippet of code.  The main thing this function does is clear the return value 
@@ -259,6 +245,25 @@
       return dict;
    }
 
+   /** Generate a java.util.Stack of sleep.bridges.KeyValuePair arguments from a Map.  Assumes the keys are Strings and the values are already Scalar values. */
+   public static Stack getArgumentStack(Map pairs)
+   {
+       Stack locals = new Stack();
+
+       /* turn our hashmap into some acceptable local variables */
+       if (pairs != null)
+       {
+          Iterator i = pairs.entrySet().iterator();
+          while (i.hasNext())
+          {
+             Map.Entry value = (Map.Entry)i.next();
+             locals.push(new KeyValuePair(SleepUtils.getScalar(value.getKey().toString()), (Scalar)value.getValue()));
+          }
+       }
+
+       return locals;
+   }
+
    /** Generate a java.util.List from a scalar array.  Values will be the Java object 
        equivalents of the data stored in the scalar array. */
    public static List getListFromArray(Scalar array)

Added: sleep/tests/ioerr.sl
===================================================================
--- sleep/tests/ioerr.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/ioerr.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -0,0 +1 @@
+println("whatever", "blah");

Added: sleep/tests/iternotrace.sl
===================================================================
--- sleep/tests/iternotrace.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/iternotrace.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -0,0 +1,23 @@
+debug(15);
+
+sub generator
+{
+   local('$x');
+
+   for ($x = 0; $x < 5; $x++)
+   {
+      yield $x * 2;
+   }
+}
+
+sub foo
+{
+   foreach $data (&generator)
+   {
+      println("Received $data");
+   }
+
+   map({ println("More fp: $1"); }, &generator);
+}
+
+foo();

Modified: sleep/tests/output/callccfreeze.sl
===================================================================
--- sleep/tests/output/callccfreeze.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/callccfreeze.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,3 +1,4 @@
 Trace: &foo() -goto- &closure[callccfreeze.sl:7]#2 at callccfreeze.sl:11
+Trace: [&closure[callccfreeze.sl:5-6]#1] at <internal>:-1
 Trace: &invoke(&closure[callccfreeze.sl:5-6]#1) at callccfreeze.sl:7
 Trace: [&closure[callccfreeze.sl:7]#2 CALLCC: &closure[callccfreeze.sl:5-6]#1] at callccfreeze.sl:5

Modified: sleep/tests/output/fe_generatordb.sl
===================================================================
--- sleep/tests/output/fe_generatordb.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/fe_generatordb.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,64 +1,97 @@
 Trace: &this('$x') at fe_generatordb.sl:6
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 0' at <internal>:-1
 0 => val: 0
 Trace: &println('0 => val: 0') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 1' at <internal>:-1
 1 => val: 1
 Trace: &println('1 => val: 1') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 2' at <internal>:-1
 2 => val: 2
 Trace: &println('2 => val: 2') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 3' at <internal>:-1
 3 => val: 3
 Trace: &println('3 => val: 3') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 4' at <internal>:-1
 4 => val: 4
 Trace: &println('4 => val: 4') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 5' at <internal>:-1
 5 => val: 5
 Trace: &println('5 => val: 5') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 6' at <internal>:-1
 6 => val: 6
 Trace: &println('6 => val: 6') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 7' at <internal>:-1
 7 => val: 7
 Trace: &println('7 => val: 7') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 8' at <internal>:-1
 8 => val: 8
 Trace: &println('8 => val: 8') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 9' at <internal>:-1
 9 => val: 9
 Trace: &println('9 => val: 9') at fe_generatordb.sl:8
+Trace: [&closure[fe_generatordb.sl:6]#1 eval] at <internal>:-1
 Trace: &lambda(&closure[fe_generatordb.sl:13-19]#2, $start => 50, $stop => 60) = &closure[fe_generatordb.sl:13-19]#3 at fe_generatordb.sl:22
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 50 at <internal>:-1
 Testing out range stuff: 0 => 50
 Trace: &println('Testing out range stuff: 0 => 50') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 51 at <internal>:-1
 Testing out range stuff: 1 => 51
 Trace: &println('Testing out range stuff: 1 => 51') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 52 at <internal>:-1
 Testing out range stuff: 2 => 52
 Trace: &println('Testing out range stuff: 2 => 52') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 53 at <internal>:-1
 Testing out range stuff: 3 => 53
 Trace: &println('Testing out range stuff: 3 => 53') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 54 at <internal>:-1
 Testing out range stuff: 4 => 54
 Trace: &println('Testing out range stuff: 4 => 54') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 55 at <internal>:-1
 Testing out range stuff: 5 => 55
 Trace: &println('Testing out range stuff: 5 => 55') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 56 at <internal>:-1
 Testing out range stuff: 6 => 56
 Trace: &println('Testing out range stuff: 6 => 56') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 57 at <internal>:-1
 Testing out range stuff: 7 => 57
 Trace: &println('Testing out range stuff: 7 => 57') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 58 at <internal>:-1
 Testing out range stuff: 8 => 58
 Trace: &println('Testing out range stuff: 8 => 58') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 59 at <internal>:-1
 Testing out range stuff: 9 => 59
 Trace: &println('Testing out range stuff: 9 => 59') at fe_generatordb.sl:24
+Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] at <internal>:-1
 Trace: &this('$start $stop') at fe_generatordb.sl:29
 Trace: &_range2(70, 80) = &closure[fe_generatordb.sl:29-39]#4 at fe_generatordb.sl:42
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 70 at <internal>:-1
 My third test: 0 => 70
 Trace: &println('My third test: 0 => 70') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 71 at <internal>:-1
 My third test: 1 => 71
 Trace: &println('My third test: 1 => 71') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 72 at <internal>:-1
 My third test: 2 => 72
 Trace: &println('My third test: 2 => 72') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 73 at <internal>:-1
 My third test: 3 => 73
 Trace: &println('My third test: 3 => 73') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 74 at <internal>:-1
 My third test: 4 => 74
 Trace: &println('My third test: 4 => 74') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 75 at <internal>:-1
 My third test: 5 => 75
 Trace: &println('My third test: 5 => 75') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 76 at <internal>:-1
 My third test: 6 => 76
 Trace: &println('My third test: 6 => 76') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 77 at <internal>:-1
 My third test: 7 => 77
 Trace: &println('My third test: 7 => 77') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 78 at <internal>:-1
 My third test: 8 => 78
 Trace: &println('My third test: 8 => 78') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 79 at <internal>:-1
 My third test: 9 => 79
 Trace: &println('My third test: 9 => 79') at fe_generatordb.sl:44
+Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] at <internal>:-1

Added: sleep/tests/output/ioerr.sl
===================================================================
--- sleep/tests/output/ioerr.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/ioerr.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -0,0 +1 @@
+Warning: expected I/O handle argument, received: 'whatever' at ioerr.sl:1

Added: sleep/tests/output/iternotrace.sl
===================================================================
--- sleep/tests/output/iternotrace.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/iternotrace.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -0,0 +1,41 @@
+Trace: &local('$x') at iternotrace.sl:5
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 0 at <internal>:-1
+Received 0
+Trace: &println('Received 0') at iternotrace.sl:17
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 2 at <internal>:-1
+Received 2
+Trace: &println('Received 2') at iternotrace.sl:17
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 4 at <internal>:-1
+Received 4
+Trace: &println('Received 4') at iternotrace.sl:17
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 6 at <internal>:-1
+Received 6
+Trace: &println('Received 6') at iternotrace.sl:17
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 8 at <internal>:-1
+Received 8
+Trace: &println('Received 8') at iternotrace.sl:17
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] at <internal>:-1
+Trace: &local('$x') at iternotrace.sl:5
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 0 at <internal>:-1
+More fp: 0
+Trace: &println('More fp: 0') at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#3 eval: 0] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 2 at <internal>:-1
+More fp: 2
+Trace: &println('More fp: 2') at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#3 eval: 2] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 4 at <internal>:-1
+More fp: 4
+Trace: &println('More fp: 4') at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#3 eval: 4] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 6 at <internal>:-1
+More fp: 6
+Trace: &println('More fp: 6') at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#3 eval: 6] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 8 at <internal>:-1
+More fp: 8
+Trace: &println('More fp: 8') at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#3 eval: 8] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#1 eval] at <internal>:-1
+Trace: &map(&closure[iternotrace.sl:20]#3, &closure[iternotrace.sl:5-9]#1) = @($null, $null, $null, $null, $null) at iternotrace.sl:20
+Trace: &foo() at iternotrace.sl:23

Modified: sleep/tests/output/nmesgs.sl
===================================================================
--- sleep/tests/output/nmesgs.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/nmesgs.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,2 +1,2 @@
-Warning: null value error at eval:1
+Warning: expected I/O handle argument, received: $null at eval:1
 Warning: attempted an invalid index at nmesgs.sl:13

Modified: sleep/tests/output/proxy.sl
===================================================================
--- sleep/tests/output/proxy.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/proxy.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,40 +1,52 @@
 Trace: &local('$enumeration') at proxy.sl:25
 Trace: &lambda(&closure[proxy.sl:7-15]#1) = &closure[proxy.sl:7-15]#3 at proxy.sl:26
 Trace: &foo() = &closure[proxy.sl:7-15]#3 at proxy.sl:45
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd', 'e')) = 5 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd', 'e')) = 'e' at proxy.sl:32
+Trace: [&closure[proxy.sl:30-36]#5] = 'e' at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'e' at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'e' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd')) = 4 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd')) = 'd' at proxy.sl:32
+Trace: [&closure[proxy.sl:30-36]#5] = 'd' at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'd' at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'd' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c')) = 3 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c')) = 'c' at proxy.sl:32
+Trace: [&closure[proxy.sl:30-36]#5] = 'c' at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'c' at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'c' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b')) = 2 at proxy.sl:30
 Trace: &pop(@('a', 'b')) = 'b' at proxy.sl:32
+Trace: [&closure[proxy.sl:30-36]#5] = 'b' at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'b' at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'b' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a')) = 1 at proxy.sl:30
 Trace: &pop(@('a')) = 'a' at proxy.sl:32
+Trace: [&closure[proxy.sl:30-36]#5] = 'a' at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'a' at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'a' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@()) = 0 at proxy.sl:30
 Trace: [new java.util.NoSuchElementException: 'overextending my bounds dude :('] = java.util.NoSuchElementException: overextending my bounds dude :( at proxy.sl:36
+Trace: [&closure[proxy.sl:30-36]#5] - FAILED! at <internal>:-1
 Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) - FAILED! at proxy.sl:11
 Trace: [&closure[proxy.sl:7-15]#3 nextElement] - FAILED! at <Java>:-1
 Trace: [java.util.Collections list: &closure[proxy.sl:7-15]#3] - FAILED! at proxy.sl:45
@@ -42,12 +54,13 @@
 Trace: [java.util.NoSuchElementException: overextending my bounds dude :( getMessage] = 'overextending my bounds dude :(' at proxy.sl:49
 Error: overextending my bounds dude :( from: class java.util.NoSuchElementException
 Trace: &println('Error: overextending my bounds dude :( from: class java.util.NoSuchElementException') at proxy.sl:49
-Trace: &getStackTrace() = @(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    proxy.sl:36 <origin of exception>) at proxy.sl:50
+Trace: &getStackTrace() = @(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#5,    proxy.sl:36 <origin of exception>) at proxy.sl:50
    proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration)
    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement()
    proxy.sl:11 &invoke()
+   <internal>:-1 &closure[proxy.sl:30-36]#5
    proxy.sl:36 <origin of exception>
-Trace: &printAll(@(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    proxy.sl:36 <origin of exception>)) at proxy.sl:50
+Trace: &printAll(@(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#5,    proxy.sl:36 <origin of exception>)) at proxy.sl:50
 Trying again... what will java do?
 Trace: &println('Trying again... what will java do?') at proxy.sl:55
 Trace: [&closure[proxy.sl:57]#6 hasMoreElements] - FAILED! at <Java>:-1

Modified: sleep/tests/output/tcatch4.sl
===================================================================
--- sleep/tests/output/tcatch4.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/tcatch4.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -2,6 +2,7 @@
    tcatch4.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration)
    <Java>:-1 &closure[tcatch4.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement()
    tcatch4.sl:11 &invoke()
+   <internal>:-1 &closure[tcatch4.sl:30-36]#5
    tcatch4.sl:36 <origin of exception>
 Trying again... what will java do?
 Error: haha... testing bish!@#$ from: class java.lang.RuntimeException

Modified: sleep/tests/output/tracepo.sl
===================================================================
--- sleep/tests/output/tracepo.sl	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/tests/output/tracepo.sl	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,40 +1,52 @@
 Trace: &local('$enumeration') at tracepo.sl:25
 Trace: &lambda(&closure[tracepo.sl:7-15]#1) = &closure[tracepo.sl:7-15]#3 at tracepo.sl:26
 Trace: &foo() = &closure[tracepo.sl:7-15]#3 at tracepo.sl:45
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd', 'e')) = 5 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd', 'e')) = 'e' at tracepo.sl:32
+Trace: [&closure[tracepo.sl:30-36]#5] = 'e' at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'e' at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'e' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd')) = 4 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd')) = 'd' at tracepo.sl:32
+Trace: [&closure[tracepo.sl:30-36]#5] = 'd' at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'd' at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'd' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c')) = 3 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c')) = 'c' at tracepo.sl:32
+Trace: [&closure[tracepo.sl:30-36]#5] = 'c' at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'c' at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'c' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b')) = 2 at tracepo.sl:30
 Trace: &pop(@('a', 'b')) = 'b' at tracepo.sl:32
+Trace: [&closure[tracepo.sl:30-36]#5] = 'b' at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'b' at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'b' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a')) = 1 at tracepo.sl:30
 Trace: &pop(@('a')) = 'a' at tracepo.sl:32
+Trace: [&closure[tracepo.sl:30-36]#5] = 'a' at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'a' at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'a' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@()) = 0 at tracepo.sl:30
 Trace: [new java.util.NoSuchElementException: 'overextending my bounds dude :('] = java.util.NoSuchElementException: overextending my bounds dude :( at tracepo.sl:36
+Trace: [&closure[tracepo.sl:30-36]#5] - FAILED! at <internal>:-1
 Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) - FAILED! at tracepo.sl:11
 Trace: [&closure[tracepo.sl:7-15]#3 nextElement] - FAILED! at <Java>:-1
 Trace: [java.util.Collections list: &closure[tracepo.sl:7-15]#3] - FAILED! at tracepo.sl:45

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-03-28 05:08:27 UTC (rev 333)
+++ sleep/whatsnew.txt	2008-04-16 17:53:20 UTC (rev 334)
@@ -1,3 +1,16 @@
+2.1-beta 22  (16 Apr 08)
+===========
+- added a new API to SleepUtils to generate a variable stack 
+  from a java.util.Map.
+- I/O bridge now reports a better error when a I/O handle is 
+  expected as an argument but not received.
+- added -Dsleep.assert property to enable/disable assertion
+  statements.  
+- updated SleepClosure#callClosure to use the current preferred
+  function calling methods.  This enables closure calls from
+  map, reduce, search, etc. to be traced and to count against
+  the profiler statistics
+
 2.1-beta 21  (28 Mar 08)
 ===========
 - assignment loops now record proper line number information for



From rsmudge at mail.berlios.de  Wed Apr 16 20:34:38 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 16 Apr 2008 20:34:38 +0200
Subject: [Sleep-svn] r335 - in sleep: . src/sleep/runtime
Message-ID: <200804161834.m3GIYcmm011067@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-16 20:34:37 +0200 (Wed, 16 Apr 2008)
New Revision: 335

Modified:
   sleep/src/sleep/runtime/ScriptVariables.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/runtime/ScriptVariables.java
===================================================================
--- sleep/src/sleep/runtime/ScriptVariables.java	2008-04-16 17:53:20 UTC (rev 334)
+++ sleep/src/sleep/runtime/ScriptVariables.java	2008-04-16 18:34:37 UTC (rev 335)
@@ -180,6 +180,9 @@
     /** returns the current local variable scope */
     public Variable getLocalVariables()
     {
+       if (locals.size() == 0)
+          return null;
+
        return (Variable)locals.getFirst();
     }
 

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-04-16 17:53:20 UTC (rev 334)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-16 18:34:37 UTC (rev 335)
@@ -97,8 +97,22 @@
     */
    public static Scalar runCode(Block code, ScriptEnvironment env)
    {
-       CallRequest request = new CallRequest.InlineCallRequest(env, Integer.MIN_VALUE, "eval", code);
-       return runCode(request, env.getScriptInstance(), null);
+       if (env.getScriptVariables().getLocalVariables() == null)
+       {
+          env.getScriptVariables().pushLocalLevel();
+
+          CallRequest request = new CallRequest.InlineCallRequest(env, Integer.MIN_VALUE, "eval", code);
+          Scalar value = runCode(request, env.getScriptInstance(), null);
+
+          env.getScriptVariables().popLocalLevel();
+
+          return value;
+       }
+       else
+       {
+          CallRequest request = new CallRequest.InlineCallRequest(env, Integer.MIN_VALUE, "eval", code);
+          return runCode(request, env.getScriptInstance(), null);
+       }
    }
 
    /** "safely" runs a closure.  

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-16 17:53:20 UTC (rev 334)
+++ sleep/whatsnew.txt	2008-04-16 18:34:37 UTC (rev 335)
@@ -10,6 +10,10 @@
   function calling methods.  This enables closure calls from
   map, reduce, search, etc. to be traced and to count against
   the profiler statistics
+- SleepUtils.runCode(Block, ...) now creates (and assumes the 
+  responsibility for destroying) a local scope if none currently
+  exists.
+- 
 
 2.1-beta 21  (28 Mar 08)
 ===========



From rsmudge at mail.berlios.de  Thu Apr 17 07:56:15 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 17 Apr 2008 07:56:15 +0200
Subject: [Sleep-svn] r336 - in sleep: . docs src/sleep/bridges
	src/sleep/bridges/io src/sleep/engine src/sleep/engine/types
	src/sleep/runtime tests tests/output
Message-ID: <200804170556.m3H5uFwM003874@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-17 07:56:13 +0200 (Thu, 17 Apr 2008)
New Revision: 336

Added:
   sleep/tests/cache.sl
   sleep/tests/fob.sl
   sleep/tests/output/cache.sl
   sleep/tests/output/fob.sl
Modified:
   sleep/build.xml
   sleep/docs/sleeplang.html
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/io/IOObject.java
   sleep/src/sleep/engine/CallRequest.java
   sleep/src/sleep/engine/types/HashContainer.java
   sleep/src/sleep/runtime/MapWrapper.java
   sleep/src/sleep/runtime/ScriptInstance.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/callccfork.sl
   sleep/tests/output/forker.sl
   sleep/tests/output/ohash.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/wrong.sl
   sleep/tests/process.sl
   sleep/whatsnew.txt
Log:
almost there...


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/build.xml	2008-04-17 05:56:13 UTC (rev 336)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/docs/sleeplang.html
===================================================================
--- sleep/docs/sleeplang.html	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/docs/sleeplang.html	2008-04-17 05:56:13 UTC (rev 336)
@@ -1127,6 +1127,33 @@
 scope of <code>&amp;bar</code> you would have to use <code>$name => $name</code>.  The scalar reference <code>\$name</code>
 is equivalent to that expression.</p>
 
+<h3>Ordered Hashes</h3>
+
+<p>Sleep has a special class of hashes that keep their keys in a certain order.  These are ordered hashes.  Ordered hashes created
+with <code>&amp;ohash</code> keep track of insertion order.  The oldest key is at the beginning of the list while the newest key is
+kept at the end.  The <code>&amp;ohasha</code> keeps track of access order.  As keys are accessed they are moved to the end of the
+key list.  This type of hash keeps the least recently used key at the beginning.</p>
+
+<p>Ordered hashes may have hit and/or removal policies associated with them.  The removal policy is called every time a new key is
+about to be added.  The purpose of the removal policy is to decide if the key at the beginning of the list should be removed from
+the hash.  Likewise the miss policy is used to respond when a key with no associated value is accessed.</p>
+
+<p>The following example shows a hash acting as a cache for data stored on the file system.  As the cache gets big, the least
+recently used data is flushed to the disk.  When the data is requested later it is loaded again.</p>
+
+<pre></pre>
+
+<p>Ordered hashes and their policies are not used just as caches.  They also enable the dynamic programming method for solving certain
+classes of problems.  The following program calculates the Fibonnaci numbers in a very fast way:</p>
+
+<pre></pre>
+
+<p>This program takes ... on my computer.  For comparison, the following program calculates Fibonnaci numbers in a naive way.</p>
+
+<pre></pre>
+
+<p>Same result, except this program takes ...</p>
+
 <h3>Multidimensional Hashes/Arrays</h3>
 
 <p>Multidimensional hashes work exactly the same as Sleep arrays.  It is also possible to have an array of hashes, or a hash of 
@@ -2395,10 +2422,15 @@
  <tr>
   <td>%</td>
   <td>ohash(blah => "value", ...)</td>
-  <td>instantiates an ordered hash with the specified values.  ordered hashes mantain key insertion order.  keys can be updated without changing order.</td>
+  <td>instantiates an ordered hash with the specified values.  ordered hashes mantain key insertion order.</td>
  </tr>
  <tr>
   <td>%</td>
+  <td>ohasha(blah => "value", ...)</td>
+  <td>instantiates an access-time ordered hash with the specified values.  these ordered hashes mantain order based on element access.</td>
+ </tr>  
+ <tr>
+  <td>%</td>
   <td>putAll(%hash, @|&amp;, [@|&amp;])</td>
   <td>populates the hash with the specified iterators.  If only one iterator is specified then the second argument
   is assumed to be the same as the first.  The first iterator is iterated over to obtain the keys for the hash
@@ -2415,6 +2447,19 @@
   <td>removes the specified keys from the hash.</td>
  </tr>
  <tr>
+  <td></td>
+  <td>setMissPolicy(%ohash, &amp;closure)</td>
+  <td>sets the specified function as the miss policy for the specified ordered hash.  The miss policy is called when the hash encounters a key request
+  with no associated value.  The function is called with $1 = the hash scalar and $2 = the key.  The return value is used as the new value for the key.</td>
+ </tr>
+ <tr>
+  <td></td>
+  <td>setRemovalPolicy(%ohash, &amp;closure)</td>
+  <td>sets the specified function as the removal policy for the specified ordered hash.  The removal policy is called when a new value is added to the hash.
+  The function is called with $1 = the hash scalar and $2 = the key and $3 = the value of the last item in the ordered hash.  A non-$null return value 
+  with no associated value.  The function is called with $1 = the hash scalar and $2 = the key.  The return value is used as the new value for the key.</td>
+ </tr>
+ <tr>
   <td>$</td>
   <td>size(%hash)</td>
   <td>returns the number of elements in %hash</td>

Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/bridges/BasicStrings.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -523,13 +523,13 @@
 
     private static class CompareFunction implements Comparator
     {
-        protected Function       func;
+        protected SleepClosure   func;
         protected ScriptInstance script;
         protected Stack          locals;
 
         public CompareFunction(Function _func, ScriptInstance _script)
         {
-           func     = _func;
+           func     = (SleepClosure)_func;
            script   = _script;
            locals   = new Stack();
         }
@@ -539,9 +539,7 @@
            locals.push(b);
            locals.push(a);
 
-           Scalar temp = func.evaluate("&sort", script, locals);
-           script.getScriptEnvironment().clearReturn();
-
+           Scalar temp = func.callClosure("&sort", script, locals);
            return temp.intValue();
         }
     }

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -32,6 +32,7 @@
 import java.net.URL;
 import java.net.URLClassLoader;
 
+import sleep.engine.types.*;
 import java.lang.reflect.*; // for array casting stuff
 
 import sleep.parser.*;
@@ -65,6 +66,7 @@
         temp.put("&array", f_array); 
         temp.put("&hash", f_hash);
         temp.put("&ohash", f_hash);
+        temp.put("&ohasha", f_hash);
         temp.put("&@", f_array);
         temp.put("&%", f_hash);  
 
@@ -79,6 +81,8 @@
         temp.put("&splice", this);
         temp.put("&subarray", this);
         temp.put("&copy",  new copy());
+        temp.put("&setRemovalPolicy", this);
+        temp.put("&setMissPolicy", this);
  
         map map_f = new map();
 
@@ -246,8 +250,7 @@
        //   
        if (predName.equals("-istrue"))
        {
-          return (value.getArray() != null || value.getHash() != null) || (
-                  value.getActualValue().toString().length() != 0 && !("0".equals(value.getActualValue().toString())));
+          return SleepUtils.isTrueScalar(value);
        }
 
        if (predName.equals("-isfunction"))
@@ -531,7 +534,19 @@
     {
        public Scalar evaluate(String n, ScriptInstance si, Stack l)
        {
-          Scalar value = n.equals("&ohash") ? SleepUtils.getOrderedHashScalar() : SleepUtils.getHashScalar();
+          Scalar value = null; 
+          if (n.equals("&ohash"))
+          {
+              value = SleepUtils.getOrderedHashScalar();
+          }
+          else if (n.equals("&ohasha"))
+          {
+              value = SleepUtils.getAccessOrderedHashScalar();
+          }
+          else
+          {
+              value = SleepUtils.getHashScalar();
+          }
            
           while (!l.isEmpty())
           {
@@ -1211,6 +1226,24 @@
              return temp;
           }
        }
+       else if (n.equals("&setRemovalPolicy") || n.equals("&setMissPolicy"))
+       { 
+          if (value.getHash() == null || !(value.getHash() instanceof OrderedHashContainer))
+          {
+             throw new IllegalArgumentException(n + ": expected an ordered hash, received: " + SleepUtils.describe(value));
+          }
+          
+          SleepClosure function  = BridgeUtilities.getFunction(l, i);           
+          OrderedHashContainer blah = (OrderedHashContainer)(value.getHash());
+          if (n.equals("&setMissPolicy"))
+          {
+             blah.setMissPolicy(function);
+          }
+          else
+          {
+             blah.setRemovalPolicy(function);
+          }       
+       }
        else if (n.equals("&putAll"))
        {
           if (value.getHash() != null)

Modified: sleep/src/sleep/bridges/io/IOObject.java
===================================================================
--- sleep/src/sleep/bridges/io/IOObject.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/bridges/io/IOObject.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -123,18 +123,23 @@
       token = t;
    }
 
+   public static void setConsole(ScriptEnvironment environment, IOObject object)
+   {
+      environment.getScriptInstance().getMetadata().put("%console%", object);
+   }
+
    /** returns an IOObject that represents stdin/stdout to Sleep's I/O API.  To set a script's console
        object install an IOObject into a script environment under the variable name %console% */
    public static IOObject getConsole(ScriptEnvironment environment)
    {
-      IOObject console = (IOObject)environment.getEnvironment().get("%console%");
+      IOObject console = (IOObject)environment.getScriptInstance().getMetadata().get("%console%");
 
       if (console == null)
       {
          console = new IOObject();
          console.openRead(System.in);
          console.openWrite(System.out);
-         environment.getEnvironment().put("%console%", console);
+         setConsole(environment, console);
       }
 
       return console;

Modified: sleep/src/sleep/engine/CallRequest.java
===================================================================
--- sleep/src/sleep/engine/CallRequest.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/engine/CallRequest.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -72,9 +72,10 @@
          {
              try
              {
-                long stat = System.currentTimeMillis();
-                temp = execute();
-                stat = System.currentTimeMillis() - stat;
+                long total = e.getScriptInstance().total();
+                long stat  = System.currentTimeMillis();
+                temp       = execute();
+                stat       = (System.currentTimeMillis() - stat) - (e.getScriptInstance().total() - total);
                 e.getScriptInstance().collect(getFunctionName(), getLineNumber(), stat);
              }
              catch (RuntimeException rex)
@@ -95,9 +96,10 @@
 
              try
              {
+                long total = e.getScriptInstance().total();
                 long stat = System.currentTimeMillis();
                 temp = execute();
-                stat = System.currentTimeMillis() - stat;
+                stat       = (System.currentTimeMillis() - stat) - (e.getScriptInstance().total() - total);
                 e.getScriptInstance().collect(getFunctionName(), getLineNumber(), stat);
 
                 if (e.isThrownValue())

Modified: sleep/src/sleep/engine/types/HashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/HashContainer.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/engine/types/HashContainer.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -61,6 +61,6 @@
 
    public String toString()
    {
-      return values.toString();
+      return SleepUtils.describeEntries("%", values.entrySet());
    }
 }

Modified: sleep/src/sleep/runtime/MapWrapper.java
===================================================================
--- sleep/src/sleep/runtime/MapWrapper.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/runtime/MapWrapper.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -33,6 +33,28 @@
 
    public String toString()
    {
-      return "(read-only hash " + values.toString() + ")";
+      StringBuffer buffer = new StringBuffer("%(");
+
+      Iterator i = values.entrySet().iterator();
+      while (i.hasNext())
+      {
+         Map.Entry next = (Map.Entry)i.next();
+
+         if (next.getValue() != null && next.getKey() != null)
+         {
+            if (buffer.length() > 2)
+            {
+               buffer.append(", ");      
+            }
+
+            buffer.append(next.getKey());
+            buffer.append(" => ");
+  
+            buffer.append(SleepUtils.describe(ObjectUtilities.BuildScalar(true, next.getValue()))); 
+         }
+      }
+      buffer.append(")");
+
+      return buffer.toString();
    }
 }

Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -278,16 +278,27 @@
         }
     }
 
+    /** return the total number of ticks this script has spent processing */
+    public long total()
+    {
+        Long total = (Long)getMetadata().get("%total%");
+        return total == null ? 0L : total.longValue();
+    }
+
     /** this function is used internally by the sleep interpreter to collect profiler statistics
         when DEBUG_TRACE_CALLS or DEBUG_TRACE_PROFILE_ONLY is enabled */
     public void collect(String function, int lineNo, long ticks)
     {
-       Map statistics = (Map)getScriptEnvironment().getEnvironment().get("%statistics%");
+       Map    statistics = (Map)getMetadata().get("%statistics%");
+       Long   total      = (Long)getMetadata().get("%total%");
 
        if (statistics == null) 
        {
           statistics = new HashMap();
-          getScriptEnvironment().getEnvironment().put("%statistics%", statistics);
+          total      = new Long(0L);
+
+          getMetadata().put("%statistics%", statistics);
+          getMetadata().put("%total%", total);
        }
 
        ProfilerStatistic stats = (ProfilerStatistic)statistics.get(function);
@@ -300,8 +311,12 @@
           statistics.put(function, stats);
        }
 
+       /** updated individual statistics */
        stats.ticks += ticks;
        stats.calls ++;
+
+       /** update global statistic */
+       getMetadata().put("%total%", new Long(total.longValue() + ticks));
     }
 
     /** a quick way to check if we are profiling and not tracing the script steps */
@@ -315,7 +330,7 @@
         Note!!! For Sleep to provide profiler statistics, DEBUG_TRACE_CALLS or DEBUG_TRACE_PROFILE_ONLY must be enabled! */
     public List getProfilerStatistics()
     {
-        Map statistics = (Map)getScriptEnvironment().getEnvironment().get("%statistics%");
+        Map statistics = (Map)getMetadata().get("%statistics%");
 
         if (statistics != null)
         {
@@ -330,6 +345,25 @@
         }
     }
 
+    /** retrieves script meta data for you to update */
+    public Map getMetadata()
+    {
+       Scalar container = getScriptVariables().getGlobalVariables().getScalar("__meta__");
+       Map    meta      = null;
+
+       if (container == null)
+       {
+          meta = Collections.synchronizedMap(new HashMap()); /* we do this because this metadata may be shared between multiple threads */
+          getScriptVariables().getGlobalVariables().putScalar("__meta__", SleepUtils.getScalar((Object)meta));
+       }
+       else
+       {
+          meta = (Map)container.objectValue();
+       }
+
+       return meta;
+    }
+
     /** Dumps the profiler statistics to the specified stream */
     public void printProfileStatistics(OutputStream out)
     {
@@ -351,6 +385,9 @@
         si.setName(getName());
         si.setDebugFlags(getDebugFlags());
         si.watchers = watchers;
+
+        /* make sure things like profiler statistics and metadata are shared between threads. */
+        si.getScriptVariables().getGlobalVariables().putScalar("__meta__", SleepUtils.getScalar((Object)getMetadata()));
  
         return si;
     }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-17 05:56:13 UTC (rev 336)
@@ -400,6 +400,34 @@
       return values.toString();
    }
 
+   /** describe the entries in a Sleep hash */
+   public static String describeEntries(String sigil, Set entries)
+   {
+      StringBuffer buffer = new StringBuffer(sigil + "(");
+
+      Iterator i = entries.iterator();
+      while (i.hasNext())
+      {
+         Map.Entry next = (Map.Entry)i.next();
+
+         if (!SleepUtils.isEmptyScalar((Scalar)next.getValue()))
+         {
+            if (buffer.length() > 2)
+            {
+               buffer.append(", ");
+            }
+
+            buffer.append(next.getKey());
+            buffer.append(" => ");
+  
+            buffer.append(describe((Scalar)next.getValue()));
+         }
+      }
+      buffer.append(")");
+
+      return buffer.toString();
+   }
+
    /** returns a string description of the specified scalar. Used by debugging mechanism to
        format scalars based on their value type, i.e. strings are enclosed in single quotes,
        objects in brackets, $null is displayed as $null, etc. */
@@ -425,27 +453,7 @@
       }
       if (scalar.getHash() != null)
       {
-         StringBuffer buffer = new StringBuffer("%(");
-         Iterator i = scalar.getHash().keys().scalarIterator();
-         while (i.hasNext())
-         {
-            Scalar next = (Scalar)i.next();
-            buffer.append(next.toString());
-
-            buffer.append(" => ");
-
-            Scalar nval = scalar.getHash().getAt(next);
-
-            buffer.append(describe(nval));
-
-            if (i.hasNext())
-            {
-               buffer.append(", ");
-            }
-         }
-        
-         buffer.append(")");
-         return buffer.toString();
+         return scalar.getHash().toString();
       }
       else
       {
@@ -490,15 +498,24 @@
       return temp;
    }
 
-   /** returns an empty ordered hashmap scalar */
+   /** returns an empty insertion ordered hashmap scalar */
    public static Scalar getOrderedHashScalar()
    {
       Scalar temp = new Scalar();
-      temp.setValue(new HashContainer(new LinkedHashMap()));
+      temp.setValue(new OrderedHashContainer(16, 0.75f, false));
 
       return temp;
    }
 
+   /** returns an empty access ordered hashmap scalar */
+   public static Scalar getAccessOrderedHashScalar()
+   {
+      Scalar temp = new Scalar();
+      temp.setValue(new OrderedHashContainer(16, 0.75f, true));
+
+      return temp;
+   }
+
    /** returns an int scalar with value x */
    public static Scalar getScalar(int x)
    {
@@ -616,4 +633,10 @@
 
       return SleepUtils.getEmptyScalar();
    }
+
+   /** check if the scalar is true using Sleep's definition of truth.  A scalar is considered true if it is not $null and it is not equal to a representation of 0 */
+   public static boolean isTrueScalar(Scalar value)
+   {
+      return (value.getArray() != null || value.getHash() != null) || (value.getActualValue().toString().length() != 0 && !("0".equals(value.getActualValue().toString())));
+   }
 }

Added: sleep/tests/cache.sl
===================================================================
--- sleep/tests/cache.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/cache.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -0,0 +1,38 @@
+debug(7);
+
+global('$hash');
+
+sub tryit
+{
+   setRemovalPolicy($hash, { return iff(size($1) >= 4); });
+
+   add($hash, a => "apple", b => "boy", c => "cat");
+   println($hash);
+
+   add($hash, d => "dog");
+   println($hash);
+
+   println("Access 'a' " . $hash["a"]);
+   println($hash);
+
+   add($hash, e => "emu");
+   println($hash);
+
+   add($hash, m => "night elf mohawk");
+   println($hash);
+
+   println("Remove 'm'");
+   $hash["m"] = $null;
+   println($hash);
+
+   add($hash, n => "nerf");
+   println($hash);
+
+   add($hash, x => "XXX");
+   println($hash);
+}
+
+println("Insertion Ordered Hash ----------");
+tryit($hash => ohash());
+println("Access Ordered Hash    ----------");
+tryit($hash => ohasha());

Added: sleep/tests/fob.sl
===================================================================
--- sleep/tests/fob.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/fob.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -0,0 +1,17 @@
+debug(7);
+
+# phearsome Fibonacci sequence implementation.
+
+sub fob
+{
+   local('%fhash');
+   %fhash = ohash(0 => 0L, 1 => 1L);
+   setMissPolicy(%fhash,
+   {
+      return long($1[$2 - 1]) + long($1[$2 - 2]);
+   });
+   return %fhash[$1];
+}
+
+println("Fib no. " . fob(90L));
+

Added: sleep/tests/output/cache.sl
===================================================================
--- sleep/tests/output/cache.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/cache.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -0,0 +1,22 @@
+Insertion Ordered Hash ----------
+%(a => 'apple', b => 'boy', c => 'cat')
+%(a => 'apple', b => 'boy', c => 'cat', d => 'dog')
+Access 'a' apple
+%(a => 'apple', b => 'boy', c => 'cat', d => 'dog')
+%(b => 'boy', c => 'cat', d => 'dog', e => 'emu')
+%(c => 'cat', d => 'dog', e => 'emu', m => 'night elf mohawk')
+Remove 'm'
+%(c => 'cat', d => 'dog', e => 'emu')
+%(c => 'cat', d => 'dog', e => 'emu', n => 'nerf')
+%(d => 'dog', e => 'emu', n => 'nerf', x => 'XXX')
+Access Ordered Hash    ----------
+%(a => 'apple', b => 'boy', c => 'cat')
+%(a => 'apple', b => 'boy', c => 'cat', d => 'dog')
+Access 'a' apple
+%(b => 'boy', c => 'cat', d => 'dog', a => 'apple')
+%(c => 'cat', d => 'dog', a => 'apple', e => 'emu')
+%(d => 'dog', a => 'apple', e => 'emu', m => 'night elf mohawk')
+Remove 'm'
+%(d => 'dog', a => 'apple', e => 'emu')
+%(d => 'dog', a => 'apple', e => 'emu', n => 'nerf')
+%(a => 'apple', e => 'emu', n => 'nerf', x => 'XXX')

Modified: sleep/tests/output/callccfork.sl
===================================================================
--- sleep/tests/output/callccfork.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/callccfork.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -4,7 +4,7 @@
 Inside of callcc function
 Trace: &println('Inside of callcc function') at callccfork.sl:12
 Trace: [&closure[callccfork.sl:12-13]#3 CALLCC: &closure[callccfork.sl:9-15]#2] = 'pHEAR' at callccfork.sl:10
-Trace: &fork(&closure[callccfork.sl:9-15]#1) = sleep.bridges.io.IOObject at d88db7 at callccfork.sl:20
-Trace: &wait(sleep.bridges.io.IOObject at d88db7) = 'pHEAR' at callccfork.sl:21
+Trace: &fork(&closure[callccfork.sl:9-15]#1) = sleep.bridges.io.IOObject at 31c89c at callccfork.sl:20
+Trace: &wait(sleep.bridges.io.IOObject at 31c89c) = 'pHEAR' at callccfork.sl:21
 pHEAR
 Trace: &println('pHEAR') at callccfork.sl:22

Added: sleep/tests/output/fob.sl
===================================================================
--- sleep/tests/output/fob.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/fob.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -0,0 +1 @@
+Fib no. 2880067194370816120

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/forker.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -1,4 +1,4 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 41fab6 at forker.sl:8
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at c9e67a at forker.sl:8
 Trace: &sleep(1000) at forker.sl:12
 Trace: &check('outside of fork') at forker.sl:14

Modified: sleep/tests/output/ohash.sl
===================================================================
--- sleep/tests/output/ohash.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/ohash.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -7,7 +7,7 @@
 b          is 56
 %(a => 'ordered insert...', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L)
 %(c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L)
-%(c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, a => 'at the end')
-%(c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, a => 'at the end', zzz => 'this is at the end of phear')
-%(begin => 'front end', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, a => 'at the end', zzz => 'this is at the end of phear')
-%(c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, a => 'at the end', zzz => 'this is at the end of phear')
+%(a => 'at the end', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L)
+%(a => 'at the end', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, zzz => 'this is at the end of phear')
+%(begin => 'front end', a => 'at the end', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, zzz => 'this is at the end of phear')
+%(a => 'at the end', c => 'cat', d => 'dog', p => 'pHEAR', aa => 33, b => 56L, zzz => 'this is at the end of phear')

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/trace.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at e29820 println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 716cb7 println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at e29820 println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 716cb7 println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at e29820 println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 716cb7 println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/output/wrong.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at f1916f println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at 8330bf println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at f1916f println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at 8330bf println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at f1916f println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at 8330bf println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at f1916f println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at 8330bf println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at f1916f println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at 8330bf println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at f1916f println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at 8330bf println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at f1916f println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at 8330bf println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at f1916f println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at 8330bf println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at f1916f println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at 8330bf println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at f1916f println: test] at wrong.sl:31
+Trace: [java.io.PrintStream at 8330bf println: test] at wrong.sl:31
 Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 608760 at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at f1916f println: [C at 608760] at wrong.sl:34
+Trace: [java.io.PrintStream at 8330bf println: [C at 608760] at wrong.sl:34

Modified: sleep/tests/process.sl
===================================================================
--- sleep/tests/process.sl	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/tests/process.sl	2008-04-17 05:56:13 UTC (rev 336)
@@ -16,8 +16,8 @@
    }
  
    $buffer = allocate();
-   [[[$script getScriptEnvironment] getEnvironment] 
-                                    put: "%console%", $buffer];
+   [sleep.bridges.io.IOObject setConsole: [$script getScriptEnvironment], $buffer];
+
    [$script runScript];
 
    closef($buffer);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-16 18:34:37 UTC (rev 335)
+++ sleep/whatsnew.txt	2008-04-17 05:56:13 UTC (rev 336)
@@ -1,4 +1,4 @@
-2.1-beta 22  (16 Apr 08)
+2.1-beta 22  (17 Apr 08)
 ===========
 - added a new API to SleepUtils to generate a variable stack 
   from a java.util.Map.
@@ -13,8 +13,45 @@
 - SleepUtils.runCode(Block, ...) now creates (and assumes the 
   responsibility for destroying) a local scope if none currently
   exists.
-- 
+- extended the ordered hash (&ohash) concept to allow the
+  implementation of a cache with a Sleep hash interface:
 
+  -- &ohash orders keys in insertion order (no surprise here)
+  -- added &ohasha to create a hash with keys kept in access order
+  -- added setRemovalPolicy(%hash, &closure) to set a closure that
+     determines wether the last element of the specified hash
+     should be removed or not.  Arguments to the closure are:
+     $1 = the hash, $2 = the key, and $3 = the value.
+  -- added setMissPolicy(%hash, &closure) to a set closure that
+     determines what value to use when a hash access misses.
+     The closure is called with $1 = the hash and $2 = the key
+
+  These features should enable better management of massive data 
+  structures within Sleep.  Someone *cough*Marty*cough* will
+  benefit greatly from this.
+- sleep.runtime.ScalarHash implementations are now responsible 
+  for creating their own toString representation.  This is 
+  necessary as some hash implementations (i.e. &ohasha) are
+  sensitive to access order.  Added a helper function to assist
+  with creating a String representation from a java.util.Set of
+  java.util.Map$Entry.  SleepUtils.describeEntries(String, Set)
+- profiler now reflects time spent in current function sans
+  child function calls.  avoids numbers getting out of whack
+  due to recursion.
+- created a new means for storing script metadata information.
+  the java.util.Map obtained by ScriptInstance.getMetadata()
+  is stored in the global variables for a script and it is 
+  passed on to child forks.   The script "environment" where
+  functions and such are stored should not be used for 
+  keeping state.
+
+  This breaks backwards compatability if you install a new
+  Sleep console as %console% or if you manipulate script
+  statistics directly by accessing %statistics%
+
+  To set the Sleep console use the static method in
+  sleep.bridges.io.IOObject#setConsole(ScriptEnvironment, IOObject)
+
 2.1-beta 21  (28 Mar 08)
 ===========
 - assignment loops now record proper line number information for



From rsmudge at mail.berlios.de  Thu Apr 17 07:56:41 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 17 Apr 2008 07:56:41 +0200
Subject: [Sleep-svn] r337 - sleep/src/sleep/engine/types
Message-ID: <200804170556.m3H5ufVb003929@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-17 07:56:41 +0200 (Thu, 17 Apr 2008)
New Revision: 337

Added:
   sleep/src/sleep/engine/types/OrderedHashContainer.java
Log:
..


Added: sleep/src/sleep/engine/types/OrderedHashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-04-17 05:56:13 UTC (rev 336)
+++ sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-04-17 05:56:41 UTC (rev 337)
@@ -0,0 +1,132 @@
+package sleep.engine.types;
+
+import sleep.runtime.*;
+
+import java.util.*;
+
+import sleep.bridges.*;
+
+/* Container for Sleep hashes with associated policies.  This container allows construction of an ordered hash that orders elements based on
+   insertion (or optionally access order).  A miss policy function determines what value to use when a non-existent key is requested.  The removal policy
+   is called to determine if the last entry should be removed.  This is a powerful container for constructing caches out of the Sleep hash data structure. */  
+public class OrderedHashContainer extends HashContainer 
+{
+   protected boolean shouldClean = false;
+
+   private class OrderedHash extends LinkedHashMap
+   {
+      public OrderedHash(int c, float l, boolean b)
+      {
+         super(c, l, b);
+      }
+
+      protected boolean removeEldestEntry(Map.Entry eldest)
+      {
+         return removeEldestEntryCheck(eldest); 
+      }
+   }
+
+   /** constructs an ordered hash container based on the specified items */
+   public OrderedHashContainer(int capacity, float loadfactor, boolean type)
+   {
+       values = new OrderedHash(capacity, loadfactor, type);
+   }
+
+   /** policy function for what to do when a miss occurs */
+   protected SleepClosure missPolicy;
+
+   /** policy function for what to do when a hit occurs */
+   protected SleepClosure removalPolicy;
+
+   /** set the removal policy for this hash (decides if an entry should be removed or not */
+   public void setRemovalPolicy(SleepClosure policy)
+   {
+      removalPolicy = policy;
+   }
+
+   /** set the miss policy for this hash (determines default value of missed value) */
+   public void setMissPolicy(SleepClosure policy)
+   {
+      missPolicy = policy;
+   }
+
+   protected boolean removeEldestEntryCheck(Map.Entry eldest)
+   {
+      if (removalPolicy != null && eldest != null)
+      {
+         Stack locals = new Stack();
+         locals.push(eldest.getValue());
+         locals.push(SleepUtils.getScalar(eldest.getKey().toString()));
+         locals.push(SleepUtils.getHashScalar(this));
+
+         Scalar value = removalPolicy.callClosure("remove", null, locals);
+         return SleepUtils.isTrueScalar(value);
+      }
+
+      return false;
+   }
+
+   public ScalarArray keys()
+   {
+      List keys = new LinkedList();
+      Iterator i = values.entrySet().iterator();
+      while (i.hasNext())
+      {
+         Map.Entry next = (Map.Entry)i.next();
+         if (!SleepUtils.isEmptyScalar((Scalar)next.getValue()))
+         {
+            keys.add(next.getKey());
+         }
+      }      
+
+      /* flag things for cleanup; the + 1 accounts for the possibility that we just
+         accessed a new scalar that hasn't been assigned a value yet.  cleaning in this case would be pointless */
+      shouldClean = values.size() > (keys.size() + 1);
+      return new CollectionWrapper(keys);
+   }
+
+   /** removes all null values from this hash only when we get out of sync */
+   private void cleanup()
+   {
+      if (shouldClean)
+      {
+         Iterator i = values.entrySet().iterator();
+         while (i.hasNext())
+         {
+            Map.Entry next = (Map.Entry)i.next();
+            if (SleepUtils.isEmptyScalar((Scalar)next.getValue()))
+            {
+               i.remove();
+            }
+         }      
+
+         shouldClean = false;
+      }
+   }
+
+   public Scalar getAt(Scalar key)
+   {
+      Scalar value = (Scalar)values.get(key.getValue().toString());
+
+      if (missPolicy != null && SleepUtils.isEmptyScalar(value))
+      {
+         cleanup();
+
+         Stack locals = new Stack();
+         locals.push(SleepUtils.getScalar(key.toString()));
+         locals.push(SleepUtils.getHashScalar(this));
+
+         value = missPolicy.callClosure("miss", null, locals);
+         values.put(key.getValue().toString(), value);
+      }
+      else if (value == null)
+      {
+         cleanup();
+
+         value = SleepUtils.getEmptyScalar();
+         values.put(key.getValue().toString(), value);
+      }
+
+      return value;
+   }
+}



From rsmudge at mail.berlios.de  Thu Apr 17 08:21:20 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 17 Apr 2008 08:21:20 +0200
Subject: [Sleep-svn] r338 - in sleep: . docs src/sleep/runtime
Message-ID: <200804170621.m3H6LKnJ005312@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-17 08:21:18 +0200 (Thu, 17 Apr 2008)
New Revision: 338

Modified:
   sleep/build.xml
   sleep/docs/sleeplang.html
   sleep/readme.txt
   sleep/src/sleep/runtime/SleepUtils.java
Log:
2.1-b22 in the can.



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-04-17 05:56:41 UTC (rev 337)
+++ sleep/build.xml	2008-04-17 06:21:18 UTC (rev 338)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/docs/sleeplang.html
===================================================================
--- sleep/docs/sleeplang.html	2008-04-17 05:56:41 UTC (rev 337)
+++ sleep/docs/sleeplang.html	2008-04-17 06:21:18 UTC (rev 338)
@@ -1127,7 +1127,7 @@
 scope of <code>&amp;bar</code> you would have to use <code>$name => $name</code>.  The scalar reference <code>\$name</code>
 is equivalent to that expression.</p>
 
-<h3>Ordered Hashes</h3>
+<a name="marty"></a><h3>Ordered Hashes</h3>
 
 <p>Sleep has a special class of hashes that keep their keys in a certain order.  These are ordered hashes.  Ordered hashes created
 with <code>&amp;ohash</code> keep track of insertion order.  The oldest key is at the beginning of the list while the newest key is
@@ -1141,19 +1141,116 @@
 <p>The following example shows a hash acting as a cache for data stored on the file system.  As the cache gets big, the least
 recently used data is flushed to the disk.  When the data is requested later it is loaded again.</p>
 
-<pre></pre>
+<pre>debug(7);
 
+# if a miss occurs, check if the key is cached
+# in the current directory and load it.
+sub missPolicy
+{
+   local('$handle $data');
+
+   if (-exists $2)
+   {
+      $handle = openf($2);
+      $data = readObject($handle);
+      closef($handle);
+
+      println("--- Loaded $2");
+      return $data;
+   }
+
+   return $null;
+}
+
+# if the size of the data structure is over 3
+# elements then save it to the disk.
+sub removalPolicy
+{
+   local('$handle');
+
+   if (size($1) >= 3)
+   {
+      $handle = openf("> $+ $2");
+      writeObject($handle, $3);
+      closef($handle);
+
+      println("+++ Saved $2");
+      return 1;
+   }
+
+   return 0;
+}
+
+# lets test it out...
+global('%data');
+
+%data = ohasha();
+setMissPolicy(%data, &missPolicy);
+setRemovalPolicy(%data, &removalPolicy);
+
+add(%data, a => "apple", b => "batz", c => "cats");
+println(%data);
+
+println("Access 'a': " . %data["a"]);
+println(%data);
+
+add(%data, d => "dog");
+println(%data);
+
+println("Access 'b': " . %data["b"]);
+println(%data);</pre>
+
+<p>The output of this program is:</p>
+
+<pre><i>$ <b>java -jar sleep.jar cache.sl</b>
+%(a => 'apple', b => 'batz', c => 'cats')
+Access 'a': apple
+%(b => 'batz', c => 'cats', a => 'apple')
++++ Saved b
+%(c => 'cats', a => 'apple', d => 'dog')
+--- Loaded b
++++ Saved c
+Access 'b': batz
+%(a => 'apple', d => 'dog', b => 'batz')</i></pre>
+
 <p>Ordered hashes and their policies are not used just as caches.  They also enable the dynamic programming method for solving certain
 classes of problems.  The following program calculates the Fibonnaci numbers in a very fast way:</p>
 
-<pre></pre>
+<pre>sub fib
+{
+   local('%fhash');
+   %fhash = ohash(0 => 0, 1 => 1);  
+   setMissPolicy(%fhash,
+   {
+      return $1[$2 - 1] + $1[$2 - 2];            
+   });
+   return %fhash[$1];
+}
 
-<p>This program takes ... on my computer.  For comparison, the following program calculates Fibonnaci numbers in a naive way.</p>
+println("Fib no. " . fib(25));</pre>
 
-<pre></pre>
+<p>This program takes 0.028 seconds on my computer.  For comparison, the following program calculates Fibonnaci numbers in a naive way.</p>
 
-<p>Same result, except this program takes ...</p>
+<pre>sub fib
+{
+   if ($1 == 0)
+   {
+      return 0;
+   }
+   else if ($1 == 1)
+   {
+      return 1;
+   }
+   else
+   {
+      return fib($1 - 1) + fib($1 - 2);
+   }
+}
 
+println("Fib no. " . fib(25));</pre>
+
+<p>Same result, except this program takes 6.61 seconds.</p>
+
 <h3>Multidimensional Hashes/Arrays</h3>
 
 <p>Multidimensional hashes work exactly the same as Sleep arrays.  It is also possible to have an array of hashes, or a hash of 

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-04-17 05:56:41 UTC (rev 337)
+++ sleep/readme.txt	2008-04-17 06:21:18 UTC (rev 338)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 21 - README   
+Sleep - 2.1 beta 22 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is
@@ -20,7 +20,8 @@
 wanted* to integrate it.  Since then, Sleep has been revised, expanded, 
 and stabilized.  
 
-Sleep Project Homepage: http://sleep.hick.org/
+Sleep Project Homepage: http://sleep.dashnine.org/
+                        http://sleep.hick.org/      (mirror)
 
  ------- -------------------- ---------   ---------------  ------- ---------
 Documentation

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-04-17 05:56:41 UTC (rev 337)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-17 06:21:18 UTC (rev 338)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080328;
+   public static final int    SLEEP_RELEASE = 20080417;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";



From rsmudge at mail.berlios.de  Thu Apr 17 17:59:43 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 17 Apr 2008 17:59:43 +0200
Subject: [Sleep-svn] r339 - in sleep: . src/sleep/parser
Message-ID: <200804171559.m3HFxhFa017891@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-17 17:59:43 +0200 (Thu, 17 Apr 2008)
New Revision: 339

Modified:
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-04-17 06:21:18 UTC (rev 338)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-04-17 15:59:43 UTC (rev 339)
@@ -1130,7 +1130,7 @@
               return;
            }
 
-           if (Boolean.parseBoolean(System.getProperty("sleep.assert", "true")) == false)
+           if (Boolean.valueOf(System.getProperty("sleep.assert", "true")) == Boolean.FALSE)
            {
               return;
            }

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-17 06:21:18 UTC (rev 338)
+++ sleep/whatsnew.txt	2008-04-17 15:59:43 UTC (rev 339)
@@ -1,3 +1,8 @@
+2.1-beta 23
+===========
+- removed a Java 1.5 API call in CodeGenerator (thanks to 
+  Ralph Becker for catching this one).
+
 2.1-beta 22  (17 Apr 08)
 ===========
 - added a new API to SleepUtils to generate a variable stack 



From rsmudge at mail.berlios.de  Fri Apr 18 20:13:17 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 18 Apr 2008 20:13:17 +0200
Subject: [Sleep-svn] r340 - in sleep: . src/sleep/bridges src/sleep/console
	src/sleep/interfaces tests tests/data
	tests/data/src/org/hick/tests tests/output
Message-ID: <200804181813.m3IIDHkB016604@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-18 20:13:15 +0200 (Fri, 18 Apr 2008)
New Revision: 340

Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/BasicNumbers.java
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/DefaultEnvironment.java
   sleep/src/sleep/bridges/DefaultVariable.java
   sleep/src/sleep/bridges/FileSystemBridge.java
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/src/sleep/bridges/TimeDateBridge.java
   sleep/src/sleep/console/ConsoleImplementation.java
   sleep/src/sleep/interfaces/Loadable.java
   sleep/tests/data/src/org/hick/tests/TestLoadable.java
   sleep/tests/data/test.jar
   sleep/tests/forkdl.sl
   sleep/tests/impfrom4.sl
   sleep/tests/output/byteconvert.sl
   sleep/tests/output/byteconvert2.sl
   sleep/tests/output/checksum.sl
   sleep/tests/output/digest.sl
   sleep/tests/output/forkdl.sl
   sleep/tests/output/impfrom4.sl
   sleep/whatsnew.txt
Log:
changed the Loadable signature.



Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -41,9 +41,8 @@
 /** provides IO functions for the sleep language */
 public class BasicIO implements Loadable, Function, Evaluation
 {
-    public boolean scriptUnloaded(ScriptInstance aScript)
+    public void scriptUnloaded(ScriptInstance aScript)
     {
-        return true;
     }
 
     public Scalar evaluateString(ScriptInstance script, String value)
@@ -74,7 +73,7 @@
        return rv;
     }
 
-    public boolean scriptLoaded (ScriptInstance aScript)
+    public void scriptLoaded (ScriptInstance aScript)
     {
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
@@ -144,8 +143,6 @@
         /* integrity functions */
         temp.put("&checksum", this);
         temp.put("&digest",   this);
-
-        return true;
     }
 
     private static Checksum getChecksum(String algorithm)

Modified: sleep/src/sleep/bridges/BasicNumbers.java
===================================================================
--- sleep/src/sleep/bridges/BasicNumbers.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/BasicNumbers.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -34,12 +34,11 @@
 /** provides some of the basic number crunching functionality */
 public class BasicNumbers implements Predicate, Operator, Loadable, Function
 {
-    public boolean scriptUnloaded(ScriptInstance aScript)
+    public void scriptUnloaded(ScriptInstance aScript)
     {
-       return true;
     }
 
-    public boolean scriptLoaded(ScriptInstance aScript)
+    public void scriptLoaded(ScriptInstance aScript)
     {
        Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
@@ -94,8 +93,6 @@
        // functions
        temp.put("&rand", this);
        temp.put("&srand", this);
-
-       return true;
     }
 
     public Scalar evaluate(String name, ScriptInstance si, Stack args)

Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/BasicStrings.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -47,12 +47,11 @@
         ParserConfig.addKeyword("cmp");
     }
 
-    public boolean scriptUnloaded(ScriptInstance aScript)
+    public void scriptUnloaded(ScriptInstance aScript)
     {
-        return true;
     }
 
-    public boolean scriptLoaded (ScriptInstance aScript)
+    public void scriptLoaded (ScriptInstance aScript)
     {
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
@@ -104,8 +103,6 @@
         temp.put("x", new oper_multiply());
         temp.put("cmp", new oper_compare());
         temp.put("<=>", new oper_spaceship());
-
-        return true;
     }
 
     private static class pred_eq implements Predicate

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -48,12 +48,11 @@
        ParserConfig.addKeyword("=~");
     }
 
-    public boolean scriptUnloaded (ScriptInstance i)
+    public void scriptUnloaded (ScriptInstance i)
     {
-        return true;
     }
 
-    public boolean scriptLoaded (ScriptInstance i)
+    public void scriptLoaded (ScriptInstance i)
     {
         Hashtable temp = i.getScriptEnvironment().getEnvironment();
         //
@@ -162,8 +161,6 @@
         temp.put("&invoke",    this);
 
         temp.put("=>",       new HashKeyValueOp());
-
-        return true;
     }
 
     private static class SyncPrimitives implements Function 

Modified: sleep/src/sleep/bridges/DefaultEnvironment.java
===================================================================
--- sleep/src/sleep/bridges/DefaultEnvironment.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/DefaultEnvironment.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -11,7 +11,7 @@
 {
     public HashMap   func; // table to store the actual block associated with the function.
 
-    public boolean scriptUnloaded (ScriptInstance si)
+    public void scriptUnloaded (ScriptInstance si)
     {
         // My apoligies in advance.  It appears this code for unloading scripts is really ugly.
         // Indeed it is.  However it accomplishes my goals of reverting to a previously defined version of a
@@ -51,8 +51,6 @@
               }
            }
         }
-
-        return true;
     }
 
     // It's a remote possibility that a script might have the following:
@@ -85,7 +83,7 @@
         return null;
     }
 
-    public boolean scriptLoaded (ScriptInstance si)
+    public void scriptLoaded (ScriptInstance si)
     {
         Hashtable env = si.getScriptEnvironment().getEnvironment(); // assuming the environment is shared. hah right
 
@@ -94,8 +92,6 @@
         //
         env.put("sub",    this);
         env.put("inline", this);
-
-        return true;
     }
 
     public void bindFunction(ScriptInstance si, String type, String name, Block code)

Modified: sleep/src/sleep/bridges/DefaultVariable.java
===================================================================
--- sleep/src/sleep/bridges/DefaultVariable.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/DefaultVariable.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -59,14 +59,12 @@
         return new DefaultVariable();
     }
 
-    public boolean scriptLoaded (ScriptInstance script)
+    public void scriptLoaded (ScriptInstance script)
     {
-        return true;
     }
 
-    public boolean scriptUnloaded (ScriptInstance script)
+    public void scriptUnloaded (ScriptInstance script)
     {
-        return true;
     }
 
     public DefaultVariable()

Modified: sleep/src/sleep/bridges/FileSystemBridge.java
===================================================================
--- sleep/src/sleep/bridges/FileSystemBridge.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/FileSystemBridge.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -14,12 +14,11 @@
 /** provides a bridge for accessing the local file system */
 public class FileSystemBridge implements Loadable, Function
 {
-    public boolean scriptUnloaded(ScriptInstance aScript)
+    public void scriptUnloaded(ScriptInstance aScript)
     {
-        return true;
     }
 
-    public boolean scriptLoaded (ScriptInstance aScript)
+    public void scriptLoaded (ScriptInstance aScript)
     {
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
@@ -46,8 +45,6 @@
         temp.put("&rename",          this);
         temp.put("&setLastModified", this);
         temp.put("&setReadOnly",     this);
-
-        return true;
     }
 
     public Scalar evaluate(String n, ScriptInstance i, Stack l)

Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -62,12 +62,11 @@
        return temp;
     }
 
-    public boolean scriptUnloaded(ScriptInstance aScript)
+    public void scriptUnloaded(ScriptInstance aScript)
     {
-        return true;
     }
 
-    public boolean scriptLoaded (ScriptInstance aScript)
+    public void scriptLoaded (ScriptInstance aScript)
     {
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
@@ -83,8 +82,6 @@
         temp.put("&join",  new join());
         temp.put("&matches", new getMatches());
         temp.put("&replace", new rreplace());
-
-        return true;
     }
 
     private static class isMatch implements Predicate, Function

Modified: sleep/src/sleep/bridges/TimeDateBridge.java
===================================================================
--- sleep/src/sleep/bridges/TimeDateBridge.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/bridges/TimeDateBridge.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -10,19 +10,16 @@
 
 public class TimeDateBridge implements Loadable
 {
-   public boolean scriptLoaded(ScriptInstance script)
+   public void scriptLoaded(ScriptInstance script)
    {
       // time date functions 
       script.getScriptEnvironment().getEnvironment().put("&ticks",          new ticks());
       script.getScriptEnvironment().getEnvironment().put("&formatDate",     new formatDate());
       script.getScriptEnvironment().getEnvironment().put("&parseDate",      new parseDate());
-
-      return true;
    }
 
-   public boolean scriptUnloaded(ScriptInstance script)
+   public void scriptUnloaded(ScriptInstance script)
    {
-      return true;
    }
 
    private static class formatDate implements Function

Modified: sleep/src/sleep/console/ConsoleImplementation.java
===================================================================
--- sleep/src/sleep/console/ConsoleImplementation.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/console/ConsoleImplementation.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -556,19 +556,17 @@
       getProxy().consolePrintln(warning.toString());
    }     
 
-   public boolean scriptLoaded(ScriptInstance script)
+   public void scriptLoaded(ScriptInstance script)
    {
       if (! script.getName().equals("<interact mode>") && !interact)
          getProxy().consolePrintln(script.getName() + " loaded successfully.");
 
       script.addWarningWatcher(this);
       script.setScriptVariables(new ScriptVariables(sharedVariables));
-      return true;
    }
 
-   public boolean scriptUnloaded(ScriptInstance script)
+   public void scriptUnloaded(ScriptInstance script)
    {
       getProxy().consolePrintln(script.getName() + " has been unloaded");
-      return true;
    }
 }

Modified: sleep/src/sleep/interfaces/Loadable.java
===================================================================
--- sleep/src/sleep/interfaces/Loadable.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/src/sleep/interfaces/Loadable.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -36,16 +36,15 @@
  * <pre>
  * public class MyBridge implements Loadable
  * {
- *    public boolean scriptLoaded(ScriptInstance script)
+ *    public void scriptLoaded(ScriptInstance script)
  *    {
  *       Hashtable environment = script.getScriptEnvironment().getEnvironment();
  *       environment.put("&function",  new MyFunction());
  *       environment.put("-predicate", new MyPredicate());
  *    }
  * 
- *    public boolean scriptUnloaded(ScriptInstance script)
+ *    public void scriptUnloaded(ScriptInstance script)
  *    {
- *       return true;
  *    }
  * 
  *    private static class MyFunction implements Function
@@ -82,8 +81,8 @@
 public interface Loadable
 {
     /** called when a script is loaded */
-    public boolean scriptLoaded (ScriptInstance script);
+    public void scriptLoaded (ScriptInstance script);
 
     /** called when a script is unloaded */
-    public boolean scriptUnloaded (ScriptInstance script);
+    public void scriptUnloaded (ScriptInstance script);
 }

Modified: sleep/tests/data/src/org/hick/tests/TestLoadable.java
===================================================================
--- sleep/tests/data/src/org/hick/tests/TestLoadable.java	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/data/src/org/hick/tests/TestLoadable.java	2008-04-18 18:13:15 UTC (rev 340)
@@ -5,14 +5,12 @@
 
 public class TestLoadable implements Loadable
 {
-   public boolean scriptLoaded(ScriptInstance si)
+   public void scriptLoaded(ScriptInstance si)
    {
       si.getScriptEnvironment().getEnvironment().put("&foo", new FooFunction());
-      return true;
    }
 
-   public boolean scriptUnloaded(ScriptInstance si)
+   public void scriptUnloaded(ScriptInstance si)
    {
-      return true;
    }
 }

Modified: sleep/tests/data/test.jar
===================================================================
(Binary files differ)

Modified: sleep/tests/forkdl.sl
===================================================================
--- sleep/tests/forkdl.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/forkdl.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -14,5 +14,5 @@
 writeb($sumfork, readb(openf("data/test.jar"), lof("data/test.jar")));
 closef($sumfork);
 
-println("Checksum of written data is: " . wait($sumfork));
+println("Checksum of written data is: " . formatNumber(wait($sumfork), 10, 16));
 

Modified: sleep/tests/impfrom4.sl
===================================================================
--- sleep/tests/impfrom4.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/impfrom4.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -13,6 +13,6 @@
 }
 
 $ld = [new TestLoadable];
-println("Test? " . [$ld scriptUnloaded: $null]);
+[$ld scriptUnloaded];
 
 

Modified: sleep/tests/output/byteconvert.sl
===================================================================
--- sleep/tests/output/byteconvert.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/byteconvert.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -1,4 +1,4 @@
 Warning: variable '$data' not declared at byteconvert.sl:9
 Warning: variable '$summer' not declared at byteconvert.sl:11
 Warning: variable '$bytes' not declared at byteconvert.sl:15
-The MD5 value of test.jar is: 052168a92bfc545941d9352b35288ac3
+The MD5 value of test.jar is: 395eb428fd8a80655a29c751f272bd37

Modified: sleep/tests/output/byteconvert2.sl
===================================================================
--- sleep/tests/output/byteconvert2.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/byteconvert2.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -1,4 +1,4 @@
 Warning: variable '$data' not declared at byteconvert2.sl:9
 Warning: variable '$summer' not declared at byteconvert2.sl:11
 Warning: variable '$bytes' not declared at byteconvert2.sl:14
-The MD5 value of test.jar is: 052168a92bfc545941d9352b35288ac3
+The MD5 value of test.jar is: 395eb428fd8a80655a29c751f272bd37

Modified: sleep/tests/output/checksum.sl
===================================================================
--- sleep/tests/output/checksum.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/checksum.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -1,3 +1,3 @@
-(1) Checksum value of test.jar is: 453947233 good? yes
-(2) Checksum value of test.jar is: 453947233 good? yes
-Checksum of written data is: 453947233
+(1) Checksum value of test.jar is: 2203902212 good? no
+(2) Checksum value of test.jar is: 2203902212 good? no
+Checksum of written data is: 2203902212

Modified: sleep/tests/output/digest.sl
===================================================================
--- sleep/tests/output/digest.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/digest.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -1,4 +1,4 @@
-(1) Digest value of test.jar is: 052168a92bfc545941d9352b35288ac3 good? yes
+(1) Digest value of test.jar is: 395eb428fd8a80655a29c751f272bd37 good? no
 (2) Another test of repacked data: good
-(3) Digest value of test.jar is: 052168a92bfc545941d9352b35288ac3 good? yes
-Digest of written data is: 052168a92bfc545941d9352b35288ac3
+(3) Digest value of test.jar is: 395eb428fd8a80655a29c751f272bd37 good? no
+Digest of written data is: 395eb428fd8a80655a29c751f272bd37

Modified: sleep/tests/output/forkdl.sl
===================================================================
--- sleep/tests/output/forkdl.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/forkdl.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -1 +1 @@
-Checksum of written data is: 453947233
+Checksum of written data is: 835ce104

Modified: sleep/tests/output/impfrom4.sl
===================================================================
--- sleep/tests/output/impfrom4.sl	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/tests/output/impfrom4.sl	2008-04-18 18:13:15 UTC (rev 340)
@@ -8,4 +8,4 @@
 Test: 41
 Test: 42
 Test: 43
-Test? 1
+Warning: no field/method named scriptUnloaded in class org.hick.tests.TestLoadable at impfrom4.sl:16

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-17 15:59:43 UTC (rev 339)
+++ sleep/whatsnew.txt	2008-04-18 18:13:15 UTC (rev 340)
@@ -2,6 +2,9 @@
 ===========
 - removed a Java 1.5 API call in CodeGenerator (thanks to 
   Ralph Becker for catching this one).
+- API CHANGE: Loadable interface methods now have a return 
+  type of void instead of boolean.  This is an API wart I
+  couldn't live with any longer.  
 
 2.1-beta 22  (17 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Sat Apr 19 00:19:25 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 19 Apr 2008 00:19:25 +0200
Subject: [Sleep-svn] r341 - in sleep: . src/sleep/console
	src/sleep/engine/types tests tests/output
Message-ID: <200804182219.m3IMJPvp031470@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-19 00:19:24 +0200 (Sat, 19 Apr 2008)
New Revision: 341

Added:
   sleep/tests/memoize.sl
   sleep/tests/output/memoize.sl
Modified:
   sleep/src/sleep/console/TextConsole.java
   sleep/src/sleep/engine/types/OrderedHashContainer.java
   sleep/tests/output/cast.sl
   sleep/tests/output/trace.sl
   sleep/whatsnew.txt
Log:
more crap. :)


Modified: sleep/src/sleep/console/TextConsole.java
===================================================================
--- sleep/src/sleep/console/TextConsole.java	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/src/sleep/console/TextConsole.java	2008-04-18 22:19:24 UTC (rev 341)
@@ -24,54 +24,70 @@
          boolean ast   = false;
          boolean eval  = false;
          boolean expr  = false;
+         boolean prof  = false;
+         boolean time  = false;
          int     start = 0;
 
-         if (args[0].equals("-version") || args[0].equals("--version") || args[0].equals("-v"))
+         while (start < args.length && (args[start].startsWith("--") || (args[start].length() >= 2 && args[start].charAt(0) == '-')))
          {
-             System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
-             return;
-         } 
-         else if (args[0].equals("-help") || args[0].equals("--help") || args[0].equals("-h"))
-         {
-             System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
-             System.out.println("Usage: java [properties] -jar sleep.jar [options] [-|file|expression]");
-             System.out.println("       properties:");
-             System.out.println("         -Dsleep.assert=<true|false>");
-             System.out.println("         -Dsleep.classpath=<path to locate 3rd party jars from>");
-             System.out.println("         -Dsleep.debug=<debug level>");
-             System.out.println("       options:");
-             System.out.println("         -a --ast       display the abstract syntax tree of the specified script");
-             System.out.println("         -c --check     check the syntax of the specified file");
-             System.out.println("         -e --eval      evaluate a script as specified on command line");
-             System.out.println("         -h --help      display this help message");
-             System.out.println("         -v --version   display version information");
-             System.out.println("         -x --expr      evaluate an expression as specified on the command line");
-             System.out.println("       file:");
-             System.out.println("         specify a '-' to read script from STDIN");
-             return;
-         }
-         else if (args[0].equals("--check") || args[0].equals("-c"))
-         {
-             start = 1;
-             check = true;
-         }
-         else if (args[0].equals("--ast") || args[0].equals("-a"))
-         {
-             start = 1;
-             ast   = true;
-         }
+            if (args[start].equals("-version") || args[start].equals("--version") || args[start].equals("-v"))
+            {
+                System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
+                return;
+            } 
+            else if (args[start].equals("-help") || args[start].equals("--help") || args[start].equals("-h"))
+            {
+                System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
+                System.out.println("Usage: java [properties] -jar sleep.jar [options] [-|file|expression]");
+                System.out.println("       properties:");
+                System.out.println("         -Dsleep.assert=<true|false>");
+                System.out.println("         -Dsleep.classpath=<path to locate 3rd party jars from>");
+                System.out.println("         -Dsleep.debug=<debug level>");
+                System.out.println("       options:");
+                System.out.println("         -a --ast       display the abstract syntax tree of the specified script");
+                System.out.println("         -c --check     check the syntax of the specified file");
+                System.out.println("         -e --eval      evaluate a script as specified on command line");
+                System.out.println("         -h --help      display this help message");
+                System.out.println("         -p --profile   collect and display runtime profile statistics");
+                System.out.println("         -t --time      display total script runtime");
+                System.out.println("         -v --version   display version information");
+                System.out.println("         -x --expr      evaluate an expression as specified on the command line");
+                System.out.println("       file:");
+                System.out.println("         specify a '-' to read script from STDIN");
+                return;
+             }
+             else if (args[start].equals("--check") || args[start].equals("-c"))
+             {
+                check = true;
+             }
+             else if (args[start].equals("--ast") || args[start].equals("-a"))
+             {
+                ast   = true;
+             }
+             else if (args[start].equals("--profile") || args[start].equals("-p"))
+             {
+                prof  = true;
+             }
+             else if (args[start].equals("--time") || args[start].equals("-t"))
+             {
+                time  = true;
+             }
+             else if (args[start].equals("--eval") || args[start].equals("-e"))
+             {
+                eval  = true;
+             }
+             else if (args[start].equals("--expr") || args[start].equals("-x"))
+             {
+                expr  = true;
+             }
+             else
+             {
+                System.err.println("Unknown argument: " + args[start]);
+                return;
+             }
 
-         if (args[start].equals("--eval") || args[start].equals("-e"))
-         {
              start++;
-             eval  = true;
          }
-         else if (args[start].equals("--expr") || args[start].equals("-x"))
-         {
-             start++;
-             expr  = true;
-         }
-         
          //
          // put all of our command line arguments into an array scalar
          //
@@ -110,6 +126,11 @@
             {
                script.setDebugFlags(Integer.parseInt(System.getProperty("sleep.debug")));
             }
+          
+            if (prof)
+            {
+               script.setDebugFlags(script.getDebugFlags() | 24);
+            }
 
             if (check)
             {
@@ -121,7 +142,20 @@
             } 
             else
             {
+               long beganAt = System.currentTimeMillis();
+
                script.runScript();                                     // run the script...
+
+               if (prof)
+               {
+                  script.printProfileStatistics(System.out);
+               }
+
+               if (time)
+               {
+                   long difference = System.currentTimeMillis() - beganAt;
+                   System.out.println("time: " + (difference / 1000.0) + "s");
+               }
             }
          }
          catch (YourCodeSucksException yex)

Modified: sleep/src/sleep/engine/types/OrderedHashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-04-18 22:19:24 UTC (rev 341)
@@ -113,7 +113,7 @@
          cleanup();
 
          Stack locals = new Stack();
-         locals.push(SleepUtils.getScalar(key.toString()));
+         locals.push(key);
          locals.push(SleepUtils.getHashScalar(this));
 
          value = missPolicy.callClosure("miss", null, locals);

Added: sleep/tests/memoize.sl
===================================================================
--- sleep/tests/memoize.sl	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/tests/memoize.sl	2008-04-18 22:19:24 UTC (rev 341)
@@ -0,0 +1,36 @@
+# create a memoize'd version of the specified function:
+sub memoize
+{
+   local('%cache');   
+
+   %cache = ohash();
+
+   setMissPolicy(%cache,
+      lambda({
+                println("Cacheing: $2");
+                return invoke($function, $2);
+             }, $function => function($1)));
+
+   setf($1, lambda({ return %cache[@_]; }, \%cache));
+}
+
+sub fib
+{
+   if ($1 == 0)
+   {
+      return 0L;
+   }
+   else if ($1 == 1)
+   {
+      return 1L;
+   }
+   else
+   {
+      return fib($1 - 1) + fib($1 - 2);
+   }
+}
+
+# implement memomizing rewTINEZ
+memoize('&fib');
+
+println("(Memoized) Fib no. " . fib(25L));

Modified: sleep/tests/output/cast.sl
===================================================================
--- sleep/tests/output/cast.sl	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/tests/output/cast.sl	2008-04-18 22:19:24 UTC (rev 341)
@@ -1,2 +1,2 @@
-[Ljava.lang.CharSequence;@124746 class [Ljava.lang.CharSequence;
+[Ljava.lang.CharSequence;@6dc861 class [Ljava.lang.CharSequence;
 [Ljava.util.List;@8b8914 class [Ljava.util.List;

Added: sleep/tests/output/memoize.sl
===================================================================
--- sleep/tests/output/memoize.sl	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/tests/output/memoize.sl	2008-04-18 22:19:24 UTC (rev 341)
@@ -0,0 +1,27 @@
+Cacheing: @(25L)
+Cacheing: @(23L)
+Cacheing: @(21L)
+Cacheing: @(19L)
+Cacheing: @(17L)
+Cacheing: @(15L)
+Cacheing: @(13L)
+Cacheing: @(11L)
+Cacheing: @(9L)
+Cacheing: @(7L)
+Cacheing: @(5L)
+Cacheing: @(3L)
+Cacheing: @(1L)
+Cacheing: @(2L)
+Cacheing: @(0L)
+Cacheing: @(4L)
+Cacheing: @(6L)
+Cacheing: @(8L)
+Cacheing: @(10L)
+Cacheing: @(12L)
+Cacheing: @(14L)
+Cacheing: @(16L)
+Cacheing: @(18L)
+Cacheing: @(20L)
+Cacheing: @(22L)
+Cacheing: @(24L)
+(Memoized) Fib no. 75025

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/tests/output/trace.sl	2008-04-18 22:19:24 UTC (rev 341)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at 716cb7 println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 648016 println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at 716cb7 println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 648016 println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at 716cb7 println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 648016 println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-18 18:13:15 UTC (rev 340)
+++ sleep/whatsnew.txt	2008-04-18 22:19:24 UTC (rev 341)
@@ -5,6 +5,14 @@
 - API CHANGE: Loadable interface methods now have a return 
   type of void instead of boolean.  This is an API wart I
   couldn't live with any longer.  
+- added command line option -p/--profile to collect and print
+  profiler statistics for the specified script.  
+- added command line option -t/--time to print out the total
+  running time of the specified script
+- ordered hash miss policy now receives the passed in key
+  as-is prior to the string conversion.
+- Sleep now parses command line arguments in a more flexible
+  manner allowing different orders/combinations of switches.
 
 2.1-beta 22  (17 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Sat Apr 19 02:32:52 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 19 Apr 2008 02:32:52 +0200
Subject: [Sleep-svn] r342 - in sleep: . src/sleep/parser
Message-ID: <200804190032.m3J0WqfN030689@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-19 02:32:49 +0200 (Sat, 19 Apr 2008)
New Revision: 342

Modified:
   sleep/src/sleep/parser/ParserConfig.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/parser/ParserConfig.java
===================================================================
--- sleep/src/sleep/parser/ParserConfig.java	2008-04-18 22:19:24 UTC (rev 341)
+++ sleep/src/sleep/parser/ParserConfig.java	2008-04-19 00:32:49 UTC (rev 342)
@@ -63,7 +63,7 @@
 
        if (cp.exists()) { return cp; }
 
-       String[] paths = System.getProperty("sleep.classpath", ".").split(";");
+       String[] paths = System.getProperty("sleep.classpath", ".").replace(':', ';').split(";");
 
        for (int x = 0; x < paths.length; x++)
        {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-18 22:19:24 UTC (rev 341)
+++ sleep/whatsnew.txt	2008-04-19 00:32:49 UTC (rev 342)
@@ -13,6 +13,8 @@
   as-is prior to the string conversion.
 - Sleep now parses command line arguments in a more flexible
   manner allowing different orders/combinations of switches.
+- sleep.classpath value accepts either a ; or : as the path
+  separator.
 
 2.1-beta 22  (17 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Mon Apr 21 02:14:25 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 21 Apr 2008 02:14:25 +0200
Subject: [Sleep-svn] r343 - in sleep: . src/sleep/bridges
Message-ID: <200804210014.m3L0EPr9013572@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-21 02:14:24 +0200 (Mon, 21 Apr 2008)
New Revision: 343

Modified:
   sleep/src/sleep/bridges/BasicNumbers.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/bridges/BasicNumbers.java
===================================================================
--- sleep/src/sleep/bridges/BasicNumbers.java	2008-04-19 00:32:49 UTC (rev 342)
+++ sleep/src/sleep/bridges/BasicNumbers.java	2008-04-21 00:14:24 UTC (rev 343)
@@ -185,15 +185,15 @@
        else if (name.equals("&srand"))
        {
           long seed = BridgeUtilities.getLong(args);
-          si.getScriptEnvironment().getEnvironment().put("%RANDOM%", new Random(seed));
+          si.getMetadata().put("__RANDOM__", new Random(seed));
        }
        else if (name.equals("&rand"))
        {
-          if (si.getScriptEnvironment().getEnvironment().get("%RANDOM%") == null) 
+          if (si.getMetadata().get("__RANDOM__") == null) 
           { 
-             si.getScriptEnvironment().getEnvironment().put("%RANDOM%", new Random()); 
+             si.getMetadata().put("__RANDOM__", new Random()); 
           }
-          Random r = (Random)si.getScriptEnvironment().getEnvironment().get("%RANDOM%");
+          Random r = (Random)si.getMetadata().get("__RANDOM__");
 
           if (! args.isEmpty())
           {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-19 00:32:49 UTC (rev 342)
+++ sleep/whatsnew.txt	2008-04-21 00:14:24 UTC (rev 343)
@@ -15,6 +15,8 @@
   manner allowing different orders/combinations of switches.
 - sleep.classpath value accepts either a ; or : as the path
   separator.
+- moved the %RANDOM% object to the ScriptInstance metadata 
+  with key __RANDOM__ (used to store random number seed)
 
 2.1-beta 22  (17 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Wed Apr 23 07:50:45 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 23 Apr 2008 07:50:45 +0200
Subject: [Sleep-svn] r344 - in sleep: . src/sleep/engine/types
	src/sleep/runtime tests tests/output
Message-ID: <200804230550.m3N5ojDw011541@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-23 07:50:44 +0200 (Wed, 23 Apr 2008)
New Revision: 344

Added:
   sleep/tests/arrayself.sl
   sleep/tests/callccpcon.sl
   sleep/tests/fescope.sl
   sleep/tests/hashself.sl
   sleep/tests/output/arrayself.sl
   sleep/tests/output/callccpcon.sl
   sleep/tests/output/fescope.sl
   sleep/tests/output/hashself.sl
Modified:
   sleep/readme.txt
   sleep/src/sleep/engine/types/HashContainer.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
Sleep 2.1-b23



Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/readme.txt	2008-04-23 05:50:44 UTC (rev 344)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 22 - README   
+Sleep - 2.1 beta 23 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is

Modified: sleep/src/sleep/engine/types/HashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/HashContainer.java	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/src/sleep/engine/types/HashContainer.java	2008-04-23 05:50:44 UTC (rev 344)
@@ -61,6 +61,6 @@
 
    public String toString()
    {
-      return SleepUtils.describeEntries("%", values.entrySet());
+      return SleepUtils.describeEntries(this, "%", values.entrySet());
    }
 }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-23 05:50:44 UTC (rev 344)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080417;
+   public static final int    SLEEP_RELEASE = 20080423;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";
@@ -401,7 +401,7 @@
    }
 
    /** describe the entries in a Sleep hash */
-   public static String describeEntries(String sigil, Set entries)
+   public static String describeEntries(ScalarHash hash, String sigil, Set entries)
    {
       StringBuffer buffer = new StringBuffer(sigil + "(");
 
@@ -420,7 +420,14 @@
             buffer.append(next.getKey());
             buffer.append(" => ");
   
-            buffer.append(describe((Scalar)next.getValue()));
+            if (((Scalar)next.getValue()).getHash() == hash)
+            {
+               buffer.append("...");
+            } 
+            else
+            {
+               buffer.append(describe((Scalar)next.getValue()));
+            }
          }
       }
       buffer.append(")");
@@ -440,8 +447,17 @@
          while (i.hasNext())
          {
             Scalar next = (Scalar)i.next();
-            buffer.append(describe(next));
 
+
+            if (scalar.getArray() == next.getArray())
+            { 
+               buffer.append("...");
+            }
+            else
+            {
+               buffer.append(describe(next));
+            }
+
             if (i.hasNext())
             {
                buffer.append(", ");

Added: sleep/tests/arrayself.sl
===================================================================
--- sleep/tests/arrayself.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/arrayself.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,4 @@
+ at data = @("a", "b", "c", "d");
+push(@data, @data);
+
+println(@data);

Added: sleep/tests/callccpcon.sl
===================================================================
--- sleep/tests/callccpcon.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/callccpcon.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,19 @@
+$buffer  = $null;
+
+sub produce 
+{
+   for ($x = 0; $x < 3; $x++) 
+   {
+      println("Produce: $x * 3");
+      $buffer = $x * 3;
+      callcc &consume;
+   }
+}
+
+sub consume 
+{
+   println("Consume: $buffer");
+   [$1]; # resume the calling function
+}
+
+produce();

Added: sleep/tests/fescope.sl
===================================================================
--- sleep/tests/fescope.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/fescope.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,17 @@
+global('$p $v');
+
+$p = "foo";
+$v = "bar";
+
+sub foo
+{
+   local('$p $v @data');
+   @data = @("a", "b", "c", "d");
+   foreach $p => $v (@data)
+   {
+      println("$p and $v");
+   }
+}  
+
+foo();
+println("$p $v");

Added: sleep/tests/hashself.sl
===================================================================
--- sleep/tests/hashself.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/hashself.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,4 @@
+%hash = %();
+%hash["a"] = %hash;
+
+println(%hash);

Added: sleep/tests/output/arrayself.sl
===================================================================
--- sleep/tests/output/arrayself.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/output/arrayself.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1 @@
+@('a', 'b', 'c', 'd', ...)

Added: sleep/tests/output/callccpcon.sl
===================================================================
--- sleep/tests/output/callccpcon.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/output/callccpcon.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,6 @@
+Produce: 0 * 3
+Consume: 0
+Produce: 1 * 3
+Consume: 3
+Produce: 2 * 3
+Consume: 6

Added: sleep/tests/output/fescope.sl
===================================================================
--- sleep/tests/output/fescope.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/output/fescope.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1,5 @@
+0 and a
+1 and b
+2 and c
+3 and d
+foo bar

Added: sleep/tests/output/hashself.sl
===================================================================
--- sleep/tests/output/hashself.sl	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/tests/output/hashself.sl	2008-04-23 05:50:44 UTC (rev 344)
@@ -0,0 +1 @@
+%(a => ...)

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-21 00:14:24 UTC (rev 343)
+++ sleep/whatsnew.txt	2008-04-23 05:50:44 UTC (rev 344)
@@ -1,4 +1,4 @@
-2.1-beta 23
+2.1-beta 23  (23 Apr 08)
 ===========
 - removed a Java 1.5 API call in CodeGenerator (thanks to 
   Ralph Becker for catching this one).
@@ -17,6 +17,10 @@
   separator.
 - moved the %RANDOM% object to the ScriptInstance metadata 
   with key __RANDOM__ (used to store random number seed)
+- SleepUtils.describe(...) makes some attempt to detect
+  cycles (i.e. data structures that reference themselves)
+  when printing out the data.  An ellipse is used to indicate
+  the data structure references itself.
 
 2.1-beta 22  (17 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Fri Apr 25 19:37:04 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 25 Apr 2008 19:37:04 +0200
Subject: [Sleep-svn] r345 - in sleep/src/sleep: engine parser
Message-ID: <200804251737.m3PHb4bg015079@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-25 19:37:04 +0200 (Fri, 25 Apr 2008)
New Revision: 345

Modified:
   sleep/src/sleep/engine/GeneratedSteps.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/src/sleep/parser/Parser.java
Log:
refactored parser pipeline to use factory pattern for generating steps.



Modified: sleep/src/sleep/engine/GeneratedSteps.java
===================================================================
--- sleep/src/sleep/engine/GeneratedSteps.java	2008-04-23 05:50:44 UTC (rev 344)
+++ sleep/src/sleep/engine/GeneratedSteps.java	2008-04-25 17:37:04 UTC (rev 345)
@@ -1,21 +1,3 @@
-/** 
-   SLEEP - Simple Language for Environment Extension Purposes
- .-----------------------------.
- | sleep.engine.GeneratedSteps |______________________________________________
- |                                                                            |
-   Author: Raphael Mudge (rsmudge at mtu.edu)
-           http://www.csl.mtu.edu/~rsmudge/
- 
-   Description: A class providing methods for constructing an instance of each
-     of the sleep atomic steps. :)
- 
-   Documentation: 
-
-   Changelog:
- 
- |____________________________________________________________________________|
-*/
-
 package sleep.engine;
 
 import java.util.*;
@@ -25,61 +7,61 @@
 
 import java.io.Serializable;
 
-/** A class providing static methods for constructing an atomic step of a specific type */
+/** A class providing methods for constructing an atomic step of a specific type.  Feel free to extend this class and specify your own factory to the CodeGenerator class. */
 public class GeneratedSteps
 {
-    public static Step PopTry()
+    public Step PopTry()
     {
        Step temp = new PopTry();
        return temp;
     }
  
-    public static Step Try(Block owner, Block handler, String var)
+    public Step Try(Block owner, Block handler, String var)
     {
        Step temp = new Try(owner, handler, var);
        return temp;
     }
 
-    public static Step Operate(String oper)
+    public Step Operate(String oper)
     {
        Step temp = new Operate(oper);
        return temp;
     }
 
-    public static Step Return(int type)
+    public Step Return(int type)
     {
        Step temp = new Return(type);
        return temp;
     }
 
-    public static Step SValue(Scalar value)
+    public Step SValue(Scalar value)
     {
        Step temp = new SValue(value);
        return temp;
     }
 
-    public static Step IteratorCreate(String key, String value)
+    public Step IteratorCreate(String key, String value)
     {
        return new Iterate(key, value, Iterate.ITERATOR_CREATE);
     }
 
-    public static Step IteratorNext()
+    public Step IteratorNext()
     {
        return new Iterate(null, null, Iterate.ITERATOR_NEXT);
     }
 
-    public static Step IteratorDestroy()
+    public Step IteratorDestroy()
     {
        return new Iterate(null, null, Iterate.ITERATOR_DESTROY);
     }
 
-    public static Check Check(String nameOfOperator, Block setupOperands)
+    public  Check Check(String nameOfOperator, Block setupOperands)
     {
        Check temp = new Check(nameOfOperator, setupOperands);
        return temp;
     }
 
-    public static Step Goto(Check conditionForGoto, Block ifTrue, Block increment)
+    public Step Goto(Check conditionForGoto, Block ifTrue, Block increment)
     {
        Goto temp = new Goto(conditionForGoto);
        temp.setChoices(ifTrue);
@@ -87,104 +69,104 @@
        return temp;
     }
 
-    public static Step Decide(Check conditionForGoto, Block ifTrue, Block ifFalse)
+    public Step Decide(Check conditionForGoto, Block ifTrue, Block ifFalse)
     {
        Decide temp = new Decide(conditionForGoto);
        temp.setChoices(ifTrue, ifFalse);
        return temp;
     }
  
-    public static Step PLiteral(String evaluator)
+    public Step PLiteral(String evaluator)
     {
        Step temp = new PLiteral(evaluator);
        return temp;
     }
 
-    public static Step Assign(Block variable)
+    public Step Assign(Block variable)
     {
        Step temp = new Assign(variable);
        return temp;
     }
 
-    public static Step AssignAndOperate(Block variable, String operator)
+    public Step AssignAndOperate(Block variable, String operator)
     {
-       Step temp = new Assign(variable, new Operate(operator));
+       Step temp = new Assign(variable, this.Operate(operator));
        return temp;
     }
 
-    public static Step AssignT()
+    public Step AssignT()
     {
        Step temp = new AssignT();
        return temp;
     }
 
-    public static Step AssignTupleAndOperate(String operator)
+    public Step AssignTupleAndOperate(String operator)
     {
-       Step temp = new AssignT(new Operate(operator));
+       Step temp = new AssignT(this.Operate(operator));
        return temp;
     }
 
-    public static Step CreateFrame()
+    public Step CreateFrame()
     {
        Step temp = new CreateFrame();
        return temp;
     }
 
-    public static Step Get(String value)
+    public Step Get(String value)
     {
        Step temp = new Get(value);
        return temp;
     }
 
-    public static Step Index(String value, Block index)
+    public Step Index(String value, Block index)
     {
        Step temp = new Index(value, index);
        return temp;
     }
 
-    public static Step Call(String function)
+    public Step Call(String function)
     {
        Step temp = new Call(function);
        return temp;
     }
 
-    public static Step CreateClosure(Block code)
+    public Step CreateClosure(Block code)
     {
        Step temp = new CreateClosure(code);
        return temp;
     }
 
-    public static Step Bind(String functionEnvironment, Block name, Block code)
+    public Step Bind(String functionEnvironment, Block name, Block code)
     {
        Step temp = new Bind(functionEnvironment, name, code);
        return temp;
     }
 
-    public static Step BindPredicate(String functionEnvironment, Check predicate, Block code)
+    public Step BindPredicate(String functionEnvironment, Check predicate, Block code)
     {
        Step temp = new BindPredicate(functionEnvironment, predicate, code);
        return temp;
     }
 
-    public static Step BindFilter(String functionEnvironment, String name, Block code, String filter)
+    public Step BindFilter(String functionEnvironment, String name, Block code, String filter)
     {
        Step temp = new BindFilter(functionEnvironment, name, code, filter);
        return temp;
     }
 
-    public static Step ObjectNew(Class name)
+    public Step ObjectNew(Class name)
     {
        Step temp = new ObjectNew(name);
        return temp;
     }
 
-    public static Step ObjectAccess(String name)
+    public Step ObjectAccess(String name)
     {
        Step temp = new ObjectAccess(name, null);
        return temp;
     }
 
-    public static Step ObjectAccessStatic(Class aClass, String name)
+    public Step ObjectAccessStatic(Class aClass, String name)
     {
        Step temp = new ObjectAccess(name, aClass);
        return temp;

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-04-23 05:50:44 UTC (rev 344)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-04-25 17:37:04 UTC (rev 345)
@@ -55,7 +55,8 @@
    protected Block CURRENT_BLOCK;
    protected Stack BACKUP_BLOCKS;
 
-   protected Parser parser;
+   protected GeneratedSteps factory; /* allow specification of a factory for generating steps */
+   protected Parser         parser;
 
    protected static HashMap escape_constants = new HashMap();
 
@@ -96,14 +97,20 @@
       return temp;
    }
 
-   public CodeGenerator(Parser _parser)
+   public CodeGenerator(Parser _parser, GeneratedSteps _factory)
    {
       parser = _parser;
+      factory = _factory != null ? _factory : new GeneratedSteps();
 
       CURRENT_BLOCK = new Block(parser.getName());
       BACKUP_BLOCKS = new Stack();
    }
 
+   public CodeGenerator(Parser _parser)
+   {
+       this(_parser, null);
+   }
+
    public Check parsePredicate(Token data)
    {
        /** send the data string through the parser pipeline - errors earlier in the pipeline are assumed to not exist as they would have been found the first time we processed it as a block */
@@ -142,7 +149,7 @@
            parseIdea(tokens[0]);
            parseIdea(tokens[2]);
 
-           tempc = GeneratedSteps.Check(strings[1], restore()); // a KillFrame is implied here
+           tempc = factory.Check(strings[1], restore()); // a KillFrame is implied here
            tempc.setInfo(tokens[1].getHint());
 
            return tempc;
@@ -151,7 +158,7 @@
 
            parseIdea(tokens[1]);
              
-           tempc = GeneratedSteps.Check(strings[0], restore());
+           tempc = factory.Check(strings[0], restore());
            tempc.setInfo(tokens[0].getHint());
 
            return tempc;
@@ -232,7 +239,7 @@
        switch (datum.getType())
        {
          case OBJECT_NEW:
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (tokens.length > 1)
@@ -245,11 +252,11 @@
            if (aClass == null)
               parser.reportError("Class " + strings[0] + " was not found", tokens[0]);
 
-           atom    = GeneratedSteps.ObjectNew(aClass);
+           atom    = factory.ObjectNew(aClass);
            add(atom, tokens[0]);
            break;
         case OBJECT_CL_CALL: 
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (tokens.length > 1)
@@ -259,11 +266,11 @@
 
            parseIdea(tokens[0]);
 
-           atom    = GeneratedSteps.ObjectAccess(null);
+           atom    = factory.ObjectAccess(null);
            add(atom, tokens[0]);
            break;
         case OBJECT_ACCESS:
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (tokens.length > 2)
@@ -273,11 +280,11 @@
 
            parseIdea(tokens[0]);
 
-           atom    = GeneratedSteps.ObjectAccess(strings[1]);
+           atom    = factory.ObjectAccess(strings[1]);
            add(atom, tokens[0]);
            break;
          case OBJECT_ACCESS_S:
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (tokens.length > 2)
@@ -290,7 +297,7 @@
            if (aClass == null)
               parser.reportError("Class " + strings[0] + " was not found", tokens[0]);
            
-           atom = GeneratedSteps.ObjectAccessStatic(aClass, strings[1]);
+           atom = factory.ObjectAccessStatic(aClass, strings[1]);
            add(atom, tokens[0]);
            break;
        }
@@ -353,24 +360,24 @@
        switch (datum.getType())
        {
          case VALUE_SCALAR_REFERENCE:
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
-           atom = GeneratedSteps.Get(strings[0].substring(1)); /* generate rhs with scalar value */
+           atom = factory.Get(strings[0].substring(1)); /* generate rhs with scalar value */
            add(atom, tokens[0]);
 
            ascalar = SleepUtils.getScalar(strings[0].substring(1)); /* generate lhs string scalar with var name */
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
 
-           atom = GeneratedSteps.Operate("=>");
+           atom = factory.Operate("=>");
            add(atom, tokens[0]);
            break;
          case IDEA_HASH_PAIR:
            //
            // parsing A => B
            //
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[2]);
 
            //
@@ -382,20 +389,20 @@
            // parse A - or just push it onto the stack as a literal token :)
            //
            ascalar = SleepUtils.getScalar(strings[0]);
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
 
            //
            // parse operator
            //
-           atom = GeneratedSteps.Operate(strings[1]);
+           atom = factory.Operate(strings[1]);
            add(atom, tokens[1]);
            break;
          case IDEA_OPER:
            //
            // parsing A operator B
            //
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[2]);
 
            //
@@ -411,7 +418,7 @@
            //
            // parse operator
            //
-           atom = GeneratedSteps.Operate(strings[1]);
+           atom = factory.Operate(strings[1]);
            add(atom, tokens[1]);
            break;
          case IDEA_EXPR_I:
@@ -434,7 +441,7 @@
            }
 
            ascalar = SleepUtils.getScalar(sb.toString());
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
            break;
          case IDEA_NUMBER:                         // implemented
@@ -447,17 +454,17 @@
               ascalar = SleepUtils.getScalar(Integer.decode(strings[0]).intValue());
            }
 
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
            break;
          case IDEA_DOUBLE:                         // implemented
            ascalar = SleepUtils.getScalar(Double.parseDouble(strings[0]));
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
            break;
          case IDEA_BOOLEAN:                         // implemented
            ascalar = SleepUtils.getScalar(Boolean.valueOf(strings[0]).booleanValue());
-           atom    = GeneratedSteps.SValue(ascalar);
+           atom    = factory.SValue(ascalar);
            add(atom, tokens[0]);
            break;
          case IDEA_CLASS:
@@ -470,7 +477,7 @@
            else
            {          
               ascalar = SleepUtils.getScalar(parser.findImportedClass(strings[0].substring(1)));
-              atom    = GeneratedSteps.SValue(ascalar);
+              atom    = factory.SValue(ascalar);
               add(atom, tokens[0]);
            }
            break;
@@ -478,12 +485,12 @@
            if (strings[0].equals("$null"))
            {
               ascalar = SleepUtils.getEmptyScalar();
-              atom    = GeneratedSteps.SValue(ascalar);
+              atom    = factory.SValue(ascalar);
               add(atom, tokens[0]);
            }
            else
            {
-              atom = GeneratedSteps.Get(strings[0]);
+              atom = factory.Get(strings[0]);
               add(atom, tokens[0]);
            }
            break;
@@ -494,11 +501,11 @@
            {         
               backup();
 
-              atom = GeneratedSteps.CreateFrame();
+              atom = factory.CreateFrame();
               add(atom, tokens[0]);
               parseIdea(ParserUtilities.extract(tokens[z]));
 
-              atom = GeneratedSteps.Index(strings[0], restore());
+              atom = factory.Index(strings[0], restore());
               add(atom, tokens[0]);
            }
            break;
@@ -514,7 +521,7 @@
            StringBuffer d = new StringBuffer(); // the string buffer where we will dump our results.
 
            PLiteral  machine;
-           machine = (PLiteral)(datum.getType() == EXPR_EVAL_STRING ? GeneratedSteps.PLiteral("%BACKQUOTE%") : GeneratedSteps.PLiteral(null));
+           machine = (PLiteral)(datum.getType() == EXPR_EVAL_STRING ? factory.PLiteral("%BACKQUOTE%") : factory.PLiteral(null));
  
            StringIterator si = new StringIterator(ParserUtilities.extract(strings[0]), tokens[0].getHint());
    
@@ -688,7 +695,7 @@
            //
            backup();
            parseBlock(tokens[2]);
-           atom = GeneratedSteps.BindPredicate(strings[0], parsePredicate(ParserUtilities.extract(tokens[1])), restore());
+           atom = factory.BindPredicate(strings[0], parsePredicate(ParserUtilities.extract(tokens[1])), restore());
            add(atom, tokens[0]);
            break; 
          case EXPR_BIND_FILTER:
@@ -700,7 +707,7 @@
            parseBlock(tokens[3]);
            b = restore();
 
-           atom = GeneratedSteps.BindFilter(strings[0], strings[1], b, strings[2]);
+           atom = factory.BindFilter(strings[0], strings[1], b, strings[2]);
            add(atom, tokens[0]);
            break; 
          case EXPR_BIND: // implemented
@@ -722,7 +729,7 @@
  
            backup();
            parseBlock(tokens[2]);
-           atom = GeneratedSteps.Bind(strings[0], nameBlock, restore());
+           atom = factory.Bind(strings[0], nameBlock, restore());
            add(atom, tokens[0]);
            break; 
          case EXPR_TRYCATCH: 
@@ -737,7 +744,7 @@
            parseBlock(ParserUtilities.extract(tokens[1]));
 
               /* pop the handler */
-           atom = GeneratedSteps.PopTry();
+           atom = factory.PopTry();
            add(atom, tokens[4]);
 
            a = restore();
@@ -746,7 +753,7 @@
            backup();
 
               /* pop the handler [ensure this happens first thing in our handler block] */
-           atom = GeneratedSteps.PopTry();
+           atom = factory.PopTry();
            add(atom, tokens[4]);
 
               /* parse the handler */
@@ -755,7 +762,7 @@
            b = restore();
 
            // add this try/catch bits to the current block
-           atom = GeneratedSteps.Try(a, b, strings[3]);
+           atom = factory.Try(a, b, strings[3]);
            add(atom, tokens[0]);
            break;
          case EXPR_BLOCK:  // implemented
@@ -766,7 +773,7 @@
 
            parseBlock(ParserUtilities.extract(tokens[0]));
 
-           atom    = GeneratedSteps.CreateClosure(restore());
+           atom    = factory.CreateClosure(restore());
            add(atom, tokens[0]);
            break;
          case IDEA_FUNC: // implemented 
@@ -807,38 +814,38 @@
               }
               b = restore();
 
-              atom = GeneratedSteps.Decide(parsePredicate(termsAr[0]), a, b);
+              atom = factory.Decide(parsePredicate(termsAr[0]), a, b);
               add(atom, tokens[0]); 
            }
            else if (tokens.length > 1)
            {
-              atom = GeneratedSteps.CreateFrame();
+              atom = factory.CreateFrame();
               add(atom, tokens[0]);
 
               /* if we're dealing with the warn function, sneak the current line number in as an argument. */
               if (strings[0].equals("&warn"))
               {
-                 atom    = GeneratedSteps.SValue(SleepUtils.getScalar(tokens[0].getHint()));
+                 atom    = factory.SValue(SleepUtils.getScalar(tokens[0].getHint()));
                  add(atom, tokens[0]);
               }
 
               parseParameters(ParserUtilities.extract(tokens[1]));
 
-              atom = GeneratedSteps.Call(strings[0]);
+              atom = factory.Call(strings[0]);
               add(atom, tokens[0]);
            }
            else
            {
               // retrieve a function literal... 
 
-              atom = GeneratedSteps.Get(strings[0]);
+              atom = factory.Get(strings[0]);
               add(atom, tokens[0]);
            }
            break;
          case EXPR_WHILE:                                        // done
            backup();
            parseBlock(tokens[2]);    
-           atom = GeneratedSteps.Goto(parsePredicate(ParserUtilities.extract(tokens[1])), restore(), null);
+           atom = factory.Goto(parsePredicate(ParserUtilities.extract(tokens[1])), restore(), null);
            add(atom, tokens[1]);
            break;
          case EXPR_WHILE_SPECIAL:                                        // done
@@ -859,7 +866,7 @@
            // 1 = $var
            // 2 = (expression) to assign, you know?!?
 
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[2]);
 
            parseIdea(tokens[2]);
@@ -867,27 +874,27 @@
            backup();
            parseIdea(tokens[1]);
 
-           atom = GeneratedSteps.Assign(restore());
+           atom = factory.Assign(restore());
            add(atom, tokens[2]);
 
            // end assign...
            
            // push $null onto the current frame as well...
-           add(GeneratedSteps.SValue(SleepUtils.getEmptyScalar()), tokens[2]); // for comparisons sake
+           add(factory.SValue(SleepUtils.getEmptyScalar()), tokens[2]); // for comparisons sake
 
            a = restore();
 
            // dew the lewp while the assigned value is not $null
-           tempp = GeneratedSteps.Check("!is", a);
+           tempp = factory.Check("!is", a);
            tempp.setInfo(tokens[1].getHint());
 
-           atom = GeneratedSteps.Goto(tempp, b, null);
+           atom = factory.Goto(tempp, b, null);
            add(atom, tokens[1]);
 
            break;
          case EXPR_ASSIGNMENT_T:                                  // implemented
          case EXPR_ASSIGNMENT_T_OP:
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            TokenList terms2 = ParserUtilities.groupByParameterTerm(parser, ParserUtilities.extract(tokens[0]));
@@ -902,17 +909,17 @@
 
            if (datum.getType() == EXPR_ASSIGNMENT_T_OP)
            {
-              atom = GeneratedSteps.AssignTupleAndOperate(strings[1].substring(0, strings[1].length() - 1));
+              atom = factory.AssignTupleAndOperate(strings[1].substring(0, strings[1].length() - 1));
            }
            else
            {
-              atom = GeneratedSteps.AssignT();
+              atom = factory.AssignT();
            }
            add(atom, tokens[0]);
            break;
          case EXPR_ASSIGNMENT:                                  // implemented
          case EXPR_ASSIGNMENT_OP:                                  // implemented
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[2]);
 
            parseIdea(tokens[2]);
@@ -922,11 +929,11 @@
 
            if (datum.getType() == EXPR_ASSIGNMENT_OP)
            {
-              atom = GeneratedSteps.AssignAndOperate(restore(), strings[1].substring(0, strings[1].length() - 1));
+              atom = factory.AssignAndOperate(restore(), strings[1].substring(0, strings[1].length() - 1));
            }
            else
            {
-              atom = GeneratedSteps.Assign(restore());
+              atom = factory.Assign(restore());
            }
            add(atom, tokens[2]);
            break;
@@ -955,7 +962,7 @@
            }
            b = restore();
 
-           atom = GeneratedSteps.Decide(parsePredicate(ParserUtilities.extract(tokens[1])), a, b);
+           atom = factory.Decide(parsePredicate(ParserUtilities.extract(tokens[1])), a, b);
            add(atom, tokens[1]); 
            break;
          case EXPR_FOREACH_SPECIAL:
@@ -977,18 +984,18 @@
            //
            // setup our frame with the value, possibly the key,  and the source
            //
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (datum.getType() == EXPR_FOREACH)
            {
               parseIdea(ParserUtilities.extract(tokens[2])); // parse the "source" of the foreach
-              atom = GeneratedSteps.IteratorCreate(null, strings[1]);
+              atom = factory.IteratorCreate(null, strings[1]);
            }
            else
            {
               parseIdea(ParserUtilities.extract(tokens[4])); // parse the "source" of the foreach
-              atom = GeneratedSteps.IteratorCreate(strings[1], strings[3]);
+              atom = factory.IteratorCreate(strings[1], strings[3]);
            }
            add(atom, tokens[0]);
 
@@ -1013,22 +1020,22 @@
            //
            backup();
 
-           atom = GeneratedSteps.IteratorNext();
+           atom = factory.IteratorNext();
            add(atom, tokens[0]);
              
-           tempp = GeneratedSteps.Check("-istrue", restore());
+           tempp = factory.Check("-istrue", restore());
            tempp.setInfo(tokens[0].getHint());
 
            //
            // add our looping mechanism (everyone loves this part, eh!?!)
            //
-           atom = GeneratedSteps.Goto(tempp, a, null);
+           atom = factory.Goto(tempp, a, null);
            add(atom, tokens[1]);
 
            //
            // add our mechanism for destroying the iterator...
            //
-           atom = GeneratedSteps.IteratorDestroy();
+           atom = factory.IteratorDestroy();
            add(atom, tokens[1]);
            break; 
          case EXPR_FOR:
@@ -1093,7 +1100,7 @@
            //
            // setup our goto object..
            // 
-           atom = GeneratedSteps.Goto(parsePredicate(extracted_terms[1]), b, a);
+           atom = factory.Goto(parsePredicate(extracted_terms[1]), b, a);
            add(atom, tokens[1]);
            break;
          case OBJECT_IMPORT:
@@ -1138,13 +1145,13 @@
            Token assert_terms[] = ParserUtilities.groupByMessageTerm(parser, tokens[1]).getTokens();
            
            backup();
-              atom = GeneratedSteps.CreateFrame();
+              atom = factory.CreateFrame();
               add(atom, tokens[0]);
 
               if (assert_terms.length == 1)
               {
                  ascalar = SleepUtils.getScalar("assertion failed");
-                 atom    = GeneratedSteps.SValue(ascalar);
+                 atom    = factory.SValue(ascalar);
                  add(atom, tokens[0]);
               }
               else
@@ -1152,15 +1159,15 @@
                  parseIdea(assert_terms[1]);
               }
 
-              atom = GeneratedSteps.Call("&exit");
+              atom = factory.Call("&exit");
               add(atom, tokens[0]);
            b = restore();
 
-           atom = GeneratedSteps.Decide(parsePredicate(assert_terms[0]), null, b);
+           atom = factory.Decide(parsePredicate(assert_terms[0]), null, b);
            add(atom, tokens[1]);
            break;
          case EXPR_RETURN:                     // implemented
-           atom = GeneratedSteps.CreateFrame();
+           atom = factory.CreateFrame();
            add(atom, tokens[0]);
 
            if (strings[0].equals("done"))
@@ -1182,22 +1189,22 @@
 
            if (strings[0].equals("break"))
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_BREAK);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_BREAK);
               add(atom, tokens[0]);
            }
            else if (strings[0].equals("continue"))
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_CONTINUE);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_CONTINUE);
               add(atom, tokens[0]);
            }
            else if (strings[0].equals("throw"))
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_THROW);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_THROW);
               add(atom, tokens[0]);
            }
            else if (strings[0].equals("yield"))
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_YIELD);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_YIELD);
               add(atom, tokens[0]);
 
               /* for some reason, yield breaks in certain cases if a yield happens
@@ -1206,7 +1213,7 @@
                  to combat the problem I've opted to introduce a null operation
                  after each yield, this fixes the problem.  hopefully it doesn't
                  show itself in some other way in the future.  :~( *cry* */
-//              atom = GeneratedSteps.NullOperation();
+//              atom = factory.NullOperation();
 //              add(atom, tokens[0]);
 
               /* I've modified the evaluateOldContext method of ScriptEnvironment
@@ -1220,12 +1227,12 @@
            }
            else if (strings[0].equals("callcc"))
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_CALLCC);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_CALLCC);
               add(atom, tokens[0]);
            }
            else
            {
-              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_RETURN);
+              atom = factory.Return(ScriptEnvironment.FLOW_CONTROL_RETURN);
               add(atom, tokens[0]);
            }
            break;

Modified: sleep/src/sleep/parser/Parser.java
===================================================================
--- sleep/src/sleep/parser/Parser.java	2008-04-23 05:50:44 UTC (rev 344)
+++ sleep/src/sleep/parser/Parser.java	2008-04-25 17:37:04 UTC (rev 345)
@@ -68,7 +68,7 @@
    protected LinkedList statements = new LinkedList(); /** a list of all of the statements */
 
    protected Block      executeMe;  // runnable block   
-
+ 
    public    char       EndOfTerm  = ';';
 
    protected ImportManager imports;



From rsmudge at mail.berlios.de  Fri Apr 25 20:17:31 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 25 Apr 2008 20:17:31 +0200
Subject: [Sleep-svn] r346 - sleep/src/sleep/engine/atoms
Message-ID: <200804251817.m3PIHVPu018358@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-25 20:17:31 +0200 (Fri, 25 Apr 2008)
New Revision: 346

Modified:
   sleep/src/sleep/engine/atoms/Assign.java
   sleep/src/sleep/engine/atoms/AssignT.java
Log:
..


Modified: sleep/src/sleep/engine/atoms/Assign.java
===================================================================
--- sleep/src/sleep/engine/atoms/Assign.java	2008-04-25 17:37:04 UTC (rev 345)
+++ sleep/src/sleep/engine/atoms/Assign.java	2008-04-25 18:17:31 UTC (rev 346)
@@ -30,9 +30,9 @@
 public class Assign extends Step
 {
    Block   variable = null;
-   Operate operator = null;
+   Step    operator = null;
     
-   public Assign(Block var, Operate op)
+   public Assign(Block var, Step op)
    {
       operator = op;
       variable = var;

Modified: sleep/src/sleep/engine/atoms/AssignT.java
===================================================================
--- sleep/src/sleep/engine/atoms/AssignT.java	2008-04-25 17:37:04 UTC (rev 345)
+++ sleep/src/sleep/engine/atoms/AssignT.java	2008-04-25 18:17:31 UTC (rev 346)
@@ -29,9 +29,9 @@
 
 public class AssignT extends Step
 {
-   protected Operate operator;
+   protected Step operator;
 
-   public AssignT(Operate op)
+   public AssignT(Step op)
    {
       operator = op;
    }



From rsmudge at mail.berlios.de  Fri Apr 25 21:30:32 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 25 Apr 2008 21:30:32 +0200
Subject: [Sleep-svn] r347 - in sleep/src/sleep: engine/atoms parser
Message-ID: <200804251930.m3PJUWST023219@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-25 21:30:31 +0200 (Fri, 25 Apr 2008)
New Revision: 347

Modified:
   sleep/src/sleep/engine/atoms/PLiteral.java
   sleep/src/sleep/parser/CodeGenerator.java
Log:
..


Modified: sleep/src/sleep/engine/atoms/PLiteral.java
===================================================================
--- sleep/src/sleep/engine/atoms/PLiteral.java	2008-04-25 18:17:31 UTC (rev 346)
+++ sleep/src/sleep/engine/atoms/PLiteral.java	2008-04-25 19:30:31 UTC (rev 347)
@@ -30,11 +30,9 @@
               break;
             case ALIGN_FRAGMENT:
               temp.append(prefix + "   [Align Next Value]\n");
-              temp.append(((Block)f.element).toString(prefix+"      ")); 
               break;
             case VAR_FRAGMENT:
               temp.append(prefix + "   [Access Variable]\n");
-              temp.append(((Block)f.element).toString(prefix+"      ")); 
               break;
          }
       }
@@ -88,8 +86,6 @@
 
    private String buildString(ScriptEnvironment e)
    {
-      e.CreateFrame();
-
       StringBuffer result = new StringBuffer();
       int          align  = 0;
 
@@ -106,12 +102,10 @@
               result.append(f.element);
               break;
             case ALIGN_FRAGMENT:
-              ((Block)f.element).evaluate(e);
-              align = ((Scalar)e.getCurrentFrame().pop()).getValue().intValue();
+              align = ((Scalar)e.getCurrentFrame().remove(0)).getValue().intValue();
               break;
             case VAR_FRAGMENT:
-              ((Block)f.element).evaluate(e);
-              temp  = ((Scalar)e.getCurrentFrame().pop()).getValue().toString();
+              temp  = ((Scalar)e.getCurrentFrame().remove(0)).getValue().toString();
 
               for (int z = 0 - temp.length(); z > align; z--)
               {

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-04-25 18:17:31 UTC (rev 346)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-04-25 19:30:31 UTC (rev 347)
@@ -514,6 +514,11 @@
            break;
          case EXPR_EVAL_STRING:
          case IDEA_STRING: // implemented -- parsed literals, one of my favorite features in sleep
+
+           /** create a frame, we assume the PLiteral machine will destroy it */
+           atom = factory.CreateFrame();
+           add(atom, tokens[0]);
+           
            boolean isVar = false; // is the current buffer d a varname or not?
 
            String varname, align; // some temp vars we'll use later...
@@ -599,7 +604,7 @@
                   d.append(current);
 
                   String[] ops = LexicalAnalyzer.CreateTerms(parser, new StringIterator(d.toString(), si.getLineNumber())).getStrings();
-                  
+
                   if (ops.length == 3)
                   {
                      // ^--- check if our varref has the form $[whatever]varname
@@ -611,9 +616,8 @@
 
                      if (align.length() > 0)
                      {
-                        backup();
                         parseIdea(new Token(align, si.getLineNumber()));
-                        machine.addFragment(PLiteral.ALIGN_FRAGMENT, restore());
+                        machine.addFragment(PLiteral.ALIGN_FRAGMENT, null);
                      }
                      else
                      {
@@ -625,9 +629,8 @@
                      varname = d.toString();
                   }
 
-                  backup();
                   parseIdea(new Token(varname, si.getLineNumber()));
-                  machine.addFragment(PLiteral.VAR_FRAGMENT, restore());
+                  machine.addFragment(PLiteral.VAR_FRAGMENT, null);
 
                   isVar   = false;
                   d       = new StringBuffer();



From rsmudge at mail.berlios.de  Fri Apr 25 22:02:05 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 25 Apr 2008 22:02:05 +0200
Subject: [Sleep-svn] r348 - in sleep/src/sleep: bridges engine parser
Message-ID: <200804252002.m3PK259B028071@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-25 22:02:05 +0200 (Fri, 25 Apr 2008)
New Revision: 348

Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/engine/GeneratedSteps.java
   sleep/src/sleep/parser/CodeGenerator.java
Log:
eliminated evaluation bridge... 


Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-04-25 19:30:31 UTC (rev 347)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-04-25 20:02:05 UTC (rev 348)
@@ -39,45 +39,17 @@
 import java.security.*;
 
 /** provides IO functions for the sleep language */
-public class BasicIO implements Loadable, Function, Evaluation
+public class BasicIO implements Loadable, Function
 {
     public void scriptUnloaded(ScriptInstance aScript)
     {
     }
 
-    public Scalar evaluateString(ScriptInstance script, String value)
-    {
-       Scalar rv = SleepUtils.getArrayScalar();
-
-       try
-       { 
-          Process proc  = Runtime.getRuntime().exec(value);
-          BufferedReader reader    = new BufferedReader(new InputStreamReader(proc.getInputStream()));
-
-          String text = null;
-          while ((text = reader.readLine()) != null)
-          {
-             rv.getArray().push(SleepUtils.getScalar(text));
-          }
-
-          if (proc.waitFor() != 0)
-          {
-             script.getScriptEnvironment().flagError("abnormal termination: " + proc.exitValue());
-          }
-       }
-       catch (Exception ex)
-       {
-          script.getScriptEnvironment().flagError(ex);
-       }
-
-       return rv;
-    }
-
     public void scriptLoaded (ScriptInstance aScript)
     {
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
-        temp.put("%BACKQUOTE%", this);
+        temp.put("__EXEC__", this);
 
         // predicates
         temp.put("-eof",     new iseof());
@@ -161,6 +133,33 @@
 
           return a.wait(i.getScriptEnvironment(), to);
        }
+       else if (n.equals("__EXEC__"))
+       {
+          Scalar rv = SleepUtils.getArrayScalar();
+
+          try
+          { 
+             Process proc  = Runtime.getRuntime().exec(BridgeUtilities.getString(l, ""));
+             BufferedReader reader    = new BufferedReader(new InputStreamReader(proc.getInputStream()));
+
+             String text = null;
+             while ((text = reader.readLine()) != null)
+             {
+                rv.getArray().push(SleepUtils.getScalar(text));
+             }
+
+             if (proc.waitFor() != 0)
+             {
+                i.getScriptEnvironment().flagError("abnormal termination: " + proc.exitValue());
+             }
+          }
+          catch (Exception ex)
+          {
+             i.getScriptEnvironment().flagError(ex);
+          }
+
+          return rv;
+       }
        else if (n.equals("&writeObject") || n.equals("&writeAsObject"))
        {
           IOObject a = chooseSource(l, 2, i);

Modified: sleep/src/sleep/engine/GeneratedSteps.java
===================================================================
--- sleep/src/sleep/engine/GeneratedSteps.java	2008-04-25 19:30:31 UTC (rev 347)
+++ sleep/src/sleep/engine/GeneratedSteps.java	2008-04-25 20:02:05 UTC (rev 348)
@@ -76,9 +76,9 @@
        return temp;
     }
  
-    public Step PLiteral(String evaluator)
+    public Step PLiteral()
     {
-       Step temp = new PLiteral(evaluator);
+       Step temp = new PLiteral();
        return temp;
     }
 

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-04-25 19:30:31 UTC (rev 347)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-04-25 20:02:05 UTC (rev 348)
@@ -513,6 +513,15 @@
            parseIdea(ParserUtilities.extract(tokens[0]));
            break;
          case EXPR_EVAL_STRING:
+           atom = factory.CreateFrame();
+           add(atom, tokens[0]);
+
+           datum.setType(IDEA_STRING);
+           parse(datum);
+
+           atom = factory.Call("__EXEC__");
+           add(atom, tokens[0]);
+           break;
          case IDEA_STRING: // implemented -- parsed literals, one of my favorite features in sleep
 
            /** create a frame, we assume the PLiteral machine will destroy it */
@@ -526,7 +535,7 @@
            StringBuffer d = new StringBuffer(); // the string buffer where we will dump our results.
 
            PLiteral  machine;
-           machine = (PLiteral)(datum.getType() == EXPR_EVAL_STRING ? factory.PLiteral("%BACKQUOTE%") : factory.PLiteral(null));
+           machine = (PLiteral)factory.PLiteral();
  
            StringIterator si = new StringIterator(ParserUtilities.extract(strings[0]), tokens[0].getHint());
    



From rsmudge at mail.berlios.de  Wed Apr 30 06:20:45 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 30 Apr 2008 06:20:45 +0200
Subject: [Sleep-svn] r350 - in sleep: . src/sleep/runtime
Message-ID: <200804300420.m3U4KjuH009395@sheep.berlios.de>

Author: rsmudge
Date: 2008-04-30 06:20:44 +0200 (Wed, 30 Apr 2008)
New Revision: 350

Modified:
   sleep/build.xml
   sleep/readme.txt
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
b24



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-04-28 04:25:23 UTC (rev 349)
+++ sleep/build.xml	2008-04-30 04:20:44 UTC (rev 350)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-04-28 04:25:23 UTC (rev 349)
+++ sleep/readme.txt	2008-04-30 04:20:44 UTC (rev 350)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 23 - README   
+Sleep - 2.1 beta 24 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-04-28 04:25:23 UTC (rev 349)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-04-30 04:20:44 UTC (rev 350)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080423;
+   public static final int    SLEEP_RELEASE = 20080430;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-28 04:25:23 UTC (rev 349)
+++ sleep/whatsnew.txt	2008-04-30 04:20:44 UTC (rev 350)
@@ -1,4 +1,4 @@
-2.1-beta 24
+2.1-beta 24  (30 Apr 08)
 ===========
 - refactored Parser/CodeGenerator to use a factory pattern for
   generating atomic steps. 



