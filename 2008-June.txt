From rsmudge at mail.berlios.de  Mon Jun 16 12:33:12 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 16 Jun 2008 12:33:12 +0200
Subject: [Sleep-svn] r409 - in sleep: . src/sleep/engine/atoms
	src/sleep/runtime tests tests/output
Message-ID: <200806161033.m5GAXCHI007270@sheep.berlios.de>

Author: rsmudge
Date: 2008-06-16 12:33:08 +0200 (Mon, 16 Jun 2008)
New Revision: 409

Added:
   sleep/tests/output/slist2.sl
   sleep/tests/slist2.sl
Modified:
   sleep/readme.txt
   sleep/src/sleep/engine/atoms/Index.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
Sleep 2.1-release



Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/readme.txt	2008-06-16 10:33:08 UTC (rev 409)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 27 - README   
+Sleep 2.1 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is
@@ -10,16 +10,16 @@
 the Scripting Language for Easily Enhancing Programs.  It is a small 
 scripting language with perl inspired syntax implemented in Java.
 
-Sleep is primarily a glue language.  Included with Sleep is everything 
-required to embed and extend the language to fit into new applications and
-problem domains.  
-
 The core of sleep was produced in one weekend in early April of 2002.  
 I just wanted something I could integrate into an application I was 
-writing.  Specifically I wanted something I could integrate the way *I 
-wanted* to integrate it.  Since then, Sleep has been revised, expanded, 
-and stabilized.  
+writing.  Sometime in 2004 (or 2005?) I was possessed to expand the language
+to include closures and access to the Java class library. 
 
+After Sleep 2.0 I let the project sit and collect bug reports for about a 
+year.   At some point I added coroutines into Sleep 2.0 and thus Sleep 2.1 was
+born.  This release is the result of a 2 year polishing effort on the Sleep 
+2.0 codebase.  I hope you enjoy it.
+
 Sleep Project Homepage: http://sleep.dashnine.org/
 
  ------- -------------------- ---------   ---------------  ------- ---------
@@ -35,6 +35,9 @@
    The Sleep 2.1 Manual is both a tutorial and reference for the Sleep language.
    The manual is available at http://sleep.dashnine.org/manual/
 
+   You can also support this project and purchase the Manual online at:
+   http://www.amazon.com/dp/143822723X/
+
 sleepguide.htm
    This document is a guide to integrating the sleep language into your
    application.  Part 1 of this document is an absolute must read if you plan 
@@ -110,7 +113,7 @@
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 Feedback is always welcome.  Suggestions/comments/questions can directed to
-me via email: raffi at hick.org
+me via email: rsmudge at gmail.com
 
 I do respond to most feedback.  For example, this message posted to a public
 forum:

Modified: sleep/src/sleep/engine/atoms/Index.java
===================================================================
--- sleep/src/sleep/engine/atoms/Index.java	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/src/sleep/engine/atoms/Index.java	2008-06-16 10:33:08 UTC (rev 409)
@@ -80,10 +80,10 @@
           }
       }
 
-      e.CreateFrame();
+//      e.CreateFrame();
          index.evaluate(e);
          pos = (Scalar)(e.getCurrentFrame().pop());
-      e.KillFrame();
+//      e.KillFrame();
 
       if (structure.getArray() != null) 
       { 
@@ -113,6 +113,7 @@
       }
       else 
       { 
+         e.KillFrame();
          throw new IllegalArgumentException("invalid use of index operator: " + SleepUtils.describe(structure) + "[" + SleepUtils.describe(pos) + "]");
       } 
 

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-06-16 10:33:08 UTC (rev 409)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080530;
+   public static final int    SLEEP_RELEASE = 20080616;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";
@@ -124,6 +124,11 @@
     */
    public static Scalar runCode(SleepClosure closure, String message, ScriptInstance script, Stack locals)
    {
+       if (script == null)
+       {
+          script = closure.getOwner();
+       }
+
        CallRequest request = new CallRequest.ClosureCallRequest(script.getScriptEnvironment(), Integer.MIN_VALUE, SleepUtils.getScalar(closure), message);
        return runCode(request, script, locals);
    }

Added: sleep/tests/output/slist2.sl
===================================================================
--- sleep/tests/output/slist2.sl	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/tests/output/slist2.sl	2008-06-16 10:33:08 UTC (rev 409)
@@ -0,0 +1,6 @@
+@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
+@('c', 'd', 'e', 'f', 'g', 'h')
+@('e', 'f')
+@('a', 'b', 'c', 'd', 'e', 'f', 'pHEAR', 'g', 'h', 'i', 'j')
+@('e', 'f', 'pHEAR')
+Warning: unsafe data modification: parent @array changed after &sublist creation at slist2.sl:16

Added: sleep/tests/slist2.sl
===================================================================
--- sleep/tests/slist2.sl	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/tests/slist2.sl	2008-06-16 10:33:08 UTC (rev 409)
@@ -0,0 +1,16 @@
+#
+# test a sublist of a sublist of a sublist changes..
+#
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j");
+ at b = subarray(@a, 2, 8);
+ at c = subarray(@b, 2, 4);
+
+println(@a);
+println(@b);
+println(@c);
+
+ at c[2] = "pHEAR";
+println(@a);
+println(@c);
+println(@b);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 21:55:20 UTC (rev 408)
+++ sleep/whatsnew.txt	2008-06-16 10:33:08 UTC (rev 409)
@@ -1,3 +1,11 @@
+2.1-release  (16 Jun 08)
+===========
+- SleepUtils#runCode(SleepClosure, ...) now accepts a null value
+  for the ScriptInstance parameter.
+- eliminated unnecessary frame creation within the Index operator
+- added a check to cleanup the current frame when a bad index 
+  error occurs.
+
 2.1-beta 27  (30 May 08)
 ===========
 - Virtual machine errors (stack overflow, out of memory) etc.



From rsmudge at mail.berlios.de  Mon Jun 16 12:57:54 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 16 Jun 2008 12:57:54 +0200
Subject: [Sleep-svn] r410 - in sleep: . src/sleep/bridges/io src/sleep/engine
Message-ID: <200806161057.m5GAvsB3006059@sheep.berlios.de>

Author: rsmudge
Date: 2008-06-16 12:57:52 +0200 (Mon, 16 Jun 2008)
New Revision: 410

Modified:
   sleep/readme.txt
   sleep/src/sleep/bridges/io/IOObject.java
   sleep/src/sleep/engine/ObjectUtilities.java
Log:
Sleep 2.1-release (fo realz)


Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-06-16 10:33:08 UTC (rev 409)
+++ sleep/readme.txt	2008-06-16 10:57:52 UTC (rev 410)
@@ -6,20 +6,29 @@
 what my friend Luke said to me upon closing out a weekend of possessed
 coding.
 
-A weekend of possessed coding that yielded a scripting language.  Sleep is
-the Scripting Language for Easily Enhancing Programs.  It is a small 
-scripting language with perl inspired syntax implemented in Java.
+A weekend of possessed coding that yielded a scripting language.  Sleep is a 
+Java-based scripting language heavily inspired by Perl. Sleep provides advanced 
+programming features including:
 
-The core of sleep was produced in one weekend in early April of 2002.  
-I just wanted something I could integrate into an application I was 
-writing.  Sometime in 2004 (or 2005?) I was possessed to expand the language
-to include closures and access to the Java class library. 
+   - continuations
+   - first-class functions
+   - a built-in debugger 
+   - taint mode security
+   - access to the Java class library
+   - ... and cryptic Perl syntax.
 
+The core of sleep was produced in one weekend in early April of 2002.  I just 
+wanted something I could integrate into an application I was writing.  
+Sometime in 2004 (or 2005?) I was possessed to expand the language to include 
+closures and access to the Java class library. 
+
 After Sleep 2.0 I let the project sit and collect bug reports for about a 
-year.   At some point I added coroutines into Sleep 2.0 and thus Sleep 2.1 was
-born.  This release is the result of a 2 year polishing effort on the Sleep 
-2.0 codebase.  I hope you enjoy it.
+year.   At some point I added coroutines into Sleep 2.0 and thus Sleep 2.1 
+was born.  This release is the result of a 2 year polishing effort on the Sleep 
+2.0 codebase. 
 
+Sleep is compatible with Java 1.4.2+
+
 Sleep Project Homepage: http://sleep.dashnine.org/
 
  ------- -------------------- ---------   ---------------  ------- ---------

Modified: sleep/src/sleep/bridges/io/IOObject.java
===================================================================
--- sleep/src/sleep/bridges/io/IOObject.java	2008-06-16 10:33:08 UTC (rev 409)
+++ sleep/src/sleep/bridges/io/IOObject.java	2008-06-16 10:57:52 UTC (rev 410)
@@ -111,13 +111,13 @@
       token = t;
    }
 
+   /** sets the stdin/stdout for this script environment. This value is placed into the script metadata with the %console% key */
    public static void setConsole(ScriptEnvironment environment, IOObject object)
    {
       environment.getScriptInstance().getMetadata().put("%console%", object);
    }
 
-   /** returns an IOObject that represents stdin/stdout to Sleep's I/O API.  To set a script's console
-       object install an IOObject into a script environment under the variable name %console% */
+   /** returns an IOObject that represents stdin/stdout to Sleep's I/O API. */
    public static IOObject getConsole(ScriptEnvironment environment)
    {
       IOObject console = (IOObject)environment.getScriptInstance().getMetadata().get("%console%");

Modified: sleep/src/sleep/engine/ObjectUtilities.java
===================================================================
--- sleep/src/sleep/engine/ObjectUtilities.java	2008-06-16 10:33:08 UTC (rev 409)
+++ sleep/src/sleep/engine/ObjectUtilities.java	2008-06-16 10:57:52 UTC (rev 410)
@@ -239,6 +239,7 @@
       }
    }
 
+   /** attempts to find the method that is the closest match to the specified arguments */
    public static Method findMethod(Class theClass, String method, Stack arguments)
    {
       int      size    = arguments.size();
@@ -265,6 +266,7 @@
       return temp;
    }
 
+   /** attempts to find the constructor that is the closest match to the arguments */
    public static Constructor findConstructor(Class theClass, Stack arguments)
    {
       int      size    = arguments.size();
@@ -349,6 +351,7 @@
       return atype;
    }
 
+   /** marshalls the Sleep value into a Java value of the specified type. */
    public static Object buildArgument(Class type, Scalar value, ScriptInstance script)
    {
       if (type == String.class)
@@ -467,6 +470,7 @@
       return value.objectValue();
    }
 
+   /** utility to create a string representation of an incompatible argument choice */
    public static String buildArgumentErrorMessage(Class theClass, String method, Class[] expected, Object[] parameters)
    {
       StringBuffer tempa = new StringBuffer(method + "(");
@@ -496,6 +500,7 @@
       return "bad arguments " + tempb.toString() + " for " + tempa.toString() + " in " + theClass;
    } 
 
+   /** populates a Java array with Sleep values marshalled into values of the specified types. */
    public static Object[] buildArgumentArray(Class[] types, Stack arguments, ScriptInstance script)
    {
       Object[] parameters = new Object[types.length];
@@ -509,6 +514,8 @@
       return parameters;
    }
 
+   /** marshalls a Java type into the appropriate Sleep scalar.  The primitives value will force this method to also check
+       if the Java type could map to an int, long, double, etc.  Use true when in doubt. */
    public static Scalar BuildScalar(boolean primitives, Object value)
    {
       if (value == null)



From rsmudge at mail.berlios.de  Tue Jun 17 23:32:50 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Tue, 17 Jun 2008 23:32:50 +0200
Subject: [Sleep-svn] r412 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200806172132.m5HLWopk031440@sheep.berlios.de>

Author: rsmudge
Date: 2008-06-17 23:32:50 +0200 (Tue, 17 Jun 2008)
New Revision: 412

Added:
   sleep/tests/output/splsublist.sl
   sleep/tests/splsublist.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/whatsnew.txt
Log:
small fix to splice(...)


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-06-16 11:06:43 UTC (rev 411)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-06-17 21:32:50 UTC (rev 412)
@@ -1152,23 +1152,28 @@
 
           /* remove the specified elements please */
 
-          ScalarArray toRemove = value.getArray().sublist(start, torem);
-          Iterator iter = toRemove.scalarIterator();
-          while (iter.hasNext())
+          int y = start;
+
+          Iterator iter = value.getArray().scalarIterator();
+          for (int x = 0; x <= start && iter.hasNext(); x++) { iter.next(); }
+
+          while (y < torem && iter.hasNext())
           {
+             iter.remove();
+             y++;
              iter.next();
-             iter.remove();
           }
 
           /* insert some elements */
 
-          ScalarArray addToMe = value.getArray().sublist(0, start); 
-
+          ListIterator liter = (ListIterator)value.getArray().scalarIterator();
+          for (int x = 0; x < start && liter.hasNext(); x++) { liter.next(); }
+          
           Iterator j = insert.scalarIterator();
           while (j.hasNext())
           {
              Scalar ins = (Scalar)j.next();
-             addToMe.push(SleepUtils.getScalar(ins));
+             liter.add(ins);
           }
 
           return value;

Added: sleep/tests/output/splsublist.sl
===================================================================
--- sleep/tests/output/splsublist.sl	2008-06-16 11:06:43 UTC (rev 411)
+++ sleep/tests/output/splsublist.sl	2008-06-17 21:32:50 UTC (rev 412)
@@ -0,0 +1,3 @@
+@('c', 'd', 'e', 'f', 'g', 'h')
+@('c', 'd', 'foo', 'bar', 'h')
+@('a', 'b', 'c', 'd', 'foo', 'bar', 'h', 'i')

Added: sleep/tests/splsublist.sl
===================================================================
--- sleep/tests/splsublist.sl	2008-06-16 11:06:43 UTC (rev 411)
+++ sleep/tests/splsublist.sl	2008-06-17 21:32:50 UTC (rev 412)
@@ -0,0 +1,13 @@
+#
+#
+#
+
+# @subs             0    1    2    3    4    5
+#         0    1    2    3    4    5    6    7    8
+ at list = @("a", "b", "c", "d", "e", "f", "g", "h", "i");
+ at subs = sublist(@list, 2, 8);
+println(@subs);
+splice(@subs, @("foo", "bar"), 2, 3);
+println(@subs);
+println(@list);
+

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-06-16 11:06:43 UTC (rev 411)
+++ sleep/whatsnew.txt	2008-06-17 21:32:50 UTC (rev 412)
@@ -1,3 +1,7 @@
+2.1-release  (...)
+===========
+- splice() no longer corrupts sublists.
+
 2.1-release  (16 Jun 08)
 ===========
 - SleepUtils#runCode(SleepClosure, ...) now accepts a null value



From rsmudge at mail.berlios.de  Tue Jun 17 23:42:24 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Tue, 17 Jun 2008 23:42:24 +0200
Subject: [Sleep-svn] r413 - sleep/src/sleep/bridges
Message-ID: <200806172142.m5HLgOBl032493@sheep.berlios.de>

Author: rsmudge
Date: 2008-06-17 23:42:23 +0200 (Tue, 17 Jun 2008)
New Revision: 413

Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
Log:
..


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-06-17 21:32:50 UTC (rev 412)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-06-17 21:42:23 UTC (rev 413)
@@ -1155,13 +1155,17 @@
           int y = start;
 
           Iterator iter = value.getArray().scalarIterator();
-          for (int x = 0; x <= start && iter.hasNext(); x++) { iter.next(); }
+          for (int x = 0; x < start && iter.hasNext(); x++) { iter.next(); }
 
-          while (y < torem && iter.hasNext())
+          while (y < torem)
           {
-             iter.remove();
+             if (iter.hasNext())
+             {
+                iter.next();
+                iter.remove();
+             }
+
              y++;
-             iter.next();
           }
 
           /* insert some elements */



