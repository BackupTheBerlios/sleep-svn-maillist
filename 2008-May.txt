From rsmudge at mail.berlios.de  Thu May  8 18:45:03 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 18:45:03 +0200
Subject: [Sleep-svn] r351 - in sleep: . src/sleep/bridges
	src/sleep/bridges/io src/sleep/runtime tests tests/output
Message-ID: <200805081645.m48Gj3H5022256@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 18:45:00 +0200 (Thu, 08 May 2008)
New Revision: 351

Added:
   sleep/runtests.sl
   sleep/tests/chdir.sl
   sleep/tests/output/chdir.sl
   sleep/tests/output/readb2.sl
   sleep/tests/readb2.sl
Modified:
   sleep/build.xml
   sleep/readme.txt
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/src/sleep/bridges/FileSystemBridge.java
   sleep/src/sleep/bridges/io/FileObject.java
   sleep/src/sleep/runtime/ScriptInstance.java
   sleep/tests/callccfork.sl
   sleep/tests/dataio.sl
   sleep/tests/forkof.sl
   sleep/tests/forkshare.sl
   sleep/tests/megaio.sl
   sleep/tests/output/callccfork.sl
   sleep/tests/output/cast.sl
   sleep/tests/output/convertds3.sl
   sleep/tests/output/debugce.sl
   sleep/tests/output/forker.sl
   sleep/tests/output/include.sl
   sleep/tests/output/scalar.sl
   sleep/tests/output/taint7.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/warn2.sl
   sleep/tests/output/wrong.sl
   sleep/tests/test.pl
   sleep/whatsnew.txt
Log:
..


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/build.xml	2008-05-08 16:45:00 UTC (rev 351)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/readme.txt	2008-05-08 16:45:00 UTC (rev 351)
@@ -73,11 +73,13 @@
 [raffi at beardsley ~/sleep]$ rm -rf bin
 [raffi at beardsley ~/sleep]$ ant all
 
-If you made any changes or just want to make sure nothing got broken you can
+If you made any changes or just want to make sure nothing is broken you can
 run a series of regression tests on sleep.
 
-[raffi at beardsley ~/sleep/tests]$ perl test.pl
+[raffi at beardsley ~/sleep]$ java -jar sleep.jar runtests.sl
 
+If the runtests.so script won't run then you're really in trouble.
+
 To Build JavaDoc for Sleep (dumped to the docs/api/ directory):
 
 [raffi at beardsley ~/sleep]$ ant docs

Added: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/runtests.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -0,0 +1,191 @@
+#
+# Regression test perl script.  A quick way to make sure my crazy changes aren't
+# breaking my precious language.
+#
+# Runs each sleep script in the tests/ directory, compares the results to the file with the
+# same name w/i the tests/output directory.
+#
+# If they match - congratulations the script worked okay.
+#
+# If they don't match - something is broken.
+#
+# Executing the regression test:
+# (from within the top level Sleep directory type)
+#
+# [user ~/sleep/]$ java -jar sleep.jar runtests.sl
+#
+# Advantages over the original test.pl Perl script
+# ----------
+# 1) most scripts are executed within one Java instance avoiding costly process creation overhead
+#   translation: much faster
+# 2) script output is sanitized for file/directory paths and object addresses, things that change
+#    compile to compile and system to system.
+
+debug(7 | 34);
+
+import sleep.error.RuntimeWarningWatcher;
+import sleep.error.YourCodeSucksException;
+import sleep.runtime.ScriptLoader;
+import sleep.bridges.io.IOObject; 
+import sleep.parser.ParserConfig;
+
+sub runScript
+{
+   local('@args $value $handle $read');
+   @args = split(' ', $1);
+   push(@args, "2 + 2");
+
+   $handle = exec(@args, $null, cwd());
+   while $read (readb($handle, 1))
+   {
+      $value .= $read;
+   }
+
+   closef($handle);
+
+   return $value;
+}
+
+sub executeScript
+{
+   local('$loader $script $buffer $error $watcher');
+
+   $buffer = allocate();
+
+   # this is a hack to get around Sleep's synchronization model with the runtime warning watcher.
+   # an isolated (i.e. not used anywhere else) script environment is created by fork, within it we generate an anonymous
+   # function proxying the Java object we wish to emulate.  We then return that Java object.  When a method is called on
+   # this object it will not block for the test script running in the main thread (this was causing some fork test cases
+   # to freeze).
+
+   $watcher = wait(fork({ return newInstance(^RuntimeWarningWatcher, lambda({ println($buffer, $1); }, \$buffer)); }, \$buffer));
+
+   try
+   {
+      $loader = [new ScriptLoader];
+
+      [ParserConfig setSleepClasspath: cwd()];
+
+      $script = [$loader loadScript: getFileProper($1)];
+      [$script chdir: cwd()];
+      [$script addWarningWatcher: $watcher];
+   }
+   catch $error
+   {
+      return [$error formatErrors];
+   }
+ 
+   [IOObject setConsole: [$script getScriptEnvironment], $buffer];
+
+   [$script runScript];
+
+   closef($buffer);
+ 
+   return readb($buffer, available($buffer));
+}
+
+#
+# fix stuff that is ambiguous between tests i.e. file paths, addresses in object string representations, and closure numbers
+#
+sub sanitize
+{
+   $1 = replace($1, '(\&closure\[.*?\]\#)\d+', '$1X');
+   $1 = replace($1, '/Users/raffi/sleepdev/sleep/', '==CWD==');
+   $1 = replace($1, getFileParent(cwd()), '==CWD==');
+   $1 = replace($1, '([\.\[][a-zA-Z_0-9;]+@)[0-9a-f]{5,6}', '$1######');
+   $1 = replace($1, '\$Proxy\d+?', '\$Proxy#');
+   return $1;
+}
+
+sub runTests
+{
+   local('$script $value @scripts @errors $handle $compare %special $x $read');
+
+   chdir("tests");
+
+   # some special scripts that require command line execution to test out some stuff...
+   for ($x = 0; $x < 10; $x++)
+   {
+      %special["taint $+ $x $+ .sl"]  = "java -Dsleep.taint=true -jar ../sleep.jar taint $+ $x $+ .sl";
+   }
+   %special["debugce.sl"] = "java -Dsleep.debug=3 -jar ../sleep.jar debugce.sl"; 
+   %special["tcatchex.sl"] = "java -jar ../sleep.jar tcatchex.sl";     # calls System.out
+   %special["odd.sl"]      = "java -jar ../sleep.jar odd.sl";          # calls System.out  
+   %special["objects.sl"]  = "java -jar ../sleep.jar objects.sl";      # calls System.out
+   %special["trace.sl"]    = "java -jar ../sleep.jar trace.sl";        # calls System.out
+   %special["wrong.sl"]    = "java -jar ../sleep.jar wrong.sl";        # calls System.out
+   %special["cmdline.sl"]  = "java -jar ../sleep.jar cmdline.sl";      # evaluates $__SCRIPT__ created by TextConsole.main
+   %special["multih.sl"]   = "java -jar ../sleep.jar multih.sl";       # calls System.out
+   %special["use.sl"]      = "java -jar ../sleep.jar use.sl";          # calls System.out
+   %special["use2.sl"]     = "java -jar ../sleep.jar use2.sl";         # calls System.out
+   %special["convertds2.sl"] = "java -jar ../sleep.jar convertds2.sl"; # calls System.out
+   %special["convertds3.sl"] = "java -jar ../sleep.jar convertds3.sl"; # calls System.out
+   %special["convertds4.sl"] = "java -jar ../sleep.jar convertds4.sl"; # calls System.out
+   %special["setfield.sl"]   = "java -jar ../sleep.jar setfield.sl";   # calls System.out
+   %special["process.sl"]    = "java -jar ../sleep.jar process.sl";    # instantiates ScriptLoader which is immune to current working directory.
+
+   @scripts = filter({ return iff("*.sl" iswm $1, getFileName($1)); }, ls());
+   foreach $script (@scripts)
+   {
+      print("$[25]script");
+
+      if (%special[$script] is $null && -exists "output/ $+ $script")
+      {
+         print("  . ");
+         $value = executeScript($script);
+      }
+      else
+      {
+         print("  X ");
+         $value = runScript(%special[$script]);
+      }
+
+      if (!-exists "output/ $+ $script")
+      {
+         $handle = openf(">output/ $+ $script");
+         writeb($handle, $value);
+         closef($handle);
+
+         println(" - did not exist, creating output");
+      }
+      else 
+      { 
+         $handle = openf("output/ $+ $script");
+         $compare = readb($handle, -1);
+         closef($handle);
+
+         sanitize($compare);
+         sanitize($value);
+
+         if ($compare eq $value)
+         {
+            println();
+         }
+         else
+         {
+            println(" - did not match expected output");
+            push(@errors, "$script - did not match expected output");
+  
+            $handle = openf(">../ $+ $script $+ .broken");
+            writeb($handle, $value);
+            closef($handle);
+
+            $handle = openf(">../ $+ $script $+ .compare");
+            writeb($handle, $compare);
+            closef($handle);
+         }
+      }
+   }
+
+   if (size(@errors) == 0)
+   {
+      println("*** All tests passed! :) ***");
+   }
+   else
+   {
+      println("*** ERRORS Detected ***");
+      printAll(@errors);
+   }
+}
+
+runTests();

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -141,7 +141,7 @@
 
           try
           { 
-             Process proc  = Runtime.getRuntime().exec(BridgeUtilities.getString(l, ""));
+             Process proc  = Runtime.getRuntime().exec(BridgeUtilities.getString(l, ""), null, i.cwd());
              BufferedReader reader    = new BufferedReader(new InputStreamReader(proc.getInputStream()));
 
              String text = null;
@@ -415,7 +415,7 @@
              }
              else
              {
-                start = BridgeUtilities.getFile(l); 
+                start = BridgeUtilities.getFile(l, i); 
              }
           }
 
@@ -649,9 +649,17 @@
 
     private static IOObject chooseSource(Stack l, int args, ScriptInstance i)
     {
-       IOObject a;
+       if (l.size() < args && !l.isEmpty())
+       {
+          Scalar temp = (Scalar)l.peek();
 
-       if (l.size() >= args)
+          if (temp.getActualValue() != null && temp.getActualValue().getType() == ObjectValue.class && temp.objectValue() instanceof IOObject)
+          {
+             l.pop();
+             return (IOObject)temp.objectValue();
+          }
+       }
+       else if (l.size() >= args)
        {
           Scalar b = (Scalar)l.pop();
 
@@ -660,14 +668,10 @@
              throw new IllegalArgumentException("expected I/O handle argument, received: " + SleepUtils.describe(b));
           }
 
-          a = (IOObject)b.objectValue();
+          return (IOObject)b.objectValue();
        }
-       else
-       {
-          a = IOObject.getConsole(i.getScriptEnvironment());
-       }  
 
-       return a;
+       return IOObject.getConsole(i.getScriptEnvironment());
     }
 
     private static class getConsoleObject implements Function
@@ -1152,6 +1156,12 @@
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
           IOObject        a = chooseSource(l, 2, i);
+
+          if (a.getInputBuffer() == null)
+          {
+             throw new RuntimeException("&mark: input buffer for " + SleepUtils.describe(SleepUtils.getScalar(a)) + " is closed");
+          }
+
           a.getInputBuffer().mark(BridgeUtilities.getInt(l, 1024 * 10 * 10));
 
           return SleepUtils.getEmptyScalar();
@@ -1280,12 +1290,18 @@
 
           if (a.getReader() != null)
           {
-             byte[] temp = a.getBuffer(to);
+             byte[] temp = to > -1 ? a.getBuffer(to) : new byte[0];
    
              int read = 0;
 
              try
              {
+                if (to == -1)
+                {
+                   to = a.getInputStream().available();
+                   temp = a.getBuffer(to);
+                }
+
                 while (read < to)
                 {
                    last = a.getReader().read(temp, read, to - read);

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -351,7 +351,7 @@
                 }
                 else
                 {
-                   istream = new FileInputStream(new File(className));
+                   istream = new FileInputStream(BridgeUtilities.toSleepFile(className, si));
                 }
 
                 if (istream != null)

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -240,22 +240,36 @@
 
    private static final boolean doReplace = File.separatorChar != '/';
 
-   /** returns a File object from a string argument, the path in the string argument is transformed such 
-       that the character / will refer to the correct path separator for the current OS.  Returns null if
-       no file is specified as an argument. */
-   public static File getFile(Stack arguments)
+   /** adjusts the file argument to accomodate for the current working directory */
+   public static File toSleepFile(String text, ScriptInstance i)
    {
-      if (arguments.isEmpty())
-         return null;
+      if (text == null)
+      {
+         return i.cwd();
+      }
+      else if (doReplace)
+      {
+         text = text.replace('/', File.separatorChar); 
+      }
 
-      String temp = arguments.pop().toString();
+      File f = new File(text);
 
-      if (doReplace)
+      if (!f.isAbsolute())
       {
-         temp = temp.replace('/', File.separatorChar); 
+         return new File(i.cwd(), text);
       }
+      else
+      {
+         return f;
+      }
+   }
 
-      return new File(temp);
+   /** returns a File object from a string argument, the path in the string argument is transformed such 
+       that the character / will refer to the correct path separator for the current OS.  Returns null if
+       no file is specified as an argument. */
+   public static File getFile(Stack arguments, ScriptInstance i)
+   {
+      return toSleepFile(arguments.isEmpty() ? null : arguments.pop().toString(), i);
    }
  
    /** Pops a Key/Value pair object off of the argument stack.  A Key/Value pair is created using

Modified: sleep/src/sleep/bridges/FileSystemBridge.java
===================================================================
--- sleep/src/sleep/bridges/FileSystemBridge.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/bridges/FileSystemBridge.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -12,7 +12,7 @@
 import java.io.*;
 
 /** provides a bridge for accessing the local file system */
-public class FileSystemBridge implements Loadable, Function
+public class FileSystemBridge implements Loadable, Function, Predicate
 {
     public void scriptUnloaded(ScriptInstance aScript)
     {
@@ -23,17 +23,21 @@
         Hashtable temp = aScript.getScriptEnvironment().getEnvironment();
 
         // predicates
-        temp.put("-exists",   new _exists());
-        temp.put("-canread",   new _canread());
-        temp.put("-canwrite",   new _canwrite());
-        temp.put("-isDir",   new _isDirectory());
-        temp.put("-isFile",   new _isFile());
-        temp.put("-isHidden",   new _isHidden());
+        temp.put("-exists",   this);
+        temp.put("-canread",  this);
+        temp.put("-canwrite", this);
+        temp.put("-isDir",    this);
+        temp.put("-isFile",   this);
+        temp.put("-isHidden", this);
 
         // functions
         temp.put("&createNewFile",   this);
         temp.put("&deleteFile",      this);
-        temp.put("&getCurrentDirectory",     new getActiveDir());
+
+        temp.put("&chdir",               this);
+        temp.put("&cwd",                 this);
+        temp.put("&getCurrentDirectory", this);
+
         temp.put("&getFileName",     new getFileName());
         temp.put("&getFileProper",   new getFileProper());
         temp.put("&getFileParent",   new getFileParent());
@@ -53,7 +57,7 @@
         {
            try
            {
-              File a = BridgeUtilities.getFile(l);
+              File a = BridgeUtilities.getFile(l, i);
               if (a.createNewFile())
               {
                  return SleepUtils.getScalar(1);
@@ -61,9 +65,17 @@
            }
            catch (Exception ex) { i.getScriptEnvironment().flagError(ex); }
         }
+        else if (n.equals("&cwd") || n.equals("&getCurrentDirectory"))
+        {
+           return SleepUtils.getScalar(i.cwd());
+        }
+        else if (n.equals("&chdir"))
+        {
+           i.chdir(BridgeUtilities.getFile(l, i));
+        }
         else if (n.equals("&deleteFile"))
         {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            if (a.delete())
            {
               return SleepUtils.getScalar(1);
@@ -71,7 +83,7 @@
         }
         else if (n.equals("&mkdir"))
         {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            if (a.mkdirs())
            {
               return SleepUtils.getScalar(1);
@@ -79,8 +91,8 @@
         }
         else if (n.equals("&rename"))
         {
-           File a = BridgeUtilities.getFile(l);
-           File b = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
+           File b = BridgeUtilities.getFile(l, i);
            if (a.renameTo(b))
            {
               return SleepUtils.getScalar(1);
@@ -88,7 +100,7 @@
         }
         else if (n.equals("&setLastModified"))
         {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            long b = BridgeUtilities.getLong(l);
 
            if (a.setLastModified(b))
@@ -98,7 +110,7 @@
         }
         else if (n.equals("&setReadOnly"))
         {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
 
            if (a.setReadOnly())
            {
@@ -110,20 +122,11 @@
         return SleepUtils.getEmptyScalar();
     }
 
-    private static class getActiveDir implements Function
-    {
-       public Scalar evaluate(String n, ScriptInstance i, Stack l)
-       {
-           File a = new File("");
-           return SleepUtils.getScalar(a.getAbsolutePath());
-       }
-    }
-
     private static class getFileName implements Function
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            return SleepUtils.getScalar(a.getName());
        }
     }
@@ -132,7 +135,7 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-           File start = BridgeUtilities.getFile(l);
+           File start = BridgeUtilities.getFile(l, i);
 
            while (!l.isEmpty())
            {
@@ -147,7 +150,7 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            return SleepUtils.getScalar(a.getParent());
        }
     }
@@ -156,7 +159,7 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            return SleepUtils.getScalar(a.lastModified());
        }
     }
@@ -165,7 +168,7 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-           File a = BridgeUtilities.getFile(l);
+           File a = BridgeUtilities.getFile(l, i);
            return SleepUtils.getScalar(a.length());
        }
     }
@@ -180,16 +183,12 @@
            {
               files = File.listRoots();
            }
-           else if (l.isEmpty() && n.equals("&ls"))
+           else 
            {
-              File a = new File("").getAbsoluteFile();
+              File a = BridgeUtilities.getFile(l, i);
               files = a.listFiles();
            }
-           else
-           {
-              File a = BridgeUtilities.getFile(l);
-              files = a.listFiles();
-           }
+
            LinkedList temp = new LinkedList();
 
            if (files != null)
@@ -204,57 +203,17 @@
        }
     }
 
-    private static class _canread implements Predicate
+    public boolean decide(String n, ScriptInstance i, Stack l)
     {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.canRead();
-       }
-    }
+       File a = BridgeUtilities.getFile(l, i);
 
-    private static class _isDirectory implements Predicate
-    {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.isDirectory();
-       }
-    }
+       if (n.equals("-canread")) { return a.canRead(); }
+       else if (n.equals("-canwrite")) { return a.canWrite(); }
+       else if (n.equals("-exists")) { return a.exists(); }
+       else if (n.equals("-isDir")) { return a.isDirectory(); }
+       else if (n.equals("-isFile")) { return a.isFile(); }
+       else if (n.equals("-isHidden")) { return a.isHidden(); }
 
-    private static class _isFile implements Predicate
-    {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.isFile();
-       }
+       return false;
     }
-
-    private static class _isHidden implements Predicate
-    {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.isHidden();
-       }
-    }
-
-    private static class _exists implements Predicate
-    {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.exists();
-       }
-    }
-
-    private static class _canwrite implements Predicate
-    {
-       public boolean decide(String n, ScriptInstance i, Stack l)
-       {
-          File a = BridgeUtilities.getFile(l);
-          return a.canWrite();
-       }
-    }
 }

Modified: sleep/src/sleep/bridges/io/FileObject.java
===================================================================
--- sleep/src/sleep/bridges/io/FileObject.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/bridges/io/FileObject.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -21,17 +21,17 @@
       {
          if (descriptor.charAt(0) == '>' && descriptor.charAt(1) == '>')
          {
-            file = new File(descriptor.substring(2, descriptor.length()).trim().replace('/', File.separatorChar));
+            file = BridgeUtilities.toSleepFile(descriptor.substring(2, descriptor.length()).trim(), env.getScriptInstance());
             openWrite(new FileOutputStream(file, true));
          }
          else if (descriptor.charAt(0) == '>')
          {
-            file = new File(descriptor.substring(1, descriptor.length()).trim().replace('/', File.separatorChar));
+            file = BridgeUtilities.toSleepFile(descriptor.substring(1, descriptor.length()).trim(), env.getScriptInstance());
             openWrite(new FileOutputStream(file, false));
          }
          else
          {
-            file = new File(descriptor.replace('/', File.separatorChar));
+            file = BridgeUtilities.toSleepFile(descriptor, env.getScriptInstance());
             openRead(new FileInputStream(file));
          }
       }

Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2008-05-08 16:45:00 UTC (rev 351)
@@ -229,6 +229,28 @@
        strace.add(0, stat);
     }
 
+    /** return the current working directory value associated with this script. */
+    public File cwd()
+    {
+       if (!getMetadata().containsKey("__CWD__"))
+       {
+          chdir(null);
+       }
+
+       return (File)getMetadata().get("__CWD__");
+    }
+
+    /** sets the current working directory value for this script */
+    public void chdir(File f)
+    {
+       if (f == null)
+       {
+           f = new File("");
+       }
+
+       getMetadata().put("__CWD__", f.getAbsoluteFile());
+    }
+
     /** Records a stack frame into this environments stack trace tracker thingie. */
     public void recordStackFrame(String description, int lineNumber)
     {

Modified: sleep/tests/callccfork.sl
===================================================================
--- sleep/tests/callccfork.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/callccfork.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -18,5 +18,5 @@
 global('$handle $value');
 
 $handle = fork(&func);
-$value  = wait($handle);
+$value  = wait($handle, 5000);
 println($value);

Added: sleep/tests/chdir.sl
===================================================================
--- sleep/tests/chdir.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/chdir.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -0,0 +1,13 @@
+#
+
+chdir("data");
+printAll(ls());
+
+chdir("../data2");
+
+if (!-exists "test.pl")
+{
+   println("So far so good...");
+}
+
+printAll(`ls -1`);

Modified: sleep/tests/dataio.sl
===================================================================
--- sleep/tests/dataio.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/dataio.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -31,7 +31,7 @@
 
 sleep(2000);
 
-fork({
+wait(fork({
   local('$data $z');
 
 #  $handle = connect("127.0.0.1", 8888);
@@ -46,4 +46,4 @@
   println("Read in $z bytes");
 
   closef($handle);
-}, $handle => $src);
+}, $handle => $src), 5000);

Modified: sleep/tests/forkof.sl
===================================================================
--- sleep/tests/forkof.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/forkof.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -2,6 +2,6 @@
 # 
 #
 
-fork({
+wait(fork({
   println([Thread currentThread]);
-});
+}), 5000);

Modified: sleep/tests/forkshare.sl
===================================================================
--- sleep/tests/forkshare.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/forkshare.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -4,7 +4,7 @@
 
 $counter = 90;
 
-fork({
+$a = fork({
   while ($counter < 100)
   {
      $counter++;
@@ -14,7 +14,7 @@
 
 }, \$counter);
 
-fork({
+$b = fork({
   sleep(500); # I hate time kludges...
 
   while ($counter < 100)
@@ -24,3 +24,6 @@
      [Thread yield];
   }
 }, \$counter);
+
+wait($a);
+wait($b);

Modified: sleep/tests/megaio.sl
===================================================================
--- sleep/tests/megaio.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/megaio.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -37,7 +37,7 @@
 
 sleep(2000);
 
-fork({
+wait(fork({
   local('$data $z');
 
   while $data (readb($handle, 603))
@@ -49,4 +49,4 @@
   println("Read in $z bytes");
 
   closef($handle);
-}, $handle => $src);
+}, $handle => $src), 5000);

Modified: sleep/tests/output/callccfork.sl
===================================================================
--- sleep/tests/output/callccfork.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/callccfork.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -4,7 +4,7 @@
 Inside of callcc function
 Trace: &println('Inside of callcc function') at callccfork.sl:12
 Trace: [&closure[callccfork.sl:12-13]#3 CALLCC: &closure[callccfork.sl:9-15]#2] = 'pHEAR' at callccfork.sl:10
-Trace: &fork(&closure[callccfork.sl:9-15]#1) = sleep.bridges.io.IOObject at 7a4489 at callccfork.sl:20
-Trace: &wait(sleep.bridges.io.IOObject at 7a4489) = 'pHEAR' at callccfork.sl:21
+Trace: &fork(&closure[callccfork.sl:9-15]#1) = sleep.bridges.io.IOObject at dec8b3 at callccfork.sl:20
+Trace: &wait(sleep.bridges.io.IOObject at dec8b3, 5000) = 'pHEAR' at callccfork.sl:21
 pHEAR
 Trace: &println('pHEAR') at callccfork.sl:22

Modified: sleep/tests/output/cast.sl
===================================================================
--- sleep/tests/output/cast.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/cast.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,2 +1,2 @@
-[Ljava.lang.CharSequence;@716cb7 class [Ljava.lang.CharSequence;
-[Ljava.util.List;@d4d66b class [Ljava.util.List;
+[Ljava.lang.CharSequence;@264eab class [Ljava.lang.CharSequence;
+[Ljava.util.List;@8f7386 class [Ljava.util.List;

Added: sleep/tests/output/chdir.sl
===================================================================
--- sleep/tests/output/chdir.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/chdir.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -0,0 +1,10 @@
+/Users/raffi/sleepdev/sleep/tests/data/.svn
+/Users/raffi/sleepdev/sleep/tests/data/build.xml
+/Users/raffi/sleepdev/sleep/tests/data/readme.txt
+/Users/raffi/sleepdev/sleep/tests/data/scripts.jar
+/Users/raffi/sleepdev/sleep/tests/data/src
+/Users/raffi/sleepdev/sleep/tests/data/test.jar
+So far so good...
+build.xml
+src
+test.jar

Modified: sleep/tests/output/convertds3.sl
===================================================================
--- sleep/tests/output/convertds3.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/convertds3.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -32,9 +32,9 @@
 int[] a
 Collection a
 Collection a
-Warning: there is no method that matches mar([Z at 8e261d) in sleep.ArrayTest1 at convertds3.sl:36
-Warning: there is no method that matches mar([F at 684706) in sleep.ArrayTest1 at convertds3.sl:37
-Warning: there is no method that matches mar([Ljava.lang.Object;@efd7c) in sleep.ArrayTest1 at convertds3.sl:38
+Warning: there is no method that matches mar([Z at ce16ad) in sleep.ArrayTest1 at convertds3.sl:36
+Warning: there is no method that matches mar([F at 32bd65) in sleep.ArrayTest1 at convertds3.sl:37
+Warning: there is no method that matches mar([Ljava.lang.Object;@30633a) in sleep.ArrayTest1 at convertds3.sl:38
 int[] a
 Collection a
 Collection a

Modified: sleep/tests/output/debugce.sl
===================================================================
--- sleep/tests/output/debugce.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/debugce.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,3 +1,3 @@
 Warning: checkError(): YourCodeSucksException: 2 error(s): Mismatched Parentheses - missing close paren at 1; Runaway string at 1 at debugce.sl:5
-Warning: checkError(): java.io.FileNotFoundException: fjasjkfajskfjasfjksakjfsjkfjksafjk.txt (No such file or directory) at debugce.sl:9
+Warning: checkError(): java.io.FileNotFoundException: /Users/raffi/sleepdev/sleep/tests/fjasjkfajskfjasfjksakjfsjkfjksafjk.txt (No such file or directory) at debugce.sl:9
 I should be doing more stuff here...

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/forker.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,4 +1,4 @@
+Trace: &fork(&closure[forker.sl:9]#X) = sleep.bridges.io.IOObject@###### at forker.sl:8
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at f1f051 at forker.sl:8
 Trace: &sleep(1000) at forker.sl:12
 Trace: &check('outside of fork') at forker.sl:14

Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/include.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -11,4 +11,4 @@
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
 Warning: checkError(): YourCodeSucksException: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24
-Warning: checkError(): java.io.IOException: unable to locate scripts/does_not_exist.sl from: data/scripts.jar at include.sl:27
+Warning: checkError(): java.io.IOException: unable to locate scripts/does_not_exist.sl from: ==CWD==tests/data/scripts.jar at include.sl:27

Added: sleep/tests/output/readb2.sl
===================================================================
--- sleep/tests/output/readb2.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/readb2.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -0,0 +1,8 @@
+150 vs. 150
+$handle = openf("readb2.sl");
+println(available($handle) . " vs. " . lof("readb2.sl"));
+$data = readb($handle, -1);
+closef($handle);
+
+println($data);
+

Modified: sleep/tests/output/scalar.sl
===================================================================
--- sleep/tests/output/scalar.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/scalar.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,4 +1,4 @@
 3
 6.4567
-[B at d0220c and class [B
+[B at 2e323 and class [B
 this is a test and class java.lang.String

Modified: sleep/tests/output/taint7.sl
===================================================================
--- sleep/tests/output/taint7.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/taint7.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,4 +1,4 @@
 Warning: tainted value: '2 + 2' from: @('2 + 2') at taint7.sl:3
 Warning: tainted value: 'Hello 2 + 2' from: '2 + 2' at taint7.sl:4
-Warning: tainted object: java.io.PrintStream at 7aece8 from: 'Hello 2 + 2' at taint7.sl:4
+Warning: tainted object: java.io.PrintStream at 1db5ec from: 'Hello 2 + 2' at taint7.sl:4
 Hello 2 + 2

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/trace.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at 6ed322 println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 2ab653 println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at 6ed322 println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 2ab653 println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at 6ed322 println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 2ab653 println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/tests/output/warn2.sl
===================================================================
--- sleep/tests/output/warn2.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/warn2.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,2 +1,2 @@
-Warning: Couldn't open file: java.io.FileNotFoundException: jdfjsjkfjksfjksafjk (No such file or directory) at warn2.sl:15
+Warning: Couldn't open file: java.io.FileNotFoundException: /Users/raffi/sleepdev/sleep/tests/jdfjsjkfjksfjksafjk (No such file or directory) at warn2.sl:15
 This is me acting really kewlios

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/output/wrong.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at 884a40 println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at 8f7386 println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at 884a40 println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at 8f7386 println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at 884a40 println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at 8f7386 println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at 884a40 println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at 8f7386 println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at 884a40 println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at 8f7386 println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at 884a40 println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at 8f7386 println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at 884a40 println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at 8f7386 println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at 884a40 println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at 8f7386 println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at 884a40 println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at 8f7386 println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at 884a40 println: test] at wrong.sl:31
-Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at caf6c1 at wrong.sl:34
+Trace: [java.io.PrintStream at 8f7386 println: test] at wrong.sl:31
+Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 8ae45a at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at 884a40 println: [C at caf6c1] at wrong.sl:34
+Trace: [java.io.PrintStream at 8f7386 println: [C at 8ae45a] at wrong.sl:34

Added: sleep/tests/readb2.sl
===================================================================
--- sleep/tests/readb2.sl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/readb2.sl	2008-05-08 16:45:00 UTC (rev 351)
@@ -0,0 +1,6 @@
+$handle = openf("readb2.sl");
+println(available($handle) . " vs. " . lof("readb2.sl"));
+$data = readb($handle, -1);
+closef($handle);
+
+println($data);

Modified: sleep/tests/test.pl
===================================================================
--- sleep/tests/test.pl	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/tests/test.pl	2008-05-08 16:45:00 UTC (rev 351)
@@ -50,6 +50,8 @@
             print "\njava $PROPS -jar ../sleep.jar ./$var\n";
             print "\n".$script_value."\n";
          }
+
+         print "$var -- broken!\n";
       }  
       else
       {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-04-30 04:20:44 UTC (rev 350)
+++ sleep/whatsnew.txt	2008-05-08 16:45:00 UTC (rev 351)
@@ -1,3 +1,19 @@
+2.1-beta 25  (8 May 08) [will this beta process ever end?]
+===========
+- added &chdir() to change the current working directory of the
+  active script instance.  This value is inherited by (but not
+  shared) fork().  All I/O and File System bridge functions that
+  manipulate files (including exec) utilize the current working
+  directory.  Use &cwd() to obtain the current working 
+  directory value.
+- -1 specified to &readb will attempt to read in all of the 
+  bytes currently available for reading.  This is most useful
+  for grabbing the contents of a file easily.
+- I/O functions are now smarter about checking their arguments.
+- replaced test.pl regression tester with a Sleep version.
+  The Sleep version is much faster and it is forgiving of 
+  address and installation path differences.  
+
 2.1-beta 24  (30 Apr 08)
 ===========
 - refactored Parser/CodeGenerator to use a factory pattern for



From rsmudge at mail.berlios.de  Thu May  8 21:00:48 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 21:00:48 +0200
Subject: [Sleep-svn] r352 - in sleep: . src/sleep/bridges
	src/sleep/bridges/io tests tests/output
Message-ID: <200805081900.m48J0mDN002059@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 21:00:43 +0200 (Thu, 08 May 2008)
New Revision: 352

Added:
   sleep/tests/output/readb3.sl
   sleep/tests/readb3.sl
Modified:
   sleep/runtests.sl
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/io/IOObject.java
   sleep/whatsnew.txt
Log:
some changes to readb to make it more elite.



Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/runtests.sl	2008-05-08 19:00:43 UTC (rev 352)
@@ -31,18 +31,22 @@
 
 sub runScript
 {
-   local('@args $value $handle $read');
+   local('@args $value $handle $read $exception');
    @args = split(' ', $1);
    push(@args, "2 + 2");
 
-   $handle = exec(@args, $null, cwd());
-   while $read (readb($handle, 1))
+   try
    {
-      $value .= $read;
+      $handle = exec(@args, $null, cwd());
+      $value = readb($handle, -1);
+
+      closef($handle);
    }
+   catch $exception
+   {
+      println("&runScript: " . @_ . " - $exception");
+   }
 
-   closef($handle);
-
    return $value;
 }
 
@@ -137,7 +141,7 @@
       else
       {
          print("  X ");
-         $value = runScript(%special[$script]);
+         $value = runScript(iff(%special[$script] is $null, $script, %special[$script]));
       }
 
       if (!-exists "output/ $+ $script")

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-05-08 19:00:43 UTC (rev 352)
@@ -1284,43 +1284,63 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-          IOObject         a = chooseSource(l, 2, i);
-          int             to = BridgeUtilities.getInt(l, 1);
-          int           last = 0;
+          IOObject           a = chooseSource(l, 2, i);
+          int               to = BridgeUtilities.getInt(l, 1);
+          int             last = 0;
+          byte[]          temp = null;
+          StringBuffer  buffer = null;
 
           if (a.getReader() != null)
           {
-             byte[] temp = to > -1 ? a.getBuffer(to) : new byte[0];
-   
              int read = 0;
 
              try
              {
                 if (to == -1)
                 {
-                   to = a.getInputStream().available();
-                   temp = a.getBuffer(to);
+                   buffer = new StringBuffer(BridgeUtilities.getInt(l, 2048));
+
+                   while (true)
+                   { 
+                      last = a.getReader().read();
+
+                      if (last == -1)
+                         break;
+
+                      char append = (char)(last & 0xFF);
+                      buffer.append(append);      
+       
+                      read++; 
+                   }
                 }
-
-                while (read < to)
+                else
                 {
-                   last = a.getReader().read(temp, read, to - read);
+                   temp = new byte[to];
 
-                   if (last == -1) { break; }
-                   read += last;
-                } 
+                   while (read < to)
+                   {
+                      last = a.getReader().read(temp, read, to - read);
+
+                      if (last == -1) { break; }
+                      read += last;
+                   } 
+                }
              }
              catch (Exception ex)
              {
                 a.close();
-                i.getScriptEnvironment().flagError(ex);
 
-                ex.printStackTrace();
+                if (to != -1)
+                   i.getScriptEnvironment().flagError(ex);
              }
 
              if (read > 0)
              {
-                return SleepUtils.getScalar(temp, read);
+                if (temp != null)
+                   return SleepUtils.getScalar(temp, read);
+
+                if (buffer != null)
+                   return SleepUtils.getScalar(buffer.toString());
              }
           }
           return SleepUtils.getEmptyScalar();
@@ -1338,7 +1358,7 @@
 
           if (a.getReader() != null)
           {
-             byte[] temp = a.getBuffer(size);
+             byte[] temp = new byte[size];
   
              int read = 0;
  

Modified: sleep/src/sleep/bridges/io/IOObject.java
===================================================================
--- sleep/src/sleep/bridges/io/IOObject.java	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/src/sleep/bridges/io/IOObject.java	2008-05-08 19:00:43 UTC (rev 352)
@@ -40,18 +40,6 @@
    protected Thread           thread  = null;
    protected Scalar           token   = null;
 
-   protected byte[]           buffer  = null;
-
-   public byte[] getBuffer(int size)
-   {
-      if (buffer == null || size > buffer.length)
-      {
-         buffer = new byte[size];
-      }
-
-      return buffer;
-   }
-
    /** return the actual source of this IO for scripters to query using HOES */
    public Object getSource()
    {
@@ -164,7 +152,7 @@
       
       if (in != null)
       {
-         reader  = new BufferedInputStream(in);
+         reader  = new BufferedInputStream(in, 8192);
          readerb = new DataInputStream(reader);
          readeru = new InputStreamReader(readerb);
       }
@@ -214,8 +202,6 @@
 
          if (out != null)
            out.close();
-
-         buffer = null;
       }
       catch (Exception ex)
       {

Added: sleep/tests/output/readb3.sl
===================================================================
--- sleep/tests/output/readb3.sl	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/tests/output/readb3.sl	2008-05-08 19:00:43 UTC (rev 352)
@@ -0,0 +1 @@
+Read 1000 bytes

Added: sleep/tests/readb3.sl
===================================================================
--- sleep/tests/readb3.sl	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/tests/readb3.sl	2008-05-08 19:00:43 UTC (rev 352)
@@ -0,0 +1,13 @@
+debug(3);
+
+$handle = fork({
+   for ($x = 0; $x < 1000; $x++)
+   {
+      writeb($source, ".");
+   }
+});
+
+$data = readb($handle, -1);
+$count = strlen($data);
+
+println("Read $count bytes");

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-08 16:45:00 UTC (rev 351)
+++ sleep/whatsnew.txt	2008-05-08 19:00:43 UTC (rev 352)
@@ -1,14 +1,12 @@
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========
 - added &chdir() to change the current working directory of the
-  active script instance.  This value is inherited by (but not
-  shared) fork().  All I/O and File System bridge functions that
-  manipulate files (including exec) utilize the current working
-  directory.  Use &cwd() to obtain the current working 
-  directory value.
-- -1 specified to &readb will attempt to read in all of the 
-  bytes currently available for reading.  This is most useful
-  for grabbing the contents of a file easily.
+  active script instance.  This value is inherited by fork().  
+  All I/O and File System bridge functions that manipulate files 
+  (including exec) utilize the current working directory.  Use 
+  &cwd() to obtain the current working directory value.
+- &readb($handle, -1) will attempt to read all bytes from the 
+  specified handle.  
 - I/O functions are now smarter about checking their arguments.
 - replaced test.pl regression tester with a Sleep version.
   The Sleep version is much faster and it is forgiving of 



From rsmudge at mail.berlios.de  Thu May  8 22:16:29 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 22:16:29 +0200
Subject: [Sleep-svn] r353 - in sleep: . src/sleep/bridges
	src/sleep/engine/atoms src/sleep/taint tests tests/output
Message-ID: <200805082016.m48KGTa7007923@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 22:16:28 +0200 (Thu, 08 May 2008)
New Revision: 353

Added:
   sleep/src/sleep/taint/TaintArray.java
   sleep/src/sleep/taint/TaintHash.java
   sleep/tests/fe_ohash.sl
   sleep/tests/output/fe_ohash.sl
   sleep/tests/output/setField2.sl
   sleep/tests/output/taint10.sl
   sleep/tests/setField2.sl
   sleep/tests/taint10.sl
Modified:
   sleep/runtests.sl
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/atoms/Iterate.java
   sleep/src/sleep/taint/TaintUtils.java
   sleep/tests/forker.sl
   sleep/tests/output/forker.sl
   sleep/whatsnew.txt
Log:
some changes to foreach and implemented taint wrappers for read-only arrays and hashes


Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/runtests.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -108,7 +108,7 @@
    chdir("tests");
 
    # some special scripts that require command line execution to test out some stuff...
-   for ($x = 0; $x < 10; $x++)
+   for ($x = 0; $x < 11; $x++)
    {
       %special["taint $+ $x $+ .sl"]  = "java -Dsleep.taint=true -jar ../sleep.jar taint $+ $x $+ .sl";
    }
@@ -141,7 +141,7 @@
       else
       {
          print("  X ");
-         $value = runScript(iff(%special[$script] is $null, $script, %special[$script]));
+         $value = runScript(iff(%special[$script] is $null, "java -jar ../sleep.jar $script", %special[$script]));
       }
 
       if (!-exists "output/ $+ $script")

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-08 20:16:28 UTC (rev 353)
@@ -825,7 +825,7 @@
           }
           else
           {
-             sleep.engine.atoms.Iterate.IteratorData d = (sleep.engine.atoms.Iterate.IteratorData)iterators.peek();
+             sleep.engine.atoms.Iterate.IteratorData d = (sleep.engine.atoms.Iterate.IteratorData)iterators.peek();  
              d.iterator.remove();
              d.count = d.count - 1;
              return d.source;

Modified: sleep/src/sleep/engine/atoms/Iterate.java
===================================================================
--- sleep/src/sleep/engine/atoms/Iterate.java	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/src/sleep/engine/atoms/Iterate.java	2008-05-08 20:16:28 UTC (rev 353)
@@ -115,7 +115,7 @@
       //
       if (data.source.getHash() != null)
       {
-         data.iterator = data.source.getHash().keys().scalarIterator();
+         data.iterator = data.source.getHash().getData().entrySet().iterator();
       }
       else if (data.source.getArray() != null)
       {
@@ -150,11 +150,8 @@
       Stack iterators   = (Stack)(e.getContextMetadata("iterators"));
       IteratorData data = (IteratorData)(iterators.peek());
 
-      Scalar next       = null;
-
       if (data.iterator != null && data.iterator.hasNext())
       {
-         next = (Scalar)(data.iterator.next());
          e.getCurrentFrame().push(SleepUtils.getScalar(true));
       }
       else
@@ -163,22 +160,31 @@
          return;
       }
 
-      if (data.key != null)
+      Object next = data.iterator.next();
+
+      if (data.source.getHash() != null)
       {
-         if (data.source.getHash() != null)
-         {
-            data.kenv.putScalar(data.key, next);
-            data.venv.putScalar(data.value, data.source.getHash().getAt(next));
+         if (data.key != null)
+         {  
+            data.kenv.putScalar(data.key, SleepUtils.getScalar(((Map.Entry)next).getKey()));
+            data.venv.putScalar(data.value, (Scalar)((Map.Entry)next).getValue());
          }
          else
          {
-            data.kenv.putScalar(data.key, SleepUtils.getScalar(data.count));
-            data.venv.putScalar(data.value, next);
+            data.venv.putScalar(data.value, SleepUtils.getScalar(((Map.Entry)next).getKey()));
          }
       }
       else
       {
-         data.venv.putScalar(data.value, next);
+         if (data.key != null)
+         {
+            data.kenv.putScalar(data.key, SleepUtils.getScalar(data.count));
+            data.venv.putScalar(data.value, (Scalar)next);
+         }
+         else
+         {
+            data.venv.putScalar(data.value, (Scalar)next);
+         }
       }
 
       data.count++;

Added: sleep/src/sleep/taint/TaintArray.java
===================================================================
--- sleep/src/sleep/taint/TaintArray.java	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/src/sleep/taint/TaintArray.java	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,91 @@
+package sleep.taint;
+
+import sleep.runtime.*;
+import java.util.*;
+import sleep.engine.ObjectUtilities;
+
+/** Used to wrap read-only arrays so values are only converted on an as-needed basis */
+public class TaintArray implements ScalarArray
+{
+   protected ScalarArray source;
+
+   public TaintArray(ScalarArray src)
+   {
+      source = src;;
+   }
+
+   public String toString()
+   {
+      return source.toString();
+   }
+
+   public Scalar pop()
+   {
+      return TaintUtils.taintAll(source.pop());
+   }
+
+   public void sort(Comparator compare)
+   {
+      source.sort(compare);
+   }
+
+   public Scalar push(Scalar value)
+   {
+      return TaintUtils.taintAll(source.push(value));
+   }
+
+   public int size()
+   {
+      return source.size();
+   }
+
+   public Scalar remove(int index)
+   {
+      return TaintUtils.taintAll(source.remove(index));
+   }
+
+   public Scalar getAt(int index)
+   {
+      return TaintUtils.taintAll(source.getAt(index));
+   }
+
+   public Iterator scalarIterator()
+   {
+      return new TaintIterator(source.scalarIterator());
+   }
+
+   public Scalar add(Scalar value, int index)
+   {
+      return TaintUtils.taintAll(source.add(value, index));
+   }
+
+   public void remove(Scalar value)
+   {
+      source.remove(value);
+   }
+
+   protected class TaintIterator implements Iterator
+   {
+      protected Iterator realIterator;
+
+      public TaintIterator(Iterator iter)
+      {
+         realIterator = iter;
+      }
+
+      public boolean hasNext()
+      {
+         return realIterator.hasNext(); 
+      }
+
+      public Object next()
+      {
+         return TaintUtils.taintAll((Scalar)realIterator.next());
+      }
+
+      public void remove()
+      {
+         realIterator.remove();
+      }
+   }
+}

Added: sleep/src/sleep/taint/TaintHash.java
===================================================================
--- sleep/src/sleep/taint/TaintHash.java	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/src/sleep/taint/TaintHash.java	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,55 @@
+package sleep.taint;
+
+import sleep.runtime.*;
+import java.util.*;
+import sleep.engine.ObjectUtilities;
+
+/** This class is used to wrap read-only hashes */
+public class TaintHash implements ScalarHash
+{
+   protected ScalarHash source;
+
+   public TaintHash(ScalarHash src)
+   {
+      source = src;
+   }
+
+   public Scalar getAt(Scalar key)
+   {
+      return TaintUtils.taintAll(source.getAt(key));
+   }
+
+   /** this operation is kind of expensive... should be fixed up to take care of that */
+   public ScalarArray keys()
+   {
+      return source.keys();
+   }
+
+   public void remove(Scalar key)
+   {
+      source.remove(key);
+   }
+
+   public Map getData()
+   {
+      Map temp = source.getData();
+
+      Iterator i = temp.entrySet().iterator();
+      while (i.hasNext())
+      {
+         Map.Entry next = (Map.Entry)i.next();
+
+         if (next.getValue() != null && next.getKey() != null)
+         {
+            next.setValue(TaintUtils.taintAll((Scalar)next.getValue())); 
+         }
+      } 
+
+      return temp;
+   }
+
+   public String toString()
+   {
+      return source.toString();
+   }
+}

Modified: sleep/src/sleep/taint/TaintUtils.java
===================================================================
--- sleep/src/sleep/taint/TaintUtils.java	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/src/sleep/taint/TaintUtils.java	2008-05-08 20:16:28 UTC (rev 353)
@@ -71,17 +71,25 @@
        return value;
     }
 
-    /** taints the specified scalar.  recurses on hashes and arrays.  returns the original container.  If tainting is disabled the original bridge is returned. */
+    /** taints the specified scalar (bridge writers should call this on their scalars).  recurses on hashes and arrays.  returns the original container.  If tainting is disabled the original bridge is returned. not safe for circular data structures. */
     public static Scalar taintAll(Scalar value)
     {
-       if (value.getArray() != null)
+       if (value.getArray() != null && value.getArray().getClass() == CollectionWrapper.class)
        {
+          value.setValue(new TaintArray(value.getArray()));
+       }
+       else if (value.getArray() != null)
+       {
           Iterator i = value.getArray().scalarIterator();
           while (i.hasNext())
           {
              taintAll((Scalar)i.next());
           }
        }
+       else if (value.getHash() != null && value.getHash().getClass() == MapWrapper.class)
+       {
+          value.setValue(new TaintHash(value.getHash()));
+       }
        else if (value.getHash() != null)
        {
           Iterator i = value.getHash().getData().entrySet().iterator();

Added: sleep/tests/fe_ohash.sl
===================================================================
--- sleep/tests/fe_ohash.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/fe_ohash.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,14 @@
+%data = ohasha(a => "apple", b => "bat", c => "cat", d => "dog");
+
+println(%data["c"]);
+
+foreach $key => $value (%data)
+{
+   println("$key and $value");
+   if ($key eq "b")
+   {
+      remove();
+   }
+}
+
+println(%data);

Modified: sleep/tests/forker.sl
===================================================================
--- sleep/tests/forker.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/forker.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -5,10 +5,9 @@
 
 debug(15);
 
-fork({
+wait(fork({
+   sleep(1000);
    check("within fork");
-});
+}), 5000);
 
-sleep(1000);
-
 check("outside of fork");

Added: sleep/tests/output/fe_ohash.sl
===================================================================
--- sleep/tests/output/fe_ohash.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/output/fe_ohash.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,6 @@
+cat
+a and apple
+b and bat
+d and dog
+c and cat
+%(a => 'apple', d => 'dog', c => 'cat')

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/output/forker.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -1,4 +1,5 @@
-Trace: &fork(&closure[forker.sl:9]#X) = sleep.bridges.io.IOObject@###### at forker.sl:8
-Trace: &check('within fork') at forker.sl:9
-Trace: &sleep(1000) at forker.sl:12
-Trace: &check('outside of fork') at forker.sl:14
+Trace: &fork(&closure[forker.sl:9-10]#2) = sleep.bridges.io.IOObject at d5eb7 at forker.sl:8
+Trace: &sleep(1000) at forker.sl:9
+Trace: &check('within fork') at forker.sl:10
+Trace: &wait(sleep.bridges.io.IOObject at d5eb7, 5000) at forker.sl:8
+Trace: &check('outside of fork') at forker.sl:13

Added: sleep/tests/output/setField2.sl
===================================================================
--- sleep/tests/output/setField2.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/output/setField2.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1 @@
+java.awt.Point[x=33,y=45]

Added: sleep/tests/output/taint10.sl
===================================================================
--- sleep/tests/output/taint10.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/output/taint10.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,25 @@
+before expr: a
+Warning: tainted value: 'after  expr: a' from: 'a' at taint10.sl:16
+after  expr: a
+Warning: tainted value: '... a :)' from: 'a' at taint10.sl:20
+... a :)
+Warning: tainted value: '... b :)' from: 'b' at taint10.sl:20
+... b :)
+Warning: tainted value: '... c :)' from: 'c' at taint10.sl:20
+... c :)
+Warning: tainted value: '... d :)' from: 'd' at taint10.sl:20
+... d :)
+Warning: tainted value: '... e :)' from: 'e' at taint10.sl:20
+... e :)
+Before: apple
+Warning: tainted value: 'After: cat' from: 'cat' at taint10.sl:34
+After: cat
+>>> a - should be ok
+Warning: tainted value: '... apple :)' from: 'apple' at taint10.sl:39
+... apple :)
+>>> c - should be ok
+Warning: tainted value: '... cat :)' from: 'cat' at taint10.sl:39
+... cat :)
+>>> b - should be ok
+Warning: tainted value: '... barracuda :)' from: 'barracuda' at taint10.sl:39
+... barracuda :)

Added: sleep/tests/setField2.sl
===================================================================
--- sleep/tests/setField2.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/setField2.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,5 @@
+import java.awt.Point;
+
+$p = [new Point];
+setField($p, x => 33, y => 45);
+println($p);

Added: sleep/tests/taint10.sl
===================================================================
--- sleep/tests/taint10.sl	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/tests/taint10.sl	2008-05-08 20:16:28 UTC (rev 353)
@@ -0,0 +1,40 @@
+#
+# invasion of the wrappers :)
+#
+
+debug(7 | 128);
+
+# array fun
+global('$list $ds $var');
+
+$list = [new LinkedList];
+map(let({ [$list add: $1]; }, \$list), @("a", "b", "c", "d", "e"));
+
+$ds = [SleepUtils getArrayWrapper: $list];
+println("before expr: $ds[0]");
+taint($ds);
+println("after  expr: $ds[0]");
+
+foreach $var ($ds)
+{
+   println("... $var :)");
+}
+
+# hash fun
+global('$key $map');
+
+$map = [new HashMap];
+[$map put: "a", "apple"];
+[$map put: "b", "barracuda"];
+[$map put: "c", "cat"];
+
+$ds = [SleepUtils getHashWrapper: $map];
+println("Before: " . $ds["a"]);
+taint($ds);
+println("After: " . $ds["c"]);
+
+foreach $key => $var ($ds)
+{
+   println(">>> $key - should be ok");
+   println("... $var :)");
+}

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-08 19:00:43 UTC (rev 352)
+++ sleep/whatsnew.txt	2008-05-08 20:16:28 UTC (rev 353)
@@ -11,6 +11,12 @@
 - replaced test.pl regression tester with a Sleep version.
   The Sleep version is much faster and it is forgiving of 
   address and installation path differences.  
+- implemented taint wrappers for the Map->Hash and Collection to
+  Array wrappers obtain with SleepUtils.  The TaintUtils.taintAll
+  method is intelligent enough to employ these against wrapped
+  data structures when necessary.
+- changed implementation of foreach to more efficiently iterate
+  over hashes.  remove() w/i a foreach loop now works with hashes.
 
 2.1-beta 24  (30 Apr 08)
 ===========



From rsmudge at mail.berlios.de  Thu May  8 23:33:21 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 23:33:21 +0200
Subject: [Sleep-svn] r355 - in sleep: . docs src/sleep/runtime tests
	tests/output
Message-ID: <200805082133.m48LXLOP017963@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 23:33:20 +0200 (Thu, 08 May 2008)
New Revision: 355

Added:
   sleep/docs/sleepmanual.url
   sleep/tests/output/tracebr.sl
   sleep/tests/tracebr.sl
Modified:
   sleep/readme.txt
   sleep/src/sleep/runtime/SleepUtils.java
Log:
..


Added: sleep/docs/sleepmanual.url
===================================================================
--- sleep/docs/sleepmanual.url	2008-05-08 21:14:07 UTC (rev 354)
+++ sleep/docs/sleepmanual.url	2008-05-08 21:33:20 UTC (rev 355)
@@ -0,0 +1,2 @@
+[InternetShortcut]
+URL=http://sleep.dashnine.org/manual

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-05-08 21:14:07 UTC (rev 354)
+++ sleep/readme.txt	2008-05-08 21:33:20 UTC (rev 355)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 24 - README   
+Sleep - 2.1 beta 25 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is
@@ -21,7 +21,6 @@
 and stabilized.  
 
 Sleep Project Homepage: http://sleep.dashnine.org/
-                        http://sleep.hick.org/      (mirror)
 
  ------- -------------------- ---------   ---------------  ------- ---------
 Documentation
@@ -32,11 +31,9 @@
 
 Contained in the docs/ directory:
 
-sleeplang.htm
-   A tutorial on the sleep language from an end-users perspective.  Covers
-   the basic language constructs, built in functions, and relevant 
-   background information.  Fun for the whole family.  Now in its 6th 
-   revision. 
+sleepmanual.url
+   The Sleep 2.1 Manual is both a tutorial and reference for the Sleep language.
+   The manual is available at http://sleep.dashnine.org/manual/
 
 sleepguide.htm
    This document is a guide to integrating the sleep language into your

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-08 21:14:07 UTC (rev 354)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-08 21:33:20 UTC (rev 355)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080430;
+   public static final int    SLEEP_RELEASE = 20080508;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Added: sleep/tests/output/tracebr.sl
===================================================================
--- sleep/tests/output/tracebr.sl	2008-05-08 21:14:07 UTC (rev 354)
+++ sleep/tests/output/tracebr.sl	2008-05-08 21:33:20 UTC (rev 355)
@@ -0,0 +1,6 @@
+Warning: 1 if block at tracebr.sl:7
+Trace: &foo(1) at tracebr.sl:41
+Warning: 2 else-if block at tracebr.sl:24
+Trace: &foo(2) at tracebr.sl:42
+Warning: 3 else block at tracebr.sl:37
+Trace: &foo(3) at tracebr.sl:43

Added: sleep/tests/tracebr.sl
===================================================================
--- sleep/tests/tracebr.sl	2008-05-08 21:14:07 UTC (rev 354)
+++ sleep/tests/tracebr.sl	2008-05-08 21:33:20 UTC (rev 355)
@@ -0,0 +1,44 @@
+debug(15);
+
+sub foo
+{
+   if ($1 == 1)
+   {
+      warn("$1 if block");
+   } 
+
+
+   else 
+
+
+
+
+
+
+
+
+
+
+   if ($1 == 2)
+   {
+      warn("$1 else-if block");
+   }   
+
+
+
+
+
+
+
+
+
+   else
+   {
+      warn("$1 else block");
+   }
+}
+
+foo(1);
+foo(2);
+foo(3);
+



From rsmudge at mail.berlios.de  Thu May  8 23:35:23 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 23:35:23 +0200
Subject: [Sleep-svn] r356 - sleep
Message-ID: <200805082135.m48LZNN8018062@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 23:35:22 +0200 (Thu, 08 May 2008)
New Revision: 356

Modified:
   sleep/build.xml
Log:
..


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-08 21:33:20 UTC (rev 355)
+++ sleep/build.xml	2008-05-08 21:35:22 UTC (rev 356)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"



From rsmudge at mail.berlios.de  Thu May  8 23:49:53 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 23:49:53 +0200
Subject: [Sleep-svn] r357 - in sleep/tests: . output
Message-ID: <200805082149.m48Lnref019485@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 23:49:52 +0200 (Thu, 08 May 2008)
New Revision: 357

Modified:
   sleep/tests/chdir.sl
   sleep/tests/output/chdir.sl
Log:
..


Modified: sleep/tests/chdir.sl
===================================================================
--- sleep/tests/chdir.sl	2008-05-08 21:35:22 UTC (rev 356)
+++ sleep/tests/chdir.sl	2008-05-08 21:49:52 UTC (rev 357)
@@ -1,7 +1,7 @@
 #
 
 chdir("data");
-printAll(ls());
+printAll(filter({ return iff("*.svn" !iswm $1, $1); }, ls()));
 
 chdir("../data2");
 

Modified: sleep/tests/output/chdir.sl
===================================================================
--- sleep/tests/output/chdir.sl	2008-05-08 21:35:22 UTC (rev 356)
+++ sleep/tests/output/chdir.sl	2008-05-08 21:49:52 UTC (rev 357)
@@ -1,4 +1,3 @@
-/Users/raffi/sleepdev/sleep/tests/data/.svn
 /Users/raffi/sleepdev/sleep/tests/data/build.xml
 /Users/raffi/sleepdev/sleep/tests/data/readme.txt
 /Users/raffi/sleepdev/sleep/tests/data/scripts.jar



From rsmudge at mail.berlios.de  Thu May  8 23:52:44 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 23:52:44 +0200
Subject: [Sleep-svn] r358 - sleep
Message-ID: <200805082152.m48LqiIF020029@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 23:52:43 +0200 (Thu, 08 May 2008)
New Revision: 358

Modified:
   sleep/runtests.sl
Log:
..


Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-08 21:49:52 UTC (rev 357)
+++ sleep/runtests.sl	2008-05-08 21:52:43 UTC (rev 358)
@@ -94,7 +94,7 @@
 sub sanitize
 {
    $1 = replace($1, '(\&closure\[.*?\]\#)\d+', '$1X');
-   $1 = replace($1, '/Users/raffi/sleepdev/sleep/', '==CWD==');
+   $1 = replace($1, '/Users/raffi/sleepdev/sleep', '==CWD==');
    $1 = replace($1, getFileParent(cwd()), '==CWD==');
    $1 = replace($1, '([\.\[][a-zA-Z_0-9;]+@)[0-9a-f]{5,6}', '$1######');
    $1 = replace($1, '\$Proxy\d+?', '\$Proxy#');



From rsmudge at mail.berlios.de  Thu May  8 23:57:56 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 May 2008 23:57:56 +0200
Subject: [Sleep-svn] r359 - sleep/tests/output
Message-ID: <200805082157.m48LvuTK020316@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-08 23:57:55 +0200 (Thu, 08 May 2008)
New Revision: 359

Modified:
   sleep/tests/output/include.sl
Log:
..


Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2008-05-08 21:52:43 UTC (rev 358)
+++ sleep/tests/output/include.sl	2008-05-08 21:57:55 UTC (rev 359)
@@ -11,4 +11,4 @@
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
 Warning: checkError(): YourCodeSucksException: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24
-Warning: checkError(): java.io.IOException: unable to locate scripts/does_not_exist.sl from: ==CWD==tests/data/scripts.jar at include.sl:27
+Warning: checkError(): java.io.IOException: unable to locate scripts/does_not_exist.sl from: ==CWD==/tests/data/scripts.jar at include.sl:27



From rsmudge at mail.berlios.de  Tue May 13 01:13:14 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Tue, 13 May 2008 01:13:14 +0200
Subject: [Sleep-svn] r360 - in sleep: . src/sleep/bridges
	src/sleep/engine/types src/sleep/runtime src/sleep/taint
	tests tests/output
Message-ID: <200805122313.m4CNDEj0002341@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-13 01:13:13 +0200 (Tue, 13 May 2008)
New Revision: 360

Added:
   sleep/tests/output/rehash.sl
   sleep/tests/rehash.sl
Modified:
   sleep/build.xml
   sleep/readme.txt
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/types/HashContainer.java
   sleep/src/sleep/engine/types/OrderedHashContainer.java
   sleep/src/sleep/runtime/MapWrapper.java
   sleep/src/sleep/runtime/ScalarHash.java
   sleep/src/sleep/taint/TaintHash.java
   sleep/whatsnew.txt
Log:
some hash stuff...


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/build.xml	2008-05-12 23:13:13 UTC (rev 360)
@@ -1,5 +1,5 @@
 <project name="sleep" default="all" basedir=".">
-  <property name="project.src"   location="src" />
+  <property name="project.src"   location="src/sleep" />
   <property name="project.build" location="bin" />
 
   <property name="project.path"  value="sleep" />
@@ -65,6 +65,7 @@
      <jar destfile="sleep.jar"
           basedir="bin"
           includes="**/*.class">
+<!--         <service type="javax.script.ScriptEngineFactory" provider="org.dashnine.sleep.SleepFactory" /> -->
          <manifest>
            <attribute name="Main-Class" value="sleep.console.TextConsole" />
          </manifest>

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/readme.txt	2008-05-12 23:13:13 UTC (rev 360)
@@ -62,7 +62,7 @@
 Build Instructions
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
-You will need Apache Ant to compile this source code. I use version 1.6.0. 
+You will need Apache Ant to compile this source code. I use version 1.7.0. 
 Ant is easy to install and is available at http://ant.apache.org 
 
 To compile sleep:

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -72,6 +72,7 @@
         temp.put("&%", f_hash);  
 
         // array & hashtable related
+        temp.put("&rehash", this);
         temp.put("&keys",  this);      // &keys(%hash) = @array
         temp.put("&size",  this);      // &size(@array) = <int>
         temp.put("&push",  this);      // &push(@array, $value) = $scalar
@@ -1233,6 +1234,14 @@
 
           return value;
        }
+       else if (n.equals("&rehash"))
+       {
+          if (value.getHash() != null)
+          {
+             value.getHash().rehash(BridgeUtilities.getInt(l, 32), (float)BridgeUtilities.getDouble(l, 0.50));
+             return value;
+          }
+       }
        else if (n.equals("&keys")) // &keys(%hash)
        {
           if (value.getHash() != null)

Modified: sleep/src/sleep/engine/types/HashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/HashContainer.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/engine/types/HashContainer.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -17,6 +17,14 @@
       values = container;
    }
 
+   public void rehash(int capacity, float load)
+   {
+      HashMap temp = new HashMap(capacity, load);
+      temp.putAll(values);
+
+      values = temp;
+   }
+
    /* constructs this hash container backed by a HashMap data structure */
    public HashContainer()
    {

Modified: sleep/src/sleep/engine/types/OrderedHashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -15,17 +15,33 @@
 
    private class OrderedHash extends LinkedHashMap
    {
+      protected boolean ordered;
+
       public OrderedHash(int c, float l, boolean b)
       {
          super(c, l, b);
+         ordered = b;
       }
 
+      public OrderedHash recreate(int capacity, float load)
+      {
+         OrderedHash temp = new OrderedHash(capacity, load, ordered);
+         temp.putAll(this);
+
+         return temp;
+      }
+
       protected boolean removeEldestEntry(Map.Entry eldest)
       {
          return removeEldestEntryCheck(eldest); 
       }
    }
 
+   public void rehash(int capacity, float load)
+   {
+       values = ((OrderedHash)values).recreate(capacity, load);
+   }
+
    /** constructs an ordered hash container based on the specified items */
    public OrderedHashContainer(int capacity, float loadfactor, boolean type)
    {
@@ -106,7 +122,8 @@
 
    public Scalar getAt(Scalar key)
    {
-      Scalar value = (Scalar)values.get(key.getValue().toString());
+      String temp = key.getValue().toString();
+      Scalar value = (Scalar)values.get(temp);
 
       if (missPolicy != null && SleepUtils.isEmptyScalar(value))
       {
@@ -117,14 +134,14 @@
          locals.push(SleepUtils.getHashScalar(this));
 
          value = missPolicy.callClosure("miss", null, locals);
-         values.put(key.getValue().toString(), value);
+         values.put(temp, value);
       }
       else if (value == null)
       {
          cleanup();
 
          value = SleepUtils.getEmptyScalar();
-         values.put(key.getValue().toString(), value);
+         values.put(temp, value);
       }
 
       return value;

Modified: sleep/src/sleep/runtime/MapWrapper.java
===================================================================
--- sleep/src/sleep/runtime/MapWrapper.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/runtime/MapWrapper.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -48,6 +48,11 @@
       return temp;
    }
 
+   public void rehash(int capacity, float load)
+   {
+      throw new RuntimeException("hash is read-only");
+   }
+
    public String toString()
    {
       return values.toString();

Modified: sleep/src/sleep/runtime/ScalarHash.java
===================================================================
--- sleep/src/sleep/runtime/ScalarHash.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/runtime/ScalarHash.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -33,4 +33,8 @@
 
    /** Return the data structure backing this hash please */
    public Map getData();
+
+   /** request a rehash of the underlying data structure to the specified capacity and loadFactor parameters.  This functionality
+       allows scripters to tune the performance of their Hash scalars.  This can make a difference with large data sets */
+   public void rehash(int capacity, float loadFactor);
 }

Modified: sleep/src/sleep/taint/TaintHash.java
===================================================================
--- sleep/src/sleep/taint/TaintHash.java	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/src/sleep/taint/TaintHash.java	2008-05-12 23:13:13 UTC (rev 360)
@@ -9,6 +9,11 @@
 {
    protected ScalarHash source;
 
+   public void rehash(int capacity, float load)
+   {
+      source.rehash(capacity, load);
+   }
+
    public TaintHash(ScalarHash src)
    {
       source = src;

Added: sleep/tests/output/rehash.sl
===================================================================
--- sleep/tests/output/rehash.sl	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/tests/output/rehash.sl	2008-05-12 23:13:13 UTC (rev 360)
@@ -0,0 +1,5 @@
+%(a => 'apple', c => 'cat', d => 'dog', b => 'blah')
+%(a => 'apple', c => 'cat', d => 'dog', b => 'blah')
+%(a => 'apple', d => 'dog', b => 'blah', c => 'car')
+Didn't find: ee
+33

Added: sleep/tests/rehash.sl
===================================================================
--- sleep/tests/rehash.sl	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/tests/rehash.sl	2008-05-12 23:13:13 UTC (rev 360)
@@ -0,0 +1,14 @@
+debug(7);
+
+global('%hash');
+
+%hash = ohasha(a => "apple", b => "bat", c => "cat", d => "dog");
+setMissPolicy(%hash, { println("Didn't find: $2"); return 33; });
+%hash['b'] = 'blah';
+println(%hash);
+
+rehash(%hash, 100, 0.2);
+println(%hash);
+%hash['c'] = 'car';
+println(%hash);
+println(%hash['ee']);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-08 21:57:55 UTC (rev 359)
+++ sleep/whatsnew.txt	2008-05-12 23:13:13 UTC (rev 360)
@@ -1,3 +1,13 @@
+2.1-beta 26
+===========
+- added rehash(%hash, capacity, load factor) to request a hash
+  to recreate itself with the specified parameters.  This
+  functionality allows you to tune hashes for better performance
+  when working with many keys.  &rehash will not affect miss
+  and removal policies of ordered hashes.
+- removed extra key string conversion within ordered hashes.  
+  may offer a performance speedup in some cases.
+
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========
 - added &chdir() to change the current working directory of the



From rsmudge at mail.berlios.de  Wed May 14 07:51:49 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 07:51:49 +0200
Subject: [Sleep-svn] r361 - in sleep: . src/sleep/bridges
	src/sleep/engine/types src/sleep/runtime src/sleep/taint
	tests tests/output
Message-ID: <200805140551.m4E5pnTw008497@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 07:51:46 +0200 (Wed, 14 May 2008)
New Revision: 361

Removed:
   sleep/tests/output/rehash.sl
   sleep/tests/rehash.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/types/HashContainer.java
   sleep/src/sleep/engine/types/OrderedHashContainer.java
   sleep/src/sleep/runtime/ScalarHash.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/src/sleep/taint/TaintHash.java
   sleep/src/sleep/taint/TaintUtils.java
   sleep/whatsnew.txt
Log:
removed &rehash and updated the taint API


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -72,7 +72,6 @@
         temp.put("&%", f_hash);  
 
         // array & hashtable related
-        temp.put("&rehash", this);
         temp.put("&keys",  this);      // &keys(%hash) = @array
         temp.put("&size",  this);      // &size(@array) = <int>
         temp.put("&push",  this);      // &push(@array, $value) = $scalar
@@ -1234,14 +1233,6 @@
 
           return value;
        }
-       else if (n.equals("&rehash"))
-       {
-          if (value.getHash() != null)
-          {
-             value.getHash().rehash(BridgeUtilities.getInt(l, 32), (float)BridgeUtilities.getDouble(l, 0.50));
-             return value;
-          }
-       }
        else if (n.equals("&keys")) // &keys(%hash)
        {
           if (value.getHash() != null)

Modified: sleep/src/sleep/engine/types/HashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/HashContainer.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/engine/types/HashContainer.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -17,14 +17,6 @@
       values = container;
    }
 
-   public void rehash(int capacity, float load)
-   {
-      HashMap temp = new HashMap(capacity, load);
-      temp.putAll(values);
-
-      values = temp;
-   }
-
    /* constructs this hash container backed by a HashMap data structure */
    public HashContainer()
    {
@@ -33,12 +25,13 @@
 
    public Scalar getAt(Scalar key)
    {
-      Scalar value = (Scalar)values.get(key.getValue().toString());
+      String temp = key.getValue().toString();
+      Scalar value = (Scalar)values.get(temp);
 
       if (value == null)
       {
          value = SleepUtils.getEmptyScalar();
-         values.put(key.getValue().toString(), value);
+         values.put(temp, value);
       }
 
       return value;

Modified: sleep/src/sleep/engine/types/OrderedHashContainer.java
===================================================================
--- sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/engine/types/OrderedHashContainer.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -15,33 +15,17 @@
 
    private class OrderedHash extends LinkedHashMap
    {
-      protected boolean ordered;
-
       public OrderedHash(int c, float l, boolean b)
       {
          super(c, l, b);
-         ordered = b;
       }
 
-      public OrderedHash recreate(int capacity, float load)
-      {
-         OrderedHash temp = new OrderedHash(capacity, load, ordered);
-         temp.putAll(this);
-
-         return temp;
-      }
-
       protected boolean removeEldestEntry(Map.Entry eldest)
       {
          return removeEldestEntryCheck(eldest); 
       }
    }
 
-   public void rehash(int capacity, float load)
-   {
-       values = ((OrderedHash)values).recreate(capacity, load);
-   }
-
    /** constructs an ordered hash container based on the specified items */
    public OrderedHashContainer(int capacity, float loadfactor, boolean type)
    {

Modified: sleep/src/sleep/runtime/ScalarHash.java
===================================================================
--- sleep/src/sleep/runtime/ScalarHash.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/runtime/ScalarHash.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -33,8 +33,4 @@
 
    /** Return the data structure backing this hash please */
    public Map getData();
-
-   /** request a rehash of the underlying data structure to the specified capacity and loadFactor parameters.  This functionality
-       allows scripters to tune the performance of their Hash scalars.  This can make a difference with large data sets */
-   public void rehash(int capacity, float loadFactor);
 }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -521,7 +521,7 @@
    public static Scalar getOrderedHashScalar()
    {
       Scalar temp = new Scalar();
-      temp.setValue(new OrderedHashContainer(16, 0.75f, false));
+      temp.setValue(new OrderedHashContainer(11, 0.75f, false));
 
       return temp;
    }
@@ -530,7 +530,7 @@
    public static Scalar getAccessOrderedHashScalar()
    {
       Scalar temp = new Scalar();
-      temp.setValue(new OrderedHashContainer(16, 0.75f, true));
+      temp.setValue(new OrderedHashContainer(11, 0.75f, true));
 
       return temp;
    }

Modified: sleep/src/sleep/taint/TaintHash.java
===================================================================
--- sleep/src/sleep/taint/TaintHash.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/taint/TaintHash.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -9,11 +9,6 @@
 {
    protected ScalarHash source;
 
-   public void rehash(int capacity, float load)
-   {
-      source.rehash(capacity, load);
-   }
-
    public TaintHash(ScalarHash src)
    {
       source = src;

Modified: sleep/src/sleep/taint/TaintUtils.java
===================================================================
--- sleep/src/sleep/taint/TaintUtils.java	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/src/sleep/taint/TaintUtils.java	2008-05-14 05:51:46 UTC (rev 361)
@@ -4,6 +4,9 @@
 import sleep.interfaces.*;
 import sleep.runtime.*;
 
+import sleep.bridges.*;
+import sleep.engine.types.*;
+
 import java.util.*;
 
 /** <p>Sleep supports a mode where variables received from external sources are considered tainted.  This is a security mechanism to help educate
@@ -71,6 +74,16 @@
        return value;
     }
 
+    /** taints all of the Scalar values in the specified stack.  More fun that a barrel full of monkeys */
+    public static void taint(Stack values)
+    {
+       Iterator i = values.iterator();
+       while (i.hasNext())
+       {
+          taintAll((Scalar)i.next());
+       }
+    }
+
     /** taints the specified scalar (bridge writers should call this on their scalars).  recurses on hashes and arrays.  returns the original container.  If tainting is disabled the original bridge is returned. not safe for circular data structures. */
     public static Scalar taintAll(Scalar value)
     {
@@ -98,6 +111,11 @@
              taintAll((Scalar)i.next());
           }
        }
+       else if (value.getActualValue().getType() == ObjectValue.class && value.objectValue().getClass() == KeyValuePair.class)
+       {
+          KeyValuePair kvp = (KeyValuePair)value.objectValue();
+          value.setValue(SleepUtils.getScalar(new KeyValuePair(kvp.getKey(), TaintUtils.taintAll(kvp.getValue()))));
+       }
        else if (value.getActualValue() != null)
        {
           value.setValue(new TaintedValue(value.getActualValue()));

Deleted: sleep/tests/output/rehash.sl
===================================================================
--- sleep/tests/output/rehash.sl	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/tests/output/rehash.sl	2008-05-14 05:51:46 UTC (rev 361)
@@ -1,5 +0,0 @@
-%(a => 'apple', c => 'cat', d => 'dog', b => 'blah')
-%(a => 'apple', c => 'cat', d => 'dog', b => 'blah')
-%(a => 'apple', d => 'dog', b => 'blah', c => 'car')
-Didn't find: ee
-33

Deleted: sleep/tests/rehash.sl
===================================================================
--- sleep/tests/rehash.sl	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/tests/rehash.sl	2008-05-14 05:51:46 UTC (rev 361)
@@ -1,14 +0,0 @@
-debug(7);
-
-global('%hash');
-
-%hash = ohasha(a => "apple", b => "bat", c => "cat", d => "dog");
-setMissPolicy(%hash, { println("Didn't find: $2"); return 33; });
-%hash['b'] = 'blah';
-println(%hash);
-
-rehash(%hash, 100, 0.2);
-println(%hash);
-%hash['c'] = 'car';
-println(%hash);
-println(%hash['ee']);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-12 23:13:13 UTC (rev 360)
+++ sleep/whatsnew.txt	2008-05-14 05:51:46 UTC (rev 361)
@@ -1,12 +1,12 @@
 2.1-beta 26
 ===========
-- added rehash(%hash, capacity, load factor) to request a hash
-  to recreate itself with the specified parameters.  This
-  functionality allows you to tune hashes for better performance
-  when working with many keys.  &rehash will not affect miss
-  and removal policies of ordered hashes.
 - removed extra key string conversion within ordered hashes.  
   may offer a performance speedup in some cases.
+- changed default capacity of ordered hashes to 11 (previous
+  value was 16 which is bad for random distribution of values)
+- TaintUtils.taintAll now handles KeyValuePair objects
+- added TaintUtils.taint(Stack) as another shortcut for bridge
+  writers / integrators.
 
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 08:15:29 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 08:15:29 +0200
Subject: [Sleep-svn] r362 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805140615.m4E6FTHc010202@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 08:15:20 +0200 (Wed, 14 May 2008)
New Revision: 362

Added:
   sleep/tests/indexit.sl
   sleep/tests/output/indexit.sl
Modified:
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/tests/output/strmods.sl
   sleep/whatsnew.txt
Log:
updated &indexOf/&lindexOf to return $null on failure (rather than -1)


Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2008-05-14 05:51:46 UTC (rev 361)
+++ sleep/src/sleep/bridges/BasicStrings.java	2008-05-14 06:15:20 UTC (rev 362)
@@ -442,16 +442,21 @@
            String value = l.pop().toString();
            String item  = l.pop().toString();
                   
+           int rv;
+           
            if (n.equals("&lindexOf"))
            {
               int start = BridgeUtilities.normalize(BridgeUtilities.getInt(l, value.length()), value.length());
-              return SleepUtils.getScalar(value.lastIndexOf(item, start));
+              rv = value.lastIndexOf(item, start);
            }
            else
            {
               int start = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.length());
-              return SleepUtils.getScalar(value.indexOf(item, start));
+              rv = value.indexOf(item, start);
            }
+
+           if (rv == -1) { return SleepUtils.getEmptyScalar(); }
+           return SleepUtils.getScalar(rv);
         }
     }
 

Added: sleep/tests/indexit.sl
===================================================================
--- sleep/tests/indexit.sl	2008-05-14 05:51:46 UTC (rev 361)
+++ sleep/tests/indexit.sl	2008-05-14 06:15:20 UTC (rev 362)
@@ -0,0 +1,10 @@
+$string = "this is a test really it is and I love it like McDonalds ketucky fried chicken and a pizza hut";
+$start = 0;
+
+while $idx (indexOf($string, 'a', $start))
+{
+   println("$start and $idx $+ : " . substr($string, $start, $idx + 1));
+   $start = $idx + 1;
+}
+
+println("finish it: " . substr($string, $start));

Added: sleep/tests/output/indexit.sl
===================================================================
--- sleep/tests/output/indexit.sl	2008-05-14 05:51:46 UTC (rev 361)
+++ sleep/tests/output/indexit.sl	2008-05-14 06:15:20 UTC (rev 362)
@@ -0,0 +1,8 @@
+0 and 8: this is a
+9 and 17:  test rea
+18 and 28: lly it is a
+29 and 52: nd I love it like McDona
+53 and 79: lds ketucky fried chicken a
+80 and 83: nd a
+84 and 89:  pizza
+finish it:  hut

Modified: sleep/tests/output/strmods.sl
===================================================================
--- sleep/tests/output/strmods.sl	2008-05-14 05:51:46 UTC (rev 361)
+++ sleep/tests/output/strmods.sl	2008-05-14 06:15:20 UTC (rev 362)
@@ -15,11 +15,11 @@
 5
 5
 5
--1
--1
--1
--1
--1
--1
--1
--1
+
+
+
+
+
+
+
+

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 05:51:46 UTC (rev 361)
+++ sleep/whatsnew.txt	2008-05-14 06:15:20 UTC (rev 362)
@@ -7,7 +7,18 @@
 - TaintUtils.taintAll now handles KeyValuePair objects
 - added TaintUtils.taint(Stack) as another shortcut for bridge
   writers / integrators.
+- BACKWARDS COMPAT WARNING: updated &indexOf and &lindexOf to
+  return $null when no match is found.  This is a change from
+  their original return value of -1.  $null is == to 0.  However
+  this does enable a cleaner means for iterating with indexOf.
 
+  $index = -1;
+  while $index (indexOf($string, "token", $index + 1))
+  {
+     # ...
+  }
+  # do something with substr($string, $start + 1) 
+
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========
 - added &chdir() to change the current working directory of the



From rsmudge at mail.berlios.de  Wed May 14 09:45:50 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 09:45:50 +0200
Subject: [Sleep-svn] r363 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805140745.m4E7joYm016066@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 09:45:49 +0200 (Wed, 14 May 2008)
New Revision: 363

Added:
   sleep/tests/find.sl
   sleep/tests/output/find.sl
Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/tests/behavior.sl
   sleep/whatsnew.txt
Log:
regex changes... 


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/build.xml	2008-05-14 07:45:49 UTC (rev 363)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 07:45:49 UTC (rev 363)
@@ -48,20 +48,24 @@
 
     private static Pattern getPattern(String pattern)
     {
-       if (patternCache.containsKey(pattern))
+       Pattern temp = (Pattern)patternCache.get(pattern);
+
+       if (temp != null)
        {
-          return (Pattern)patternCache.get(pattern);  
+          return temp;
        }
-
-       if (patternCache.size() > 1024)
+       else
        {
-          patternCache.clear(); /* ensure the pattern cache is flushed once in awhile */
-       }
+          if (patternCache.size() > 1024)
+          {
+             patternCache.clear(); /* ensure the pattern cache is flushed once in awhile */
+          }
      
-       Pattern temp = Pattern.compile(pattern);
-       patternCache.put(pattern, temp);
+          temp = Pattern.compile(pattern);
+          patternCache.put(pattern, temp);
 
-       return temp;
+          return temp;
+       }
     }
 
     public void scriptUnloaded(ScriptInstance aScript)
@@ -84,64 +88,90 @@
         temp.put("&join",  new join());
         temp.put("&matches", new getMatches());
         temp.put("&replace", new rreplace());
+        temp.put("&find", new ffind());
     }
 
-    private static class isMatch implements Predicate, Function
+    private static class ffind implements Function
     {
-       public boolean decide(String n, ScriptInstance i, Stack l)
+       public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-          ScriptEnvironment env = i.getScriptEnvironment();
+          String string = BridgeUtilities.getString(l, "");
+          String patterns = BridgeUtilities.getString(l, "");
 
-          /* do some tainter checking plz */
-          Scalar bb = (Scalar)l.pop();
-          Scalar aa = (Scalar)l.pop();
+          Pattern pattern  = RegexBridge.getPattern(patterns);
+          Matcher matchit  = pattern.matcher(string);
+          int     start    = BridgeUtilities.getInt(l, 0);
+          
+          boolean check    = matchit.find(start);
 
-          if (TaintUtils.isTainted(bb) || TaintUtils.isTainted(aa))
+          if (check)
           {
-             env.setContextMetadata("retaint", Boolean.TRUE);
+             i.getScriptEnvironment().setContextMetadata("matcher", SleepUtils.getScalar(matchit));
           }
           else
           {
-             env.setContextMetadata("retaint", null);
+             i.getScriptEnvironment().setContextMetadata("matcher", null);
           }
-  
-          /* continue with normal ops */
-          String b = bb.toString(); // PATTERN
-          String a = aa.toString(); // TEXT TO MATCH AGAINST
 
-          Matcher matcher;
+          return check ? SleepUtils.getScalar(matchit.start()) : SleepUtils.getEmptyScalar();
+       }
+    }
 
-          Pattern pattern = RegexBridge.getPattern(b);
+    /** a helper utility to get the matcher out of the script environment */
+    private static Scalar getMatcher(ScriptEnvironment env, String text, Pattern p)
+    {
+       Scalar temp = (Scalar)env.getContextMetadata("matcher");
+
+       if (temp == null && text == null && p == null)
+       {
+          return SleepUtils.getEmptyScalar();
+       }
+       else if (temp == null || (p != null && ((Matcher)temp.objectValue()).pattern() != p))
+       {
+          temp = SleepUtils.getScalar(p.matcher(text));
+          env.setContextMetadata("matcher", temp);
+          return temp;
+       }
+       else
+       {
+          return temp;
+       }
+    }
+
+    private static class isMatch implements Predicate, Function
+    {
+       public boolean decide(String n, ScriptInstance i, Stack l)
+       {
           boolean rv;
 
+          /* do some tainter checking plz */
+          Scalar bb = (Scalar)l.pop(); // PATTERN
+          Scalar aa = (Scalar)l.pop(); // TEXT TO MATCH AGAINST
+
+          Pattern pattern = RegexBridge.getPattern(bb.toString());
+
+          Scalar container = getMatcher(i.getScriptEnvironment(), aa.toString(), pattern);
+          Matcher matcher  = (Matcher)container.objectValue();
+
+          /* check our taint value please */ 
+          if (TaintUtils.isTainted(aa) || TaintUtils.isTainted(bb))
+          {
+             TaintUtils.taintAll(container);
+          }
+
           if (n.equals("hasmatch"))
           {
-              matcher = (Matcher)env.getContextMetadata(a + b);
-
-              if (matcher != null)
-              {
-                 env.setContextMetadata("matcher", matcher);
-              }
-              else
-              {
-                 matcher = pattern.matcher(a);
-                 env.setContextMetadata(a + b, matcher);
-                 env.setContextMetadata("matcher", matcher);
-              }
               rv = matcher.find();
           }
           else
           {
-              matcher = pattern.matcher(a);
-              env.setContextMetadata("matcher", matcher);
-              rv =  matcher.matches();
+              matcher.reset(aa.toString());
+              rv = matcher.matches();
           }
 
           if (!rv) 
           {
-             matcher  = null;           
-             env.setContextMetadata("matcher", null);
-             env.setContextMetadata(a + b, null);
+             i.getScriptEnvironment().setContextMetadata("matcher", null);
           }
 
           return rv;
@@ -151,11 +181,12 @@
        {
           Scalar value = SleepUtils.getArrayScalar();            
 
-          ScriptEnvironment env = i.getScriptEnvironment();
-          Matcher matcher = (Matcher)env.getContextMetadata("matcher");
+          Scalar container = getMatcher(i.getScriptEnvironment(), null, null);
 
-          if (matcher != null)
+          if (!SleepUtils.isEmptyScalar(container))
           {
+             Matcher matcher = (Matcher)container.objectValue();
+
              int count = matcher.groupCount();  
 
              for (int x = 1; x <= count; x++)
@@ -164,14 +195,7 @@
              }
           }
 
-          if (env.getContextMetadata("retaint") == Boolean.TRUE)
-          {
-             return TaintUtils.taintAll(value);
-          }
-          else
-          {
-             return value;
-          }
+          return TaintUtils.isTainted(container) ? TaintUtils.taintAll(value) : value;
        }
     }
 
@@ -241,7 +265,6 @@
 
           StringBuffer result = new StringBuffer();
 
-
           if (i.hasNext())
           {
              result.append(i.next().toString());

Modified: sleep/tests/behavior.sl
===================================================================
--- sleep/tests/behavior.sl	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/tests/behavior.sl	2008-05-14 07:45:49 UTC (rev 363)
@@ -1,11 +1,15 @@
-while ('(654) 555-1212(248) 399-8219(734) 586-9912' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
+sub foo
 {
-   ($areaCode, $phoneNumber) = matched();
-   println("$areaCode and $phoneNumber");
-
    while ('(123) 456-7890 sfdsdf (453) 443-3455' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
    {
       ($areaCode, $phoneNumber) = matched();
       println("    $areaCode and $phoneNumber");
    }
 }
+
+while ('(654) 555-1212(248) 399-8219(734) 586-9912' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
+{
+   ($areaCode, $phoneNumber) = matched();
+   println("$areaCode and $phoneNumber");
+   foo();
+}

Added: sleep/tests/find.sl
===================================================================
--- sleep/tests/find.sl	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/tests/find.sl	2008-05-14 07:45:49 UTC (rev 363)
@@ -0,0 +1,12 @@
+$string = "this is some string, phear   it dude";
+
+$start = 0;
+while $index (find($string, '(\s+)', $start))
+{
+   $delim = strlen(matched()[0]);
+
+   println("'" . substr($string, $start, $index + $delim) . "'");
+   $start = $index + $delim;
+} 
+
+println("'" . substr($string, $start) . "'");

Added: sleep/tests/output/find.sl
===================================================================
--- sleep/tests/output/find.sl	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/tests/output/find.sl	2008-05-14 07:45:49 UTC (rev 363)
@@ -0,0 +1,7 @@
+'this '
+'is '
+'some '
+'string, '
+'phear   '
+'it '
+'dude'

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 06:15:20 UTC (rev 362)
+++ sleep/whatsnew.txt	2008-05-14 07:45:49 UTC (rev 363)
@@ -18,6 +18,12 @@
      # ...
   }
   # do something with substr($string, $start + 1) 
+- added &find("string", "regex", n) which returns the index of
+  the substring matching the specified regex beginning at n.
+  &matched() works to retrieve the matched groups from the
+  substring.
+- conducted a 3am cleanup of the RegexBridge--you know what 
+  that means.
 
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 20:34:30 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 20:34:30 +0200
Subject: [Sleep-svn] r364 - in sleep: . src/sleep/bridges src/sleep/engine
	src/sleep/engine/types src/sleep/runtime src/sleep/taint
	tests tests/output
Message-ID: <200805141834.m4EIYUgc013405@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 20:34:29 +0200 (Wed, 14 May 2008)
New Revision: 364

Added:
   sleep/src/sleep/engine/types/ListContainer.java
   sleep/tests/inlined2.sl
   sleep/tests/inlined3.sl
   sleep/tests/output/inlined2.sl
   sleep/tests/output/inlined3.sl
Removed:
   sleep/src/sleep/bridges/ArgumentArray.java
   sleep/src/sleep/engine/types/ArrayContainer.bak
   sleep/src/sleep/engine/types/ArrayContainer.java
   sleep/src/sleep/engine/types/ArrayContainer.java.array
   sleep/src/sleep/engine/types/ArrayContainer.java.list
   sleep/src/sleep/engine/types/ArrayContainer.java.stack
   sleep/src/sleep/engine/types/ArrayContainer.java.vector
   sleep/src/sleep/engine/types/ArrayContainer.list
Modified:
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/src/sleep/bridges/SleepClosure.java
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/CallRequest.java
   sleep/src/sleep/runtime/CollectionWrapper.java
   sleep/src/sleep/runtime/ScalarArray.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/src/sleep/taint/TaintArray.java
   sleep/tests/output/inlined.sl
   sleep/tests/output/native_arrays.sl
   sleep/tests/output/typeof.sl
   sleep/whatsnew.txt
Log:
all kinds of evil changes.



Deleted: sleep/src/sleep/bridges/ArgumentArray.java
===================================================================
--- sleep/src/sleep/bridges/ArgumentArray.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/bridges/ArgumentArray.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,66 +0,0 @@
-/*
-   SLEEP - Simple Language for Environment Extension Purposes
- .-----------------------.
- | sleep.bridges.BasicIO |____________________________________________________
- |                                                                            |
-   Author: Raphael Mudge (raffi at hick.org)
-           http://www.hick.org/~raffi/
-
-   Description:
-       Implementation of the subroutine concept.
-
-   Documentation:
-
-   Changelog:
-
-   * This software is distributed under the artistic license, see license.txt
-     for more information. *
-
- |____________________________________________________________________________|
- */
-
-package sleep.bridges;
- 
-import java.util.*;
-import java.io.*;
-
-import sleep.engine.*;
-import sleep.interfaces.*;
-import sleep.runtime.*;
-
-public class ArgumentArray extends sleep.engine.types.ArrayContainer
-{
-       private int      sz;
-       private Variable store;
-
-       public ArgumentArray(int size, Variable varStore)
-       {
-          sz     = size - 1;
-          store  = varStore;
-          values = null;
-       }
-
-       private void check()
-       {
-          if (values == null)
-          {
-             values = new Stack();
-             for (int x = 0; x < sz; x++)
-             {
-                values.push(store.getScalar("$"+(x+1)));
-             }
-          }
-       }
-
-       public Scalar   pop() { check(); return super.pop(); }
-       public Scalar   push(Scalar value) { check(); return super.push(value); }
-       public int      size() { if (values == null) { return sz; } else { return super.size(); } }
-       public Scalar   getAt(int index) { check(); return super.getAt(index); }
-       public Iterator scalarIterator() { check(); return super.scalarIterator(); }
-       public Scalar   add(Scalar value, int index) { check(); return super.add(value, index); }
-       public void     remove(Scalar value) { check(); super.remove(value); }
-       public Scalar   remove(int index) { check(); return super.remove(index); }
-       public void     sort(Comparator compare) { check(); super.sort(compare); }
-       public String   toString() { check(); return super.toString(); }
-}
-

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -331,6 +331,8 @@
    {
       int name = 1;
 
+      Scalar args = SleepUtils.getArrayScalar();
+
       while (!locals.isEmpty())
       {
          Scalar lvar = (Scalar)locals.pop();
@@ -350,12 +352,13 @@
          }
          else
          {
+            args.getArray().push(lvar);
             vars.setScalarLevel("$"+name, lvar, localLevel);
             name++;
          }
       }
 
-//      vars.setScalarLevel("@_", SleepUtils.getArrayScalar(new ArgumentArray(name, localLevel)), localLevel);
+      vars.setScalarLevel("@_", args, localLevel);
       return name;
    }
 

Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -100,7 +100,7 @@
 
           Pattern pattern  = RegexBridge.getPattern(patterns);
           Matcher matchit  = pattern.matcher(string);
-          int     start    = BridgeUtilities.getInt(l, 0);
+          int     start    = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), string.length());
           
           boolean check    = matchit.find(start);
 
@@ -246,13 +246,14 @@
 
           String results[] = pattern.split(b);
           
-          ArrayContainer value = new ArrayContainer();
+          Scalar array = SleepUtils.getArrayScalar();
+
           for (int x = 0; x < results.length; x++)
           {
-             value.push(SleepUtils.getScalar(results[x]));
+             array.getArray().push(SleepUtils.getScalar(results[x]));
           }
 
-          return SleepUtils.getArrayScalar(value);
+          return array;
        }
     }
 

Modified: sleep/src/sleep/bridges/SleepClosure.java
===================================================================
--- sleep/src/sleep/bridges/SleepClosure.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/bridges/SleepClosure.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -229,8 +229,7 @@
           // initialize local variables...
           //
           vars.setScalarLevel("$0", SleepUtils.getScalar(message), localLevel);
-          int targs = BridgeUtilities.initLocalScope(vars, localLevel, locals);
-          vars.setScalarLevel("@_", SleepUtils.getArrayScalar(new ArgumentArray(targs, localLevel)), localLevel);
+          BridgeUtilities.initLocalScope(vars, localLevel, locals);
 
           //
           // call the function, save the scalar that was returned. 

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/Block.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -234,7 +234,7 @@
               {
                  environment.getScriptInstance().fireWarning(ex.getMessage(), temp.getLineNumber());
               }
-              else if (ex instanceof ArrayIndexOutOfBoundsException)
+              else if (ex instanceof IndexOutOfBoundsException)
               {
                  environment.getScriptInstance().fireWarning("attempted an invalid index", temp.getLineNumber());
               }

Modified: sleep/src/sleep/engine/CallRequest.java
===================================================================
--- sleep/src/sleep/engine/CallRequest.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/CallRequest.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -328,15 +328,25 @@
          synchronized (vars)
          {
             Variable localLevel = vars.getLocalVariables();
+            Scalar   oldargs    = localLevel.getScalar("@_");     /* save the current local variables */
 
             int targs = sleep.bridges.BridgeUtilities.initLocalScope(vars, localLevel, getScriptEnvironment().getCurrentFrame());
-
-            if ((targs - 1) > 0)
+            Scalar eval = inline.evaluate(getScriptEnvironment());
+    
+            /* restore the argument variables */
+            localLevel.putScalar("@_", oldargs);
+            if (targs > 0 && oldargs != null)
             {
-               vars.setScalarLevel("@_", SleepUtils.getArrayScalar(new sleep.bridges.ArgumentArray(targs, localLevel)), localLevel);
+               Iterator i = oldargs.getArray().scalarIterator();
+               int      count = 1;
+               while (i.hasNext() && count <= targs)
+               {
+                  Scalar temp = (Scalar)i.next();
+                  localLevel.putScalar("$" + count, temp);
+                  count++;
+               }
             }
 
-            Scalar eval = inline.evaluate(getScriptEnvironment());
             return eval;
          }
       }

Deleted: sleep/src/sleep/engine/types/ArrayContainer.bak
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.bak	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.bak	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,78 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected LinkedList values;
-
-   public ArrayContainer()
-   {
-      values = new LinkedList();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new LinkedList(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.removeFirst();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.addFirst(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= values.size())
-      {
-         return expand(index, SleepUtils.getEmptyScalar());
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   private Scalar expand(int index, Scalar value)
-   {
-      for (int x = values.size(); x < index; x++)
-      {
-         values.add(SleepUtils.getEmptyScalar());
-      }
-
-      values.add(value);
-
-      return (Scalar)value;
-   }
-
-   public Scalar setAt(int index, Scalar value)
-   {
-      if (index >= values.size())
-      {
-         return expand(index, value);
-      }
-
-      return (Scalar)values.set(index, value);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.listIterator();
-   }
-
-   public void add(Scalar value)
-   {
-      values.add(value);
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.java
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,80 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected Stack values;
-
-   public ArrayContainer()
-   {
-      values = new Stack();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new Stack();
-      values.addAll(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.pop();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.push(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public void sort(Comparator compare)
-   {
-      Collections.sort(values, compare);
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= size())
-      {
-          Scalar temp = SleepUtils.getEmptyScalar();
-          values.add(temp);
-          return temp;   
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   public void remove(Scalar key)
-   {
-      SleepUtils.removeScalar(values.iterator(), key);
-   }
-
-   public Scalar remove(int index)
-   {
-      return (Scalar)values.remove(index);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value, int index)
-   {
-      values.add(index, value);
-      return value;
-   }
-
-   public String toString()
-   {
-      return values.toString();
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.java.array
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.java.array	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.java.array	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,59 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected ArrayList values;
-
-   public ArrayContainer()
-   {
-      values = new ArrayList();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new ArrayList(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.remove(0);
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.add(0, value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= values.size())
-      {
-         Scalar temp = SleepUtils.getEmptyScalar();
-         values.add(temp);
-         return temp;
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value)
-   {
-      values.add(value);
-      return value;
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.java.list
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.java.list	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.java.list	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,59 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected LinkedList values;
-
-   public ArrayContainer()
-   {
-      values = new LinkedList();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new LinkedList(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.removeFirst();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.addFirst(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= values.size())
-      {
-         Scalar temp = SleepUtils.getEmptyScalar();
-         values.add(temp);
-         return temp;
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value)
-   {
-      values.add(value);
-      return value;
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.java.stack
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.java.stack	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.java.stack	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,60 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected Stack values;
-
-   public ArrayContainer()
-   {
-      values = new Stack();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new Stack();
-      values.addAll(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.pop();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.push(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= size())
-      {
-          Scalar temp = SleepUtils.getEmptyScalar();
-          values.add(temp);
-          return temp;   
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value)
-   {
-      values.add(value);
-      return value;
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.java.vector
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.java.vector	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.java.vector	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,71 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected Stack values;
-
-   public ArrayContainer()
-   {
-      values = new Stack();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new Stack(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.pop();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.push(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      try
-      {
-         Scalar temp = (Scalar)values.get(index);
-
-         if (temp == null)
-         {
-           temp = SleepUtils.getEmptyScalar();
-           values.set(index, temp);
-         }
-
-         return temp;
-      } catch (Exception ex) { ex.printStackTrace(); }
-      return null;
-   }
-
-   public Scalar setAt(int index, Scalar value)
-   {
-      values.ensureCapacity(index + 1);
-
-      return (Scalar)values.set(index, value);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value)
-   {
-      values.add(value);
-      return value;
-   }
-}

Deleted: sleep/src/sleep/engine/types/ArrayContainer.list
===================================================================
--- sleep/src/sleep/engine/types/ArrayContainer.list	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ArrayContainer.list	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,59 +0,0 @@
-package sleep.engine.types;
-
-import sleep.runtime.*;
-import java.util.*;
-
-public class ArrayContainer implements ScalarArray
-{
-   protected LinkedList values;
-
-   public ArrayContainer()
-   {
-      values = new LinkedList();
-   }
-
-   /** initial values must be a collection of Scalar's */
-   public ArrayContainer(Collection initialValues)
-   {
-      values = new LinkedList(initialValues);
-   }
-
-   public Scalar pop()
-   {
-      return (Scalar)values.removeFirst();
-   }
-
-   public Scalar push(Scalar value)
-   {
-      values.addFirst(value);
-      return value;
-   }
-
-   public int size()
-   {
-      return values.size();
-   }
-
-   public Scalar getAt(int index)
-   {
-      if (index >= values.size())
-      {
-          Scalar temp = SleepUtils.getEmptyScalar();
-          values.add(temp);
-          return temp;
-      }
-
-      return (Scalar)values.get(index);
-   }
-
-   public Iterator scalarIterator()
-   {
-      return values.iterator();
-   }
-
-   public Scalar add(Scalar value)
-   {
-      values.add(value);
-      return value;
-   }
-}

Added: sleep/src/sleep/engine/types/ListContainer.java
===================================================================
--- sleep/src/sleep/engine/types/ListContainer.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/engine/types/ListContainer.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -0,0 +1,91 @@
+package sleep.engine.types;
+
+import sleep.runtime.*;
+import java.util.*;
+
+/** A linked list backing for Sleep Arrays. Most array ops are better off with this type of backing */
+public class ListContainer implements ScalarArray
+{
+   protected List values;
+
+   public ListContainer()
+   {
+      values = new LinkedList();
+   }
+
+   public ListContainer(List list)
+   {
+      values = list;
+   }
+
+   public ScalarArray sublist(int from, int to)
+   {
+      return new ListContainer((List)values.subList(from, to));
+   }
+
+   /** initial values must be a collection of Scalar's */
+   public ListContainer(Collection initialValues)
+   {
+      this();
+      values.addAll(initialValues);
+   }
+
+   public Scalar pop()
+   {
+      return (Scalar)values.remove(values.size() - 1);
+   }
+
+   public Scalar push(Scalar value)
+   {
+      values.add(value);
+      return value;
+   }
+
+   public int size()
+   {
+      return values.size();
+   }
+
+   public void sort(Comparator compare)
+   {
+      Collections.sort(values, compare);
+   }
+
+   public Scalar getAt(int index)
+   {
+      if (index >= size())
+      {
+          Scalar temp = SleepUtils.getEmptyScalar();
+          values.add(temp);
+          return temp;   
+      }
+
+      return (Scalar)values.get(index);
+   }
+
+   public void remove(Scalar key)
+   {
+      SleepUtils.removeScalar(values.iterator(), key);
+   }
+
+   public Scalar remove(int index)
+   {
+      return (Scalar)values.remove(index);
+   }
+
+   public Iterator scalarIterator()
+   {
+      return values.iterator();
+   }
+
+   public Scalar add(Scalar value, int index)
+   {
+      values.add(index, value);
+      return value;
+   }
+
+   public String toString()
+   {
+      return values.toString();
+   }
+}

Modified: sleep/src/sleep/runtime/CollectionWrapper.java
===================================================================
--- sleep/src/sleep/runtime/CollectionWrapper.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/runtime/CollectionWrapper.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -10,6 +10,24 @@
    protected Collection values;
    protected Object[]   array  = null;
 
+   public ScalarArray sublist(int begin, int end)
+   {
+      List temp = new LinkedList();
+      Iterator i = values.iterator();
+
+      int count = 0;
+      while (i.hasNext() && count < end)
+      {
+         if (count >= begin)
+         {
+            temp.add(i.next());
+         }
+         count++;
+      }
+
+      return new CollectionWrapper(temp);
+   }  
+ 
    public CollectionWrapper(Collection _values)
    {
       values = _values;

Modified: sleep/src/sleep/runtime/ScalarArray.java
===================================================================
--- sleep/src/sleep/runtime/ScalarArray.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/runtime/ScalarArray.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -15,13 +15,33 @@
  */
 public interface ScalarArray extends java.io.Serializable
 {
+   /** remove the topmost element from the array */
    public Scalar   pop();
+
+   /** add an element onto the end of the array */
    public Scalar   push(Scalar value);
+
+   /** return the size of the array */
    public int      size();
+
+   /** get an element at the specified index */
    public Scalar   getAt(int index);
+
+   /** return an iterator */
    public Iterator scalarIterator();
+
+   /** add an element to the array at the specified index */
    public Scalar   add(Scalar value, int index); 
+
+   /** remove all elements with the same identity as the specified scalar */
    public void     remove(Scalar value);
+
+   /** remove an element at the specified index */
    public Scalar   remove(int index);
+
+   /** sort this array with the specified comparator */
    public void     sort(Comparator compare);
+
+   /** return a view into the array, ideally one that uses the same backing store */
+   public ScalarArray sublist(int start, int end);
 }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -215,7 +215,7 @@
    public static Scalar getArrayScalar()
    {
       Scalar temp = new Scalar();
-      temp.setValue(new ArrayContainer());
+      temp.setValue(new ListContainer());
 
       return temp;
    }

Modified: sleep/src/sleep/taint/TaintArray.java
===================================================================
--- sleep/src/sleep/taint/TaintArray.java	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/src/sleep/taint/TaintArray.java	2008-05-14 18:34:29 UTC (rev 364)
@@ -9,9 +9,14 @@
 {
    protected ScalarArray source;
 
+   public ScalarArray sublist(int begin, int end)
+   {
+      return new TaintArray(source.sublist(begin, end));
+   }
+
    public TaintArray(ScalarArray src)
    {
-      source = src;;
+      source = src;
    }
 
    public String toString()

Added: sleep/tests/inlined2.sl
===================================================================
--- sleep/tests/inlined2.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/inlined2.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -0,0 +1,20 @@
+#
+#
+#
+
+# doit()
+inline doit
+{
+   println("doit: " . @_);
+
+   $1 = $1 * $2;
+   println($1);
+}
+
+sub foo
+{
+   doit(3, 4);
+   println("foo: $1 and $2 and $3 and $4 etc.. and " . @_);
+}
+
+foo("phear", "u", "fear", "me");

Added: sleep/tests/inlined3.sl
===================================================================
--- sleep/tests/inlined3.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/inlined3.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -0,0 +1,29 @@
+#
+#
+#
+
+inline didit
+{
+   println("didit: " . @_);
+   $2 = $1 + $2;
+   println("Whirred: $2");
+}
+
+# doit()
+inline doit
+{
+   println("doit: " . @_);
+
+   didit(40.2, 9.1);
+
+   $1 = $1 * $2;
+   println($1);
+}
+
+sub foo
+{
+   doit(3, 4);
+   println("foo: $1 and $2 and $3 and $4 etc.. and " . @_);
+}
+
+foo("phear", "u", "fear", "me");

Modified: sleep/tests/output/inlined.sl
===================================================================
--- sleep/tests/output/inlined.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/output/inlined.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -1,5 +1,5 @@
 @_: @('apple', 'bannana', 'cow') and apple and bannana
- at _: @('apple', 'bannana', 'cow') and x-ray and yak
- at _: @('aaa', 'bbb') and x-ray and yak
- at _: @('aaa', 'bbb') and XXX and YYY
+ at _: @() and x-ray and yak
+ at _: @() and x-ray and yak
+ at _: @() and XXX and YYY
 @_ is: @('aaa', 'bbb') and aaa and bbb

Added: sleep/tests/output/inlined2.sl
===================================================================
--- sleep/tests/output/inlined2.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/output/inlined2.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -0,0 +1,3 @@
+doit: @(3, 4)
+12
+foo: phear and u and fear and me etc.. and @('phear', 'u', 'fear', 'me')

Added: sleep/tests/output/inlined3.sl
===================================================================
--- sleep/tests/output/inlined3.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/output/inlined3.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -0,0 +1,5 @@
+doit: @(3, 4)
+didit: @(40.2, 9.1)
+Whirred: 49.300000000000004
+12
+foo: phear and u and fear and me etc.. and @('phear', 'u', 'fear', 'me')

Modified: sleep/tests/output/native_arrays.sl
===================================================================
--- sleep/tests/output/native_arrays.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/output/native_arrays.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -18,14 +18,14 @@
 $temp[1][1][1] = 11
 $temp[1][1][2] = 12
 <--------------------------------------------------->
-We have @(1, 2, 3, 4, 5, 6) and class sleep.engine.types.ArrayContainer
+We have @(1, 2, 3, 4, 5, 6) and class sleep.engine.types.ListContainer
 $temp[0][0] = 1
 $temp[0][1] = 2
 $temp[0][2] = 3
 $temp[0][3] = 4
 $temp[0][4] = 5
 $temp[0][5] = 6
-We have @(7, 8, 9, 10, 11, 12) and class sleep.engine.types.ArrayContainer
+We have @(7, 8, 9, 10, 11, 12) and class sleep.engine.types.ListContainer
 $temp[1][0] = 7
 $temp[1][1] = 8
 $temp[1][2] = 9

Modified: sleep/tests/output/typeof.sl
===================================================================
--- sleep/tests/output/typeof.sl	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/tests/output/typeof.sl	2008-05-14 18:34:29 UTC (rev 364)
@@ -3,6 +3,6 @@
 class sleep.engine.types.DoubleValue
 class sleep.engine.types.NullValue
 class sleep.engine.types.HashContainer
-class sleep.engine.types.ArrayContainer
+class sleep.engine.types.ListContainer
 class sleep.engine.types.ObjectValue
 class sleep.engine.types.ObjectValue

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 07:45:49 UTC (rev 363)
+++ sleep/whatsnew.txt	2008-05-14 18:34:29 UTC (rev 364)
@@ -23,8 +23,16 @@
   &matched() works to retrieve the matched groups from the
   substring.
 - conducted a 3am cleanup of the RegexBridge--you know what 
-  that means.
-
+  that means.  consequently, nesting of loops that iterate
+  hasmatch no longer works.  This is to prevent a memory leak
+  from unremoved regex state.
+- updated array implementation to use a LinkedList in lieu of
+  a Stack.  This offers better performance characteristics for
+  most array operations.  The only real losing operation is
+  random access which now has a worst case of O(n)
+- inline functions now restore anonymous arguments and @_ prior
+  to returning control to the parent function.
+  
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========
 - added &chdir() to change the current working directory of the



From rsmudge at mail.berlios.de  Wed May 14 20:59:09 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 20:59:09 +0200
Subject: [Sleep-svn] r365 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805141859.m4EIx9IS015386@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 20:59:09 +0200 (Wed, 14 May 2008)
New Revision: 365

Added:
   sleep/tests/output/sublist.sl
   sleep/tests/sublist.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 18:34:29 UTC (rev 364)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 18:59:09 UTC (rev 365)
@@ -81,6 +81,7 @@
         temp.put("&clear", this);
         temp.put("&splice", this);
         temp.put("&subarray", this);
+        temp.put("&sublist", this);
         temp.put("&copy",  new copy());
         temp.put("&setRemovalPolicy", this);
         temp.put("&setMissPolicy", this);
@@ -1137,7 +1138,12 @@
        {
           if (value.getArray() != null)
           {
-             value.setValue(SleepUtils.getArrayScalar());
+             Iterator iter = value.getArray().scalarIterator();
+             while (iter.hasNext())
+             {
+                iter.next();
+                iter.remove();
+             }
           }
           else if (value.getHash() != null)
           {
@@ -1211,9 +1217,12 @@
 
           return a;
        }
-       else if (n.equals("&subarray"))
+       else if (n.equals("&subarray") || n.equals("&sublist"))
        {
-          return subarray(value, BridgeUtilities.getInt(l, 0), BridgeUtilities.getInt(l, value.getArray().size()));
+          if (value.getArray() == null)
+             throw new IllegalArgumentException(n + ": expected @array, received: " + SleepUtils.describe(value));
+
+          return sublist(value, BridgeUtilities.getInt(l, 0), BridgeUtilities.getInt(l, value.getArray().size()));
        }
        else if (n.equals("&remove"))
        {
@@ -1365,31 +1374,20 @@
        return SleepUtils.getEmptyScalar();
     }
 
-    private static final Scalar subarray(Scalar value, int _start, int _end)
+    private static Scalar sublist(Scalar value, int _start, int _end)
     { 
-       Scalar rv = SleepUtils.getArrayScalar();
+       int length = value.getArray().size();
+       int start, end;
 
-       if (value.getArray() != null)
-       {
-          int length = value.getArray().size();
-          int start, end;
+       start = BridgeUtilities.normalize(_start, length);
+       end   = (_end < 0 ? _end + length : _end);
+       end   = end <= length ? end : length;
 
-          start = BridgeUtilities.normalize(_start, length);
-          end   = (_end < 0 ? _end + length : _end);
-          end   = end <= length ? end : length;
-
-          if (start > end)
-          {
-             throw new IllegalArgumentException("illegal subarray(" + SleepUtils.describe(value) + ", " + _start + " -> " + start + ", " + _end + " -> " + end + ")");
-          }
-  
-          while (start < end)
-          {
-             rv.getArray().push(SleepUtils.getScalar(value.getArray().getAt(start)));
-             start++;
-          }
+       if (start > end)
+       {
+          throw new IllegalArgumentException("illegal subarray(" + SleepUtils.describe(value) + ", " + _start + " -> " + start + ", " + _end + " -> " + end + ")");
        }
-
-       return rv;
+  
+       return SleepUtils.getArrayScalar(value.getArray().sublist(start, end));
     }
 }

Added: sleep/tests/output/sublist.sl
===================================================================
--- sleep/tests/output/sublist.sl	2008-05-14 18:34:29 UTC (rev 364)
+++ sleep/tests/output/sublist.sl	2008-05-14 18:59:09 UTC (rev 365)
@@ -0,0 +1,5 @@
+@('k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u')
+@('d', 'e', 'f', 'g', 'h')
+@('a', 'b', 'c', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u')
+@('j', 'k', 'doe', 'ray', 'me', 'fa')
+@('a', 'b', 'c', 'i', 'j', 'k', 'doe', 'ray', 'me', 'fa', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u')

Added: sleep/tests/sublist.sl
===================================================================
--- sleep/tests/sublist.sl	2008-05-14 18:34:29 UTC (rev 364)
+++ sleep/tests/sublist.sl	2008-05-14 18:59:09 UTC (rev 365)
@@ -0,0 +1,24 @@
+#
+# test out the &sublist function.
+#
+
+ at array = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u");
+
+println(sublist(@array, 10));
+
+# extract a sublist; modifications in the sublist affect the parent
+ at temp = sublist(@array, 3, 8);
+println(@temp);
+clear(@temp);
+
+println(@array);
+
+#
+ at temp = sublist(@array, 4, 6);
+push(@temp, "doe");
+push(@temp, "ray");
+push(@temp, "me");
+push(@temp, "fa");
+
+println(@temp);
+println(@array);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 18:34:29 UTC (rev 364)
+++ sleep/whatsnew.txt	2008-05-14 18:59:09 UTC (rev 365)
@@ -32,6 +32,8 @@
   random access which now has a worst case of O(n)
 - inline functions now restore anonymous arguments and @_ prior
   to returning control to the parent function.
+- renamed &subarray to &sublist(@array, n, m).  Updates to the
+  returned &sublist will affect the parent list.
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 22:00:23 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 22:00:23 +0200
Subject: [Sleep-svn] r366 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805142000.m4EK0N52020817@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 22:00:12 +0200 (Wed, 14 May 2008)
New Revision: 366

Added:
   sleep/tests/listops.sl
   sleep/tests/output/listops.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/tests/joiniter.sl
   sleep/tests/output/joiniter.sl
   sleep/whatsnew.txt
Log:
added some list operations.


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 20:00:12 UTC (rev 366)
@@ -72,6 +72,9 @@
         temp.put("&%", f_hash);  
 
         // array & hashtable related
+        temp.put("&concat", this);
+        temp.put("&rest", this);
+
         temp.put("&keys",  this);      // &keys(%hash) = @array
         temp.put("&size",  this);      // &size(@array) = <int>
         temp.put("&push",  this);      // &push(@array, $value) = $scalar
@@ -994,18 +997,37 @@
 
           return SleepUtils.getEmptyScalar();
        }
+       else if (n.equals("&concat"))
+       {
+          Scalar value = SleepUtils.getArrayScalar();
 
+          while (!l.isEmpty())
+          {
+             Scalar temp = (Scalar)l.pop();
+
+             if (temp.getArray() != null)
+             {
+                Iterator iter = temp.getArray().scalarIterator();
+                while (iter.hasNext())
+                {
+                   value.getArray().push(SleepUtils.getScalar((Scalar)iter.next()));
+                }
+             }
+             else
+             {
+                value.getArray().push(SleepUtils.getScalar(temp));
+             }
+          }
+
+          return value;
+       }
+
        /** Start of many array functions */
 
        Scalar value = BridgeUtilities.getScalar(l);
 
-       if (n.equals("&push"))
+       if (n.equals("&push") && BridgeUtilities.expectArray(n, value))
        {
-          if (value.getArray() == null)
-          {
-             throw new IllegalArgumentException("&push: expected array. received " + SleepUtils.describe(value));
-          }
-
           Scalar pushed = null;
           while (!l.isEmpty())
           {
@@ -1015,8 +1037,12 @@
  
           return pushed == null ? SleepUtils.getEmptyScalar() : pushed;
        }
-       else if ((n.equals("&retainAll") || n.equals("&removeAll")) && value.getArray() != null)
+       else if (n.equals("&rest") && BridgeUtilities.expectArray(n, value))
        {
+          return SleepUtils.getArrayScalar(value.getArray().sublist(1, value.getArray().size()));
+       }
+       else if ((n.equals("&retainAll") || n.equals("&removeAll")) && BridgeUtilities.expectArray(n, value))
+       {
           ScalarArray a = value.getArray();
           ScalarArray b = BridgeUtilities.getArray(l);
           Scalar temp;    
@@ -1052,7 +1078,7 @@
 
           return SleepUtils.getArrayScalar(a);
        }
-       else if (n.equals("&addAll") && value.getArray() != null)
+       else if (n.equals("&addAll") && BridgeUtilities.expectArray(n, value))
        {
           ScalarArray a = value.getArray();
           ScalarArray b = BridgeUtilities.getArray(l);
@@ -1099,30 +1125,39 @@
 
           return value;
        }
-       else if (n.equals("&splice") && value.getArray() != null)
+       else if (n.equals("&splice") && BridgeUtilities.expectArray(n, value))
        {
           // splice(@old, @stuff, start, n to remove)
+          /* normalize all of the parameters please */
+       
           ScalarArray insert = BridgeUtilities.getArray(l);
           int         start  = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
           int         torem  = BridgeUtilities.getInt(l, insert.size()) + start;
 
-          for (int z = start; z < torem; z++)
+          /* remove the specified elements please */
+
+          ScalarArray toRemove = value.getArray().sublist(start, torem);
+          Iterator iter = toRemove.scalarIterator();
+          while (iter.hasNext())
           {
-             value.getArray().remove(start);
+             iter.next();
+             iter.remove();
           }
- 
-          int count = 0;
+
+          /* insert some elements */
+
+          ScalarArray addToMe = value.getArray().sublist(0, start); 
+
           Iterator j = insert.scalarIterator();
           while (j.hasNext())
           {
              Scalar ins = (Scalar)j.next();
-             value.getArray().add(SleepUtils.getScalar(ins), start + count);
-             count++;
+             addToMe.push(SleepUtils.getScalar(ins));
           }
 
           return value;
        }
-       else if (n.equals("&pop"))
+       else if (n.equals("&pop")  && BridgeUtilities.expectArray(n, value))
        {
           return value.getArray().pop();
        }
@@ -1154,7 +1189,7 @@
              value.setValue(SleepUtils.getEmptyScalar());
           }
        }
-       else if (n.equals("&search") && value.getArray() != null)
+       else if (n.equals("&search") && BridgeUtilities.expectArray(n, value))
        {
           SleepClosure f = BridgeUtilities.getFunction(l, i); 
           int start      = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
@@ -1217,11 +1252,8 @@
 
           return a;
        }
-       else if (n.equals("&subarray") || n.equals("&sublist"))
+       else if ((n.equals("&subarray") || n.equals("&sublist")) && BridgeUtilities.expectArray(n, value))
        {
-          if (value.getArray() == null)
-             throw new IllegalArgumentException(n + ": expected @array, received: " + SleepUtils.describe(value));
-
           return sublist(value, BridgeUtilities.getInt(l, 0), BridgeUtilities.getInt(l, value.getArray().size()));
        }
        else if (n.equals("&remove"))

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-14 20:00:12 UTC (rev 366)
@@ -367,4 +367,18 @@
    {
       return value < 0 ? value + length : value;
    }
+
+   /** returns true if value is an array or throws an appropriate exception if value is not an array.
+    *  @param n the name of the &amp;function
+    *  @param value the scalar to check
+    */
+   public static boolean expectArray(String n, Scalar value)
+   {
+      if (value.getArray() == null)
+      {
+         throw new IllegalArgumentException(n + ": expected array. received " + SleepUtils.describe(value));
+      }
+
+      return true;
+   }
 }

Modified: sleep/tests/joiniter.sl
===================================================================
--- sleep/tests/joiniter.sl	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/tests/joiniter.sl	2008-05-14 20:00:12 UTC (rev 366)
@@ -14,4 +14,4 @@
 
 println(flatten(&foo));
 
-println(search(&foo, { if ($1 == 3) { return 3; } }));
+println(search(flatten(&foo), { if ($1 == 3) { return 3; } }));

Added: sleep/tests/listops.sl
===================================================================
--- sleep/tests/listops.sl	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/tests/listops.sl	2008-05-14 20:00:12 UTC (rev 366)
@@ -0,0 +1,24 @@
+#
+# test out append
+#
+ at a = @("a", "b", "c");
+ at b = @(1, 2, 3, 4, 5);
+
+ at a = concat(@a, @b, @a);
+println(@a);
+
+#
+# test that appended lists share cells...
+#
+ at a[2] = "test";
+println(@a);
+
+#
+# test out head..
+#
+ at b[0] = "blah";
+
+println(@b[0] . " and " . rest(@b));
+
+println(@b[0] . " and " . @b);
+

Modified: sleep/tests/output/joiniter.sl
===================================================================
--- sleep/tests/output/joiniter.sl	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/tests/output/joiniter.sl	2008-05-14 20:00:12 UTC (rev 366)
@@ -1,3 +1,3 @@
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
 @(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)
-
+3

Added: sleep/tests/output/listops.sl
===================================================================
--- sleep/tests/output/listops.sl	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/tests/output/listops.sl	2008-05-14 20:00:12 UTC (rev 366)
@@ -0,0 +1,4 @@
+@('a', 'b', 'c', 1, 2, 3, 4, 5, 'a', 'b', 'c')
+@('a', 'b', 'test', 1, 2, 3, 4, 5, 'a', 'b', 'c')
+blah and @(2, 3, 4, 5)
+blah and @('blah', 2, 3, 4, 5)

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 18:59:09 UTC (rev 365)
+++ sleep/whatsnew.txt	2008-05-14 20:00:12 UTC (rev 366)
@@ -34,6 +34,11 @@
   to returning control to the parent function.
 - renamed &subarray to &sublist(@array, n, m).  Updates to the
   returned &sublist will affect the parent list.
+- updated &splice to use new ScalarArray sublist API... this
+  new implementation scales better
+- &clear now clears each element from the array rather than
+  creating a new array and returning it.
+- added list operations: &rest(@array) and &concat(@a, @b, ...) 
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 22:05:55 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 22:05:55 +0200
Subject: [Sleep-svn] r367 - in sleep: . src/sleep/bridges tests
Message-ID: <200805142005.m4EK5tEK021377@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 22:05:54 +0200 (Wed, 14 May 2008)
New Revision: 367

Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/tests/listops.sl
   sleep/whatsnew.txt
Log:
bla hblah blahj


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 20:00:12 UTC (rev 366)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 20:05:54 UTC (rev 367)
@@ -73,7 +73,6 @@
 
         // array & hashtable related
         temp.put("&concat", this);
-        temp.put("&rest", this);
 
         temp.put("&keys",  this);      // &keys(%hash) = @array
         temp.put("&size",  this);      // &size(@array) = <int>
@@ -1037,10 +1036,6 @@
  
           return pushed == null ? SleepUtils.getEmptyScalar() : pushed;
        }
-       else if (n.equals("&rest") && BridgeUtilities.expectArray(n, value))
-       {
-          return SleepUtils.getArrayScalar(value.getArray().sublist(1, value.getArray().size()));
-       }
        else if ((n.equals("&retainAll") || n.equals("&removeAll")) && BridgeUtilities.expectArray(n, value))
        {
           ScalarArray a = value.getArray();

Modified: sleep/tests/listops.sl
===================================================================
--- sleep/tests/listops.sl	2008-05-14 20:00:12 UTC (rev 366)
+++ sleep/tests/listops.sl	2008-05-14 20:05:54 UTC (rev 367)
@@ -18,7 +18,7 @@
 #
 @b[0] = "blah";
 
-println(@b[0] . " and " . rest(@b));
+println(@b[0] . " and " . sublist(@b, 1));
 
 println(@b[0] . " and " . @b);
 

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 20:00:12 UTC (rev 366)
+++ sleep/whatsnew.txt	2008-05-14 20:05:54 UTC (rev 367)
@@ -38,7 +38,7 @@
   new implementation scales better
 - &clear now clears each element from the array rather than
   creating a new array and returning it.
-- added list operations: &rest(@array) and &concat(@a, @b, ...) 
+- added &concat(@a, @b, ...) to concatenate multiple arrays
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 22:23:50 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 22:23:50 +0200
Subject: [Sleep-svn] r368 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805142023.m4EKNoVn022651@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 22:23:50 +0200 (Wed, 14 May 2008)
New Revision: 368

Added:
   sleep/tests/output/split2.sl
   sleep/tests/split2.sl
Modified:
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/whatsnew.txt
Log:
updated split to accept a limit parameter.


Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 20:05:54 UTC (rev 367)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-14 20:23:50 UTC (rev 368)
@@ -244,7 +244,7 @@
 
           Pattern pattern  = RegexBridge.getPattern(a);
 
-          String results[] = pattern.split(b);
+          String results[] = l.isEmpty() ? pattern.split(b) : pattern.split(b, BridgeUtilities.getInt(l, 0));
           
           Scalar array = SleepUtils.getArrayScalar();
 

Added: sleep/tests/output/split2.sl
===================================================================
--- sleep/tests/output/split2.sl	2008-05-14 20:05:54 UTC (rev 367)
+++ sleep/tests/output/split2.sl	2008-05-14 20:23:50 UTC (rev 368)
@@ -0,0 +1 @@
+@('the', 'rain', 'in spain falls mainly on the plain')

Added: sleep/tests/split2.sl
===================================================================
--- sleep/tests/split2.sl	2008-05-14 20:05:54 UTC (rev 367)
+++ sleep/tests/split2.sl	2008-05-14 20:23:50 UTC (rev 368)
@@ -0,0 +1 @@
+println(split(" ", "the rain in spain falls mainly on the plain", 3));

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 20:05:54 UTC (rev 367)
+++ sleep/whatsnew.txt	2008-05-14 20:23:50 UTC (rev 368)
@@ -39,6 +39,8 @@
 - &clear now clears each element from the array rather than
   creating a new array and returning it.
 - added &concat(@a, @b, ...) to concatenate multiple arrays
+- split('pattern', 'text', [limit]) now accepts a limit 
+  parameter to allow partial splits of text.
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 22:54:50 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 22:54:50 +0200
Subject: [Sleep-svn] r369 - in sleep: . src/sleep/bridges src/sleep/engine
	tests tests/output
Message-ID: <200805142054.m4EKsoSh024930@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 22:54:49 +0200 (Wed, 14 May 2008)
New Revision: 369

Added:
   sleep/tests/inlineinv.sl
   sleep/tests/output/inlineinv.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/CallRequest.java
   sleep/whatsnew.txt
Log:
added &inline function...  its phearsome.


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 20:23:50 UTC (rev 368)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-14 20:54:49 UTC (rev 369)
@@ -168,6 +168,7 @@
         temp.put("&release",   sync);
 
         temp.put("&invoke",    this);
+        temp.put("&inline",    this);
 
         temp.put("=>",       new HashKeyValueOp());
     }
@@ -889,6 +890,12 @@
           if (s.getHash() != null) { return SleepUtils.getScalar(s.getHash().getClass()); }
           return SleepUtils.getScalar(s.getActualValue().getType());
        }
+       else if (n.equals("&inline"))
+       {
+          SleepClosure c = BridgeUtilities.getFunction(l, i);
+          c.getRunnableCode().evaluate(i.getScriptEnvironment());
+          return SleepUtils.getEmptyScalar();
+       }
        else if (n.equals("&invoke")) 
        {
           Map params = BridgeUtilities.extractNamedParameters(l);

Modified: sleep/src/sleep/engine/CallRequest.java
===================================================================
--- sleep/src/sleep/engine/CallRequest.java	2008-05-14 20:23:50 UTC (rev 368)
+++ sleep/src/sleep/engine/CallRequest.java	2008-05-14 20:54:49 UTC (rev 369)
@@ -334,19 +334,21 @@
             Scalar eval = inline.evaluate(getScriptEnvironment());
     
             /* restore the argument variables */
-            localLevel.putScalar("@_", oldargs);
-            if (targs > 0 && oldargs != null)
+            if (oldargs != null)
             {
-               Iterator i = oldargs.getArray().scalarIterator();
-               int      count = 1;
-               while (i.hasNext() && count <= targs)
+               localLevel.putScalar("@_", oldargs);
+               if (targs > 0)
                {
-                  Scalar temp = (Scalar)i.next();
-                  localLevel.putScalar("$" + count, temp);
-                  count++;
+                  Iterator i = oldargs.getArray().scalarIterator();
+                  int      count = 1;
+                  while (i.hasNext() && count <= targs)
+                  {
+                     Scalar temp = (Scalar)i.next();
+                     localLevel.putScalar("$" + count, temp);
+                     count++;
+                  }
                }
             }
-
             return eval;
          }
       }

Added: sleep/tests/inlineinv.sl
===================================================================
--- sleep/tests/inlineinv.sl	2008-05-14 20:23:50 UTC (rev 368)
+++ sleep/tests/inlineinv.sl	2008-05-14 20:54:49 UTC (rev 369)
@@ -0,0 +1,70 @@
+#
+#
+#
+
+inline comment
+{
+   print('<!-- ');
+   inline($1);
+   println(' -->');
+}
+
+inline p
+{
+   print('<p>');
+   inline($1);
+   println('</p>');
+}
+
+inline form
+{
+   println('<form action="'.$1.'">');
+   inline($2);
+   println('</form>');
+}
+
+inline select
+{
+   println('  <select name="'.$1.'">');
+   inline($2);
+   println('  </select>');
+}
+
+inline option
+{
+   println('   <option value="'.$1.'">'.$2.'</option>');
+}
+
+sub makePage
+{
+   local('$title');
+   $title = "Colors!!!";
+
+   form("doit.cgi",
+   {
+      p(
+      {
+         print("Favorite color? ");
+
+         select("colors",
+         {
+             pushl();
+             local('$color $index');
+             foreach $index => $color (@("red", "green", "blue", "orange"))
+             {
+                option($index, $color);
+             }
+             popl();
+
+             comment({ warn(" this is just a test :) "); });
+         });
+      });
+
+      p(
+      { 
+         print("Site title is: $title");
+      });
+   });
+}
+
+makePage();

Added: sleep/tests/output/inlineinv.sl
===================================================================
--- sleep/tests/output/inlineinv.sl	2008-05-14 20:23:50 UTC (rev 368)
+++ sleep/tests/output/inlineinv.sl	2008-05-14 20:54:49 UTC (rev 369)
@@ -0,0 +1,12 @@
+<form action="doit.cgi">
+<p>Favorite color?   <select name="colors">
+   <option value="0">red</option>
+   <option value="1">green</option>
+   <option value="2">blue</option>
+   <option value="3">orange</option>
+<!-- Warning:  this is just a test :)  at inlineinv.sl:59
+ -->
+  </select>
+</p>
+<p>Site title is: Colors!!!</p>
+</form>

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 20:23:50 UTC (rev 368)
+++ sleep/whatsnew.txt	2008-05-14 20:54:49 UTC (rev 369)
@@ -41,6 +41,8 @@
 - added &concat(@a, @b, ...) to concatenate multiple arrays
 - split('pattern', 'text', [limit]) now accepts a limit 
   parameter to allow partial splits of text.
+- added function inline({ .. }) to invoke the specified block
+  inline
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Wed May 14 23:35:26 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 14 May 2008 23:35:26 +0200
Subject: [Sleep-svn] r370 - sleep
Message-ID: <200805142135.m4ELZQqf032570@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-14 23:35:26 +0200 (Wed, 14 May 2008)
New Revision: 370

Modified:
   sleep/runtests.sl
   sleep/whatsnew.txt
Log:
..


Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-14 20:54:49 UTC (rev 369)
+++ sleep/runtests.sl	2008-05-14 21:35:26 UTC (rev 370)
@@ -1,5 +1,5 @@
 #
-# Regression test perl script.  A quick way to make sure my crazy changes aren't
+# Regression test Sleep script.  A quick way to make sure my crazy changes aren't
 # breaking my precious language.
 #
 # Runs each sleep script in the tests/ directory, compares the results to the file with the

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-14 20:54:49 UTC (rev 369)
+++ sleep/whatsnew.txt	2008-05-14 21:35:26 UTC (rev 370)
@@ -18,6 +18,7 @@
      # ...
   }
   # do something with substr($string, $start + 1) 
+
 - added &find("string", "regex", n) which returns the index of
   the substring matching the specified regex beginning at n.
   &matched() works to retrieve the matched groups from the



From rsmudge at mail.berlios.de  Thu May 15 00:56:47 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 00:56:47 +0200
Subject: [Sleep-svn] r371 - in sleep: . jsr223 jsr223/src jsr223/src/com
	jsr223/src/com/sun jsr223/src/com/sun/script
	jsr223/src/com/sun/script/sleep jsr223/src/services
Message-ID: <200805142256.m4EMultH011939@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 00:56:45 +0200 (Thu, 15 May 2008)
New Revision: 371

Added:
   sleep/jsr223/
   sleep/jsr223/build.xml
   sleep/jsr223/license-jsr223.txt
   sleep/jsr223/readme-jsr223.txt
   sleep/jsr223/sleep-engine.jar
   sleep/jsr223/src/
   sleep/jsr223/src/com/
   sleep/jsr223/src/com/sun/
   sleep/jsr223/src/com/sun/script/
   sleep/jsr223/src/com/sun/script/sleep/
   sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngine.java
   sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngineFactory.java
   sleep/jsr223/src/services/
   sleep/jsr223/src/services/javax.script.ScriptEngineFactory
Modified:
   sleep/build.xml
Log:
initial JSR223 support... it doesn't work quite yet though.



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/build.xml	2008-05-14 22:56:45 UTC (rev 371)
@@ -27,7 +27,7 @@
   <target name="docs" description="build java documentation">
      <javadoc packagenames="sleep.*"
               destdir="docs/api"
-              windowtitle="Sleep API" 
+              windowtitle="Sleep 2.1 API" 
               overview="src/overview.html">
         <fileset dir="src" defaultexcludes="yes">
            <include name="sleep/bridges/BridgeUtilities.java" />
@@ -62,14 +62,17 @@
   </target>
 
   <target name="jar" depends="compile">
+     <!-- copy the JSR223 stuff into the Sleep directory -->
+     <unzip src="jsr223/sleep-engine.jar" dest="bin" />
      <jar destfile="sleep.jar"
           basedir="bin"
-          includes="**/*.class">
-<!--         <service type="javax.script.ScriptEngineFactory" provider="org.dashnine.sleep.SleepFactory" /> -->
-         <manifest>
-           <attribute name="Main-Class" value="sleep.console.TextConsole" />
-         </manifest>
-      </jar>
+          includes="**/*" filesetmanifest="mergewithoutmain">
+
+        <!-- wow talk about jumping through hoops, whatever happened to Make? -->
+        <metainf dir="jsr223/src">
+           <include name="services/**" />
+        </metainf>
+     </jar>
   </target>
 
   <target name="clean" description="clean up" >

Added: sleep/jsr223/build.xml
===================================================================
--- sleep/jsr223/build.xml	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/build.xml	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1,38 @@
+
+<project name="sleep" default="all" basedir=".">
+  <property name="project.src"   location="src/" />
+  <property name="project.build" location="bin" />
+
+  <target name="all" depends="init, compile, jar" />
+
+  <target name="init">
+    <tstamp />
+    <mkdir dir="${project.build}" />
+  </target>
+
+  <target name="compile" depends="init" description="compile the source " >
+    <javac srcdir="${project.src}/"
+           destdir="${project.build}"
+           nowarn="yes"
+           depend="yes"
+           debug="false"
+           optimize="yes"
+    >
+    <!-- what came first, the chicken or the egg? -->
+    <classpath path="../sleep.jar" />
+    </javac>
+  </target>
+
+  <target name="jar" depends="compile">
+     <jar destfile="sleep-engine.jar"
+          basedir="bin"
+          includes="**/*.class">
+        <!-- Ant 1.7.0 service tag is broken, it creates a "service" directory not "services" -->
+<!--        <service type="javax.script.ScriptEngineFactory" provider="com.sun.script.sleep.SleepScriptEngineFactory" />  -->
+      </jar>
+  </target>
+
+  <target name="clean" description="clean up" >
+    <delete dir="${project.build}"/>
+  </target>
+</project>

Added: sleep/jsr223/license-jsr223.txt
===================================================================
--- sleep/jsr223/license-jsr223.txt	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/license-jsr223.txt	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1,32 @@
+Copyright (c) 2006, Sun Microsystems, Inc.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without 
+modification, are permitted provided that the following conditions are met:
+
+ - Redistributions of source code must retain the above copyright notice, this 
+   list of conditions and the following disclaimer.
+
+ - Redistributions in binary form must reproduce the above copyright notice, 
+   this list of conditions and the following disclaimer in the documentation 
+   and/or other materials provided with the distribution.
+
+ - Neither the name of the Sun Microsystems, Inc. nor the names of 
+   contributors may be used to endorse or promote products derived from this 
+   software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
+CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
+WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
+COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF 
+USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
+DAMAGE.

Added: sleep/jsr223/readme-jsr223.txt
===================================================================
--- sleep/jsr223/readme-jsr223.txt	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/readme-jsr223.txt	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1,25 @@
+The source code for Sleep JSR 223 support is separate to allow the primary codebase to develop
+without a dependence on Java 1.6.  To satisfy several requests this support is included in the
+main Sleep distribution.
+
+This JSR223 codebase requires Java 1.6 and Apache Ant 1.7.0 (http://ant.apache.org/)
+
+To (re)compile this code use:
+
+[raffi at beardsley ~/sleep]$ cd jsr223
+[raffi at beardsley ~/sleep/jsr223]$ ant
+
+That's it.  This will produce a sleep-engine.jar file.  Go ahead and execute the normal compilation
+of Sleep in the toplevel directory.  The contents of jsr223/sleep-engine.jar will automatically
+be included in the Sleep distribution.
+
+I'm not a consumer of the JSR223 API so there may be unintentional bugs in this factory.  Even
+though I am not a consumer I still want to deliver the best product I can to you.  If you find
+something that seems broken do not hesitate to contact me and I will work with you to resolve it.
+
+-- Raphael (rsmudge at gmail.com)
+
+
+Special thanks to A. Sundararajan (sundararajana at dev.java.net) at Sun for the development of the
+Sleep 2.0 script engine.  This code is mostly his.  I've modified it a little to support Sleep 2.1.
+

Added: sleep/jsr223/sleep-engine.jar
===================================================================
(Binary files differ)


Property changes on: sleep/jsr223/sleep-engine.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngine.java
===================================================================
--- sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngine.java	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngine.java	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1,327 @@
+/*
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved. 
+ * Use is subject to license terms.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are 
+ * permitted provided that the following conditions are met: Redistributions of source code 
+ * must retain the above copyright notice, this list of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list of 
+ * conditions and the following disclaimer in the documentation and/or other materials 
+ * provided with the distribution. Neither the name of the Sun Microsystems nor the names of 
+ * is contributors may be used to endorse or promote products derived from this software 
+ * without specific prior written permission. 
+
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * SleepScriptEngine.java
+ * @author A. Sundararajan
+ */
+
+package com.sun.script.sleep;
+
+import javax.script.*;
+import java.lang.reflect.*;
+import java.io.*;
+import java.util.*;
+
+import sleep.bridges.*;
+import sleep.engine.*;
+import sleep.interfaces.*;
+import sleep.runtime.*;
+
+public class SleepScriptEngine extends AbstractScriptEngine 
+        implements Compilable, Invocable { 
+
+    // my factory, may be null
+    private ScriptEngineFactory factory;
+    // my ScriptLoader
+    private ScriptLoader loader;
+    // my env shared by all ScriptInstances created by me
+    private Hashtable scriptEnv;
+
+    public SleepScriptEngine() {
+        loader = new ScriptLoader();
+        scriptEnv = new Hashtable();
+    }
+
+    // my implementation for CompiledScript
+    private class SleepCompiledScript extends CompiledScript {
+        // my compiled code
+        private ScriptInstance script;
+
+        SleepCompiledScript (ScriptInstance script) {
+            this.script = script;
+        }
+
+        public ScriptEngine getEngine() {
+            return SleepScriptEngine.this;
+        }
+       
+        public synchronized Object eval(ScriptContext ctx) throws ScriptException {
+            return evalScript(script, ctx);
+        }
+    }
+
+    // Compilable methods
+    public CompiledScript compile(String code) 
+                                  throws ScriptException {  
+        ScriptInstance script = compileScript(code, context);
+        return new SleepCompiledScript(script);
+    }
+
+    public CompiledScript compile (Reader reader) 
+                                  throws ScriptException {  
+        return compile(readFully(reader));
+    }
+
+    // Invocable methods
+    public Object invokeFunction(String name, Object... args) 
+                         throws ScriptException, NoSuchMethodException {       
+        return invokeImpl(null, name, args, Object.class);
+    }
+
+    public Object invokeMethod(Object obj, String name, Object... args) 
+                         throws ScriptException, NoSuchMethodException {       
+        if (obj == null) {
+            throw new IllegalArgumentException("script object is null");
+        }
+        return invokeImpl(obj, name, args, Object.class);
+    }
+
+    public <T> T getInterface(Object obj, Class<T> clazz) {
+        if (obj == null) {
+            throw new IllegalArgumentException("script object is null");
+        }
+        return makeInterface(obj, clazz);
+    }
+
+    public <T> T getInterface(Class<T> clazz) {
+        return makeInterface(null, clazz);
+    }
+
+    public <T> T makeInterface(Object obj, Class<T> clazz) {
+        if (clazz == null || !clazz.isInterface()) {
+            throw new IllegalArgumentException("interface Class expected");
+        }
+
+        final Object thiz = obj;         
+        return (T) Proxy.newProxyInstance(
+              clazz.getClassLoader(),
+              new Class[] { clazz },
+              new InvocationHandler() {
+                  public Object invoke(Object proxy, Method m, Object[] args)
+                                       throws Throwable {
+                      return invokeImpl(thiz, m.getName(), args, m.getReturnType());
+                  }
+              });
+    }
+
+    // ScriptEngine methods
+    public Object eval(String str, ScriptContext ctx) 
+                       throws ScriptException {	
+        ScriptInstance script = compileScript(str, ctx);
+        return evalScript(script, ctx);
+    }
+
+    public Object eval(Reader reader, ScriptContext ctx)
+                       throws ScriptException { 
+        ScriptInstance script = compileScript(reader, ctx);
+        return evalScript(script, ctx);
+    }
+
+    public ScriptEngineFactory getFactory() {
+	synchronized (this) {
+	    if (factory == null) {
+	    	factory = new SleepScriptEngineFactory();
+	    }
+        }
+	return factory;
+    }
+
+    public Bindings createBindings() {
+        return new SimpleBindings();
+    }
+
+    // package-private methods
+    void setFactory(ScriptEngineFactory factory) {
+        this.factory = factory;
+    }
+
+    // internals only below this point    
+    private Object sleepToJava(Object value, ScriptInstance script) {
+        return sleepToJava(value, Object.class, script);
+    }
+
+    private Object sleepToJava(Object value, Class type, ScriptInstance script) {
+        if (value instanceof Scalar) {
+            return ObjectUtilities.buildArgument(type, (Scalar)value, script);
+        } else {
+            return value;
+        }            
+    }
+
+    private Scalar javaToSleep(Object value) {
+        if (value instanceof Scalar) {
+            return (Scalar) value;
+        }
+        // seems like a bug in Sleep interpreter - not handling
+        // Short type 
+        if (value.getClass() == Short.class) {
+            return SleepUtils.getScalar((int)(((Short)value).shortValue()));
+        } else {            
+            return ObjectUtilities.BuildScalar(true, value);
+        }
+    }       
+
+    private ScriptInstance compileScript(String code, ScriptContext ctx) 
+                                 throws ScriptException {    
+        String fileName = (String) ctx.getAttribute(ScriptEngine.FILENAME);
+        if (fileName == null) {
+            fileName = "<unknown>";
+        }
+        // Compile step is nothing by loading script and saving
+        // ScriptInstance from that...
+        return loader.loadScript(fileName, code, scriptEnv);    
+    }
+
+    private ScriptInstance compileScript(Reader reader, ScriptContext ctx) 
+                                 throws ScriptException {
+        return compileScript(readFully(reader), ctx);
+    }
+    
+    private Object evalScript(final ScriptInstance script, final ScriptContext ctx) 
+                            throws ScriptException {
+       ctx.setAttribute("$context", ctx, ScriptContext.ENGINE_SCOPE);
+       // We create a Variable bridge that will resolve variables from
+       // our ScriptContext
+       ScriptVariables variables = new ScriptVariables(new DefaultVariable() {
+                        public synchronized boolean scalarExists(String key) {
+                            synchronized (ctx) {
+                                return ctx.getAttributesScope(key) != -1;
+                            }
+                        }
+
+                        public synchronized Scalar getScalar(String key) {
+                            synchronized (ctx) {
+                                int scope = ctx.getAttributesScope(key);  
+                                Object value = null;
+                                if (scope != -1) {           
+                                    value = ctx.getAttribute(key, scope);                                
+                                }
+                                Scalar scalar = javaToSleep(value);
+                                // not to store Scalar in the ScriptContext or else
+                                // we'll loose modifications to it. Note that Scalar
+                                // has one further level of indirection via ScalarType.
+                                ctx.setAttribute(key, scalar, scope);
+                                return scalar;
+                            }
+                        }
+
+                        public synchronized Scalar putScalar(String key, Scalar value) {
+                            synchronized (ctx) {
+                                int scope = ctx.getAttributesScope(key);
+                                Scalar oldValue = null;
+                                if (scope == -1) {
+                                    scope = ScriptContext.ENGINE_SCOPE;  
+                                } else {
+                                    oldValue = javaToSleep(ctx.getAttribute(key));
+                                } 
+                                ctx.setAttribute(key, value, scope);
+                                return oldValue;
+                            }
+                        }
+
+                        public synchronized void removeScalar(String key) {
+                            synchronized (ctx) {
+                                int scope = ctx.getAttributesScope(key);
+                                if (scope != -1) {
+                                    ctx.removeAttribute(key, scope);
+                                }
+                            }
+                        }
+ 
+                    });
+        
+        script.setScriptVariables(variables);
+        try {
+            // run the script and convert return value
+            return sleepToJava(script.runScript(), script);
+        } catch (Exception e) {
+            throw new ScriptException(e);
+        }
+    }    
+
+    private Object invokeImpl(Object thiz, String name, 
+                      Object[] args, Class returnType) 
+                      throws ScriptException, NoSuchMethodException {
+        if (name == null) {
+            throw new NullPointerException("method name is null");
+        }
+        // Sleep routine names start with a '&'
+        if (!name.startsWith("&")) {
+            name = "&" + name;
+        }
+        ScriptInstance script = new ScriptInstance(scriptEnv);
+        Object func = null;
+        try {
+            // Object orientation by Closures - Sleep's "objects" are
+            // Closures with first parameter being the name of the message.
+            if (thiz != null) { 
+                // do we have a Function Scalar as 'thiz' script object?
+                if (thiz instanceof Scalar && 
+                    SleepUtils.isFunctionScalar((Scalar)thiz)) {
+                    thiz = SleepUtils.getFunctionFromScalar((Scalar)thiz, script);
+                }
+                if (thiz instanceof Function) {
+                    func = thiz;
+                } 
+            } else {
+                // no thiz. Look for global subroutine using environment
+                func = scriptEnv.get(name);
+            }
+        } catch (Exception e) {
+            throw new ScriptException(e);
+        }
+  
+        if (func instanceof Function) {
+            Stack sArgs = new Stack();
+            // Sleep arguments have to be pushed in reverse order
+            for (int i = args.length - 1; i >= 0; i--) {
+                sArgs.push(javaToSleep(args[i]));
+            }
+            try {
+                // run script function
+                return SleepUtils.runCode((Function)func, name.substring(1), 
+                                 script, sArgs);
+            } catch (Exception e) {
+                throw new ScriptException(e);
+            }
+        } else {
+            throw new NoSuchMethodException(name.substring(1));
+        }
+    }
+
+    private String readFully(Reader reader) throws ScriptException { 
+        char[] arr = new char[8*1024]; // 8K at a time
+        StringBuilder buf = new StringBuilder();
+        int numChars;
+        try {
+            while ((numChars = reader.read(arr, 0, arr.length)) > 0) {
+                buf.append(arr, 0, numChars);
+            }
+        } catch (IOException exp) {
+            throw new ScriptException(exp);
+        }
+        return buf.toString();
+    }
+}

Added: sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngineFactory.java
===================================================================
--- sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngineFactory.java	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/src/com/sun/script/sleep/SleepScriptEngineFactory.java	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1,151 @@
+/*
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved. 
+ * Use is subject to license terms.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are 
+ * permitted provided that the following conditions are met: Redistributions of source code 
+ * must retain the above copyright notice, this list of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list of 
+ * conditions and the following disclaimer in the documentation and/or other materials 
+ * provided with the distribution. Neither the name of the Sun Microsystems nor the names of 
+ * is contributors may be used to endorse or promote products derived from this software 
+ * without specific prior written permission. 
+
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * SleepScriptEngineFactory.java
+ * @author A. Sundararajan
+ */
+
+package com.sun.script.sleep;
+
+import javax.script.*;
+import java.util.*;
+
+public class SleepScriptEngineFactory implements ScriptEngineFactory {
+    public String getEngineName() { 
+        return "sleep";
+    }
+
+    public String getEngineVersion() {
+        return "2.0";
+    }
+
+    public List<String> getExtensions() {
+        return extensions;
+    }
+
+    public String getLanguageName() {
+        return "sleep";
+    }
+
+    public String getLanguageVersion() {
+        return "2.0";
+    }
+
+    public String getMethodCallSyntax(String obj, String m, String... args) {
+        StringBuilder buf = new StringBuilder();
+        buf.append('[');
+        buf.append(obj);
+        buf.append(' ');
+        buf.append(m);
+        buf.append(':');
+        if (args.length != 0) {
+            int i = 0;
+            for (; i < args.length - 1; i++) {
+                buf.append(args[i] + ", ");
+            }
+            buf.append(args[i]);
+        }        
+        buf.append(")");
+        buf.append(']');
+        return buf.toString();
+    }
+
+    public List<String> getMimeTypes() {
+        return mimeTypes;
+    }
+
+    public List<String> getNames() {
+        return names;
+    }
+
+    public String getOutputStatement(String toDisplay) {
+        StringBuilder buf = new StringBuilder();
+        buf.append("print(\"");
+        int len = toDisplay.length();
+        for (int i = 0; i < len; i++) {
+            char ch = toDisplay.charAt(i);
+            switch (ch) {
+            case '"':
+                buf.append("\\\"");
+                break;
+            case '\\':
+                buf.append("\\\\");
+                break;
+            default:
+                buf.append(ch);
+                break;
+            }
+        }
+        buf.append("\")");
+        return buf.toString();
+    }
+
+    public String getParameter(String key) {
+        if (key.equals(ScriptEngine.ENGINE)) {
+            return getEngineName();
+        } else if (key.equals(ScriptEngine.ENGINE_VERSION)) {
+            return getEngineVersion();
+        } else if (key.equals(ScriptEngine.NAME)) {
+            return getEngineName();
+        } else if (key.equals(ScriptEngine.LANGUAGE)) {
+            return getLanguageName();
+        } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {
+            return getLanguageVersion();
+        } else if (key.equals("THREADING")) {
+            return "MULTITHREADED";
+        } else {
+            return null;
+        }
+    } 
+
+    public String getProgram(String... statements) {
+        StringBuilder buf = new StringBuilder();
+        for (int i = 0; i < statements.length; i++) {
+            buf.append(statements[i]);
+            buf.append(";\n");
+        }
+        return buf.toString();
+    }
+
+    public ScriptEngine getScriptEngine() {
+        SleepScriptEngine engine = new SleepScriptEngine();
+   	  engine.setFactory(this);
+        return engine;
+    }
+
+    private static List<String> names;
+    private static List<String> extensions;
+    private static List<String> mimeTypes;
+    static {
+        names = new ArrayList<String>(1);
+        names.add("sleep");
+        names = Collections.unmodifiableList(names);
+        extensions = new ArrayList<String>(1);
+        extensions.add("sl");
+        extensions = Collections.unmodifiableList(extensions);
+        mimeTypes = new ArrayList<String>(0);
+        mimeTypes = Collections.unmodifiableList(mimeTypes);
+    }
+}

Added: sleep/jsr223/src/services/javax.script.ScriptEngineFactory
===================================================================
--- sleep/jsr223/src/services/javax.script.ScriptEngineFactory	2008-05-14 21:35:26 UTC (rev 370)
+++ sleep/jsr223/src/services/javax.script.ScriptEngineFactory	2008-05-14 22:56:45 UTC (rev 371)
@@ -0,0 +1 @@
+com.sun.script.sleep.SleepScriptEngineFactory



From rsmudge at mail.berlios.de  Thu May 15 03:44:11 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 03:44:11 +0200
Subject: [Sleep-svn] r375 - sleep/jsr223
Message-ID: <200805150144.m4F1iBIe017038@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 03:44:11 +0200 (Thu, 15 May 2008)
New Revision: 375

Modified:
   sleep/jsr223/readme-jsr223.txt
Log:
..


Modified: sleep/jsr223/readme-jsr223.txt
===================================================================
--- sleep/jsr223/readme-jsr223.txt	2008-05-15 01:20:22 UTC (rev 374)
+++ sleep/jsr223/readme-jsr223.txt	2008-05-15 01:44:11 UTC (rev 375)
@@ -13,14 +13,14 @@
 of Sleep in the toplevel directory.  The contents of jsr223/sleep-engine.jar will automatically
 be included in the sleep.jar file.
 
-**** Make sure sleep.jar is in the classpath ****
-
 To run a script (.sl is recognized as a sleep script):
 
-[raffi at beardsley ~/sleep] jrunscript -f file.sl
+[raffi at beardsley ~/sleep] jrunscript -cp sleep.jar -l sleep -f file.sl
 
 To evaluate Sleep code within Java:
 
+  **** Make sure sleep.jar is in the classpath ****
+
   ScriptEngineManager manager = new ScriptEngineManager();
   ScriptEngine sleepEngine = manager.getEngineByName("sleep");
 



From rsmudge at mail.berlios.de  Thu May 15 03:20:24 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 03:20:24 +0200
Subject: [Sleep-svn] r374 - sleep/jsr223
Message-ID: <200805150120.m4F1KNUt015535@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 03:20:22 +0200 (Thu, 15 May 2008)
New Revision: 374

Modified:
   sleep/jsr223/readme-jsr223.txt
Log:
argh!!


Modified: sleep/jsr223/readme-jsr223.txt
===================================================================
--- sleep/jsr223/readme-jsr223.txt	2008-05-15 01:06:25 UTC (rev 373)
+++ sleep/jsr223/readme-jsr223.txt	2008-05-15 01:20:22 UTC (rev 374)
@@ -13,10 +13,19 @@
 of Sleep in the toplevel directory.  The contents of jsr223/sleep-engine.jar will automatically
 be included in the sleep.jar file.
 
-Running a script doesn't get any easier than this:
+**** Make sure sleep.jar is in the classpath ****
 
-[raffi at beardsley ~/sleep] jrunscript -cp sleep.jar -l sleep -f file.sl
+To run a script (.sl is recognized as a sleep script):
 
+[raffi at beardsley ~/sleep] jrunscript -f file.sl
+
+To evaluate Sleep code within Java:
+
+  ScriptEngineManager manager = new ScriptEngineManager();
+  ScriptEngine sleepEngine = manager.getEngineByName("sleep");
+
+  @see http://java.sun.com/javase/6/docs/api/javax/script/ScriptEngine.html
+  
 Some notes about the integration:
 
 - The GLOBAL_SCOPE Bindings of the ScriptContext are treated as Sleep globals.  The Binding values



From rsmudge at mail.berlios.de  Thu May 15 03:06:29 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 03:06:29 +0200
Subject: [Sleep-svn] r373 - sleep
Message-ID: <200805150106.m4F16TOK014895@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 03:06:25 +0200 (Thu, 15 May 2008)
New Revision: 373

Modified:
   sleep/build.xml
   sleep/whatsnew.txt
Log:
..


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-15 01:01:25 UTC (rev 372)
+++ sleep/build.xml	2008-05-15 01:06:25 UTC (rev 373)
@@ -66,8 +66,12 @@
      <unzip src="jsr223/sleep-engine.jar" dest="bin" />
      <jar destfile="sleep.jar"
           basedir="bin"
-          includes="**/*" filesetmanifest="mergewithoutmain">
+          includes="**/*">
 
+         <manifest>
+           <attribute name="Main-Class" value="sleep.console.TextConsole" />
+         </manifest>
+
         <!-- wow talk about jumping through hoops, whatever happened to Make? -->
         <metainf dir="jsr223/src">
            <include name="services/**" />

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 01:01:25 UTC (rev 372)
+++ sleep/whatsnew.txt	2008-05-15 01:06:25 UTC (rev 373)
@@ -44,6 +44,9 @@
   parameter to allow partial splits of text.
 - added function inline({ .. }) to invoke the specified block
   inline
+- added JSR223/javax.script API support.  sleep.jar is now a 
+  service provider for this API.  See jsr223/readme-jsr223.txt
+  for more information.
   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Thu May 15 03:01:26 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 03:01:26 +0200
Subject: [Sleep-svn] r372 - in sleep/jsr223: . src src/org src/org/dashnine
	src/org/dashnine/sleep src/services
Message-ID: <200805150101.m4F11Qn0014715@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 03:01:25 +0200 (Thu, 15 May 2008)
New Revision: 372

Added:
   sleep/jsr223/src/org/
   sleep/jsr223/src/org/dashnine/
   sleep/jsr223/src/org/dashnine/sleep/
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
Removed:
   sleep/jsr223/src/com/
Modified:
   sleep/jsr223/readme-jsr223.txt
   sleep/jsr223/sleep-engine.jar
   sleep/jsr223/src/services/javax.script.ScriptEngineFactory
Log:
finished JSR223 integration


Modified: sleep/jsr223/readme-jsr223.txt
===================================================================
--- sleep/jsr223/readme-jsr223.txt	2008-05-14 22:56:45 UTC (rev 371)
+++ sleep/jsr223/readme-jsr223.txt	2008-05-15 01:01:25 UTC (rev 372)
@@ -11,15 +11,28 @@
 
 That's it.  This will produce a sleep-engine.jar file.  Go ahead and execute the normal compilation
 of Sleep in the toplevel directory.  The contents of jsr223/sleep-engine.jar will automatically
-be included in the Sleep distribution.
+be included in the sleep.jar file.
 
-I'm not a consumer of the JSR223 API so there may be unintentional bugs in this factory.  Even
-though I am not a consumer I still want to deliver the best product I can to you.  If you find
-something that seems broken do not hesitate to contact me and I will work with you to resolve it.
+Running a script doesn't get any easier than this:
 
+[raffi at beardsley ~/sleep] jrunscript -cp sleep.jar -l sleep -f file.sl
+
+Some notes about the integration:
+
+- The GLOBAL_SCOPE Bindings of the ScriptContext are treated as Sleep globals.  The Binding values
+  are dumped into an object scalar with no conversion.
+
+- The getErrorWriter(), getReader(), and getWriter() values of ScriptContext are virtually ignored.
+  1) Sleep doesn't speak Reader/Writer language and 2) they seem to act as blackholes when 
+  scripts are executed with JRunScript.  
+
+- All scripts share variables and environment.  This was as much a necessity as a convienence.
+
+That's about it.  The integration is minimal but it seems to work.  If you encounter any bugs
+don't hesitate to contact me.
+
 -- Raphael (rsmudge at gmail.com)
 
 
 Special thanks to A. Sundararajan (sundararajana at dev.java.net) at Sun for the development of the
-Sleep 2.0 script engine.  This code is mostly his.  I've modified it a little to support Sleep 2.1.
-
+Sleep 2.0 script engine.  

Modified: sleep/jsr223/sleep-engine.jar
===================================================================
(Binary files differ)

Added: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-14 22:56:45 UTC (rev 371)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-15 01:01:25 UTC (rev 372)
@@ -0,0 +1,200 @@
+/*
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved. 
+ * Use is subject to license terms.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are 
+ * permitted provided that the following conditions are met: Redistributions of source code 
+ * must retain the above copyright notice, this list of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list of 
+ * conditions and the following disclaimer in the documentation and/or other materials 
+ * provided with the distribution. Neither the name of the Sun Microsystems nor the names of 
+ * is contributors may be used to endorse or promote products derived from this software 
+ * without specific prior written permission. 
+
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * SleepScriptEngine.java
+ * @author A. Sundararajan
+ */
+
+/* Derived from code created by A. Sundararajan (sundararajana at dev.java.net) at Sun 
+   What remains of this class is almost unrecognizable from the original. */
+
+package org.dashnine.sleep;
+
+import javax.script.*; 
+import java.lang.reflect.*; 
+import java.io.*; 
+import java.util.*;
+
+import sleep.bridges.*; 
+import sleep.engine.*; 
+import sleep.interfaces.*; 
+import sleep.runtime.*;
+
+import sleep.error.*;
+
+public class SleepScriptEngine extends AbstractScriptEngine
+{
+    // my factory, may be null
+    private ScriptEngineFactory factory;
+
+    private ScriptLoader    loader;
+    private Hashtable       sharedEnvironment;
+    private ScriptVariables variables;
+
+    private static class BindingVariables extends sleep.bridges.DefaultVariable
+    {
+        protected Bindings vars;
+
+        public BindingVariables(Bindings b)
+        {
+           vars = b;
+        }        
+
+        public Scalar putScalar(String key, Scalar value)
+        {
+           if (vars != null && vars.containsKey(key.substring(1)))
+           {
+              vars.put(key.substring(1), value.objectValue());
+           }
+
+           return super.putScalar(key, value);
+        }
+
+        public Scalar getScalar(String key)
+        {
+           if (vars != null && vars.containsKey(key.substring(1)))
+           {
+              return SleepUtils.getScalar(vars.get(key.substring(1)));
+           }
+
+           return super.getScalar(key);
+        }
+
+        public boolean scalarExists(String key)
+        {
+           if (vars != null && vars.containsKey(key.substring(1)))
+           {
+              return true;
+           }
+
+           return super.scalarExists(key);
+        }
+    }
+
+    // ..
+    public SleepScriptEngine()
+    {
+        loader = new ScriptLoader();
+        sharedEnvironment = new Hashtable();
+    }
+
+    /** executes a console command */
+    public Object eval(String str, ScriptContext ctx) throws ScriptException
+    {
+        ScriptInstance script = compile(str, ctx);
+        return evalScript(script, ctx);
+    }
+
+    /** executes a script */
+    public Object eval(Reader reader, ScriptContext ctx) throws ScriptException
+    {
+        ScriptInstance script = compile(readFully(reader), ctx);
+        return evalScript(script, ctx);
+    }
+
+    private Object evalScript(ScriptInstance script, ScriptContext context)
+    {
+        return script.runScript().objectValue();
+    }
+
+    private static class WarningWatcher implements RuntimeWarningWatcher
+    {
+        protected ScriptContext context;
+
+        public WarningWatcher(ScriptContext _context)
+        {
+           context = _context;
+        }
+
+        public void processScriptWarning(ScriptWarning warning)    
+        {
+           System.out.println(warning.toString());
+        }
+    }
+
+    private ScriptInstance compile(String text, ScriptContext context) throws ScriptException
+    {
+        try
+        {
+           ScriptInstance script = loader.loadScript("eval", text, sharedEnvironment);
+
+           if (variables == null)
+           {
+              variables = new ScriptVariables(new BindingVariables(context.getBindings(ScriptContext.GLOBAL_SCOPE)));
+           }
+
+           script.setScriptVariables(variables);
+
+           script.addWarningWatcher(new WarningWatcher(context));
+           return script;
+        }
+        catch (YourCodeSucksException ex)
+        {
+           throw new ScriptException(ex.formatErrors());
+        }
+    }
+
+    public ScriptEngineFactory getFactory()
+    {
+	synchronized (this)
+        {
+	    if (factory == null)
+            {
+	    	factory = new SleepScriptEngineFactory();
+	    }
+        }
+	return factory;
+    }
+
+    public Bindings createBindings()
+    {
+        return new SimpleBindings();
+    }
+
+    // package-private methods
+    void setFactory(ScriptEngineFactory factory)
+    {
+        this.factory = factory;
+    }
+
+    private String readFully(Reader reader) throws ScriptException 
+    {
+        char[] arr = new char[8*1024]; // 8K at a time
+        StringBuilder buf = new StringBuilder();
+        int numChars;
+        try 
+        {
+            while ((numChars = reader.read(arr, 0, arr.length)) > 0) 
+            {
+                buf.append(arr, 0, numChars);
+            }
+        } 
+        catch (IOException exp) 
+        {
+            throw new ScriptException(exp);
+        }
+        return buf.toString();
+    }
+}

Added: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-14 22:56:45 UTC (rev 371)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-15 01:01:25 UTC (rev 372)
@@ -0,0 +1,163 @@
+/*
+ * Copyright 2006 Sun Microsystems, Inc. All rights reserved. 
+ * Use is subject to license terms.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are 
+ * permitted provided that the following conditions are met: Redistributions of source code 
+ * must retain the above copyright notice, this list of conditions and the following disclaimer.
+ * Redistributions in binary form must reproduce the above copyright notice, this list of 
+ * conditions and the following disclaimer in the documentation and/or other materials 
+ * provided with the distribution. Neither the name of the Sun Microsystems nor the names of 
+ * is contributors may be used to endorse or promote products derived from this software 
+ * without specific prior written permission. 
+
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
+ * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * SleepScriptEngineFactory.java
+ * @author A. Sundararajan
+ */
+
+package org.dashnine.sleep;
+
+import javax.script.*;
+import java.util.*;
+
+public class SleepScriptEngineFactory implements ScriptEngineFactory 
+{
+    public String getEngineName() 
+    { 
+        return "sleep";
+    }
+
+    public String getEngineVersion() 
+    {
+        return "2.1";
+    }
+
+    public List<String> getExtensions() 
+    {
+        return extensions;
+    }
+
+    public String getLanguageName() 
+    {
+        return "sleep";
+    }
+
+    public String getLanguageVersion() 
+    {
+        return "2.1";
+    }
+
+    public String getMethodCallSyntax(String obj, String m, String... args) 
+    {
+        StringBuilder buf = new StringBuilder();
+        buf.append('[');
+        buf.append(obj);
+        buf.append(' ');
+        buf.append(m);
+        buf.append(':');
+        if (args.length != 0) 
+        {
+            int i = 0;
+            for (; i < args.length - 1; i++) 
+            {
+                buf.append(args[i] + ", ");
+            }
+            buf.append(args[i]);
+        }        
+        buf.append(")");
+        buf.append(']');
+        return buf.toString();
+    }
+
+    public List<String> getMimeTypes() 
+    {
+        return mimeTypes;
+    }
+
+    public List<String> getNames() 
+    {
+        return names;
+    }
+
+    public String getOutputStatement(String toDisplay) 
+    {
+        StringBuilder buf = new StringBuilder();
+        buf.append("print('");
+        int len = toDisplay.length();
+        for (int i = 0; i < len; i++) 
+        {
+            char ch = toDisplay.charAt(i);
+            switch (ch) {
+            case '\'':
+                buf.append("\'");
+                break;
+            default:
+                buf.append(ch);
+                break;
+            }
+        }
+        buf.append("')");
+        return buf.toString();
+    }
+
+    public String getParameter(String key) 
+    {
+        if (key.equals(ScriptEngine.ENGINE)) {
+            return getEngineName();
+        } else if (key.equals(ScriptEngine.ENGINE_VERSION)) {
+            return getEngineVersion();
+        } else if (key.equals(ScriptEngine.NAME)) {
+            return getEngineName();
+        } else if (key.equals(ScriptEngine.LANGUAGE)) {
+            return getLanguageName();
+        } else if (key.equals(ScriptEngine.LANGUAGE_VERSION)) {
+            return getLanguageVersion();
+        } else if (key.equals("THREADING")) {
+            return "MULTITHREADED";
+        } else {
+            return null;
+        }
+    } 
+
+    public String getProgram(String... statements) 
+    {
+        StringBuilder buf = new StringBuilder();
+        for (int i = 0; i < statements.length; i++) {
+            buf.append(statements[i]);
+            buf.append(";\n");
+        }
+        return buf.toString();
+    }
+
+    public ScriptEngine getScriptEngine() {
+        SleepScriptEngine engine = new SleepScriptEngine();
+   	  engine.setFactory(this);
+        return engine;
+    }
+
+    private static List<String> names;
+    private static List<String> extensions;
+    private static List<String> mimeTypes;
+    static {
+        names = new ArrayList<String>(1);
+        names.add("sleep");
+        names = Collections.unmodifiableList(names);
+        extensions = new ArrayList<String>(1);
+        extensions.add("sl");
+        extensions = Collections.unmodifiableList(extensions);
+        mimeTypes = new ArrayList<String>(0);
+        mimeTypes = Collections.unmodifiableList(mimeTypes);
+    }
+}

Modified: sleep/jsr223/src/services/javax.script.ScriptEngineFactory
===================================================================
--- sleep/jsr223/src/services/javax.script.ScriptEngineFactory	2008-05-14 22:56:45 UTC (rev 371)
+++ sleep/jsr223/src/services/javax.script.ScriptEngineFactory	2008-05-15 01:01:25 UTC (rev 372)
@@ -1 +1 @@
-com.sun.script.sleep.SleepScriptEngineFactory
+org.dashnine.sleep.SleepScriptEngineFactory



From rsmudge at mail.berlios.de  Thu May 15 06:50:30 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 06:50:30 +0200
Subject: [Sleep-svn] r376 - in sleep/jsr223: . src/org/dashnine/sleep
Message-ID: <200805150450.m4F4oUx5016945@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 06:50:24 +0200 (Thu, 15 May 2008)
New Revision: 376

Modified:
   sleep/jsr223/sleep-engine.jar
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
Log:
..


Modified: sleep/jsr223/sleep-engine.jar
===================================================================
(Binary files differ)

Modified: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-15 01:44:11 UTC (rev 375)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-15 04:50:24 UTC (rev 376)
@@ -32,6 +32,8 @@
 import javax.script.*;
 import java.util.*;
 
+import sleep.runtime.*;
+
 public class SleepScriptEngineFactory implements ScriptEngineFactory 
 {
     public String getEngineName() 
@@ -41,7 +43,7 @@
 
     public String getEngineVersion() 
     {
-        return "2.1";
+        return SleepUtils.SLEEP_RELEASE + "";
     }
 
     public List<String> getExtensions() 
@@ -51,7 +53,7 @@
 
     public String getLanguageName() 
     {
-        return "sleep";
+        return "Sleep";
     }
 
     public String getLanguageVersion() 
@@ -151,11 +153,13 @@
     private static List<String> extensions;
     private static List<String> mimeTypes;
     static {
-        names = new ArrayList<String>(1);
+        names = new ArrayList<String>(2);
         names.add("sleep");
+        names.add("Sleep");
         names = Collections.unmodifiableList(names);
-        extensions = new ArrayList<String>(1);
+        extensions = new ArrayList<String>(2);
         extensions.add("sl");
+        extensions.add(".sl");
         extensions = Collections.unmodifiableList(extensions);
         mimeTypes = new ArrayList<String>(0);
         mimeTypes = Collections.unmodifiableList(mimeTypes);



From rsmudge at mail.berlios.de  Thu May 15 18:10:38 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 18:10:38 +0200
Subject: [Sleep-svn] r377 - in sleep: . src/sleep/bridges src/sleep/console
	src/sleep/runtime
Message-ID: <200805151610.m4FGAcb0020864@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 18:10:37 +0200 (Thu, 15 May 2008)
New Revision: 377

Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/console/ConsoleImplementation.java
   sleep/src/sleep/runtime/ScriptLoader.java
   sleep/whatsnew.txt
Log:
changes to how the script loader handles cached files


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-15 04:50:24 UTC (rev 376)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-15 16:10:37 UTC (rev 377)
@@ -351,11 +351,16 @@
                 if (parent != null)
                 {
                    URLClassLoader loader = new URLClassLoader(new URL[] { parent.toURL() });
+                   sloader.touch(className, parent.isDirectory() ? new File(parent, className).lastModified() : parent.lastModified());
+
                    istream = loader.getResourceAsStream(className);
                 }
                 else
                 {
-                   istream = new FileInputStream(BridgeUtilities.toSleepFile(className, si));
+                   File tempf = BridgeUtilities.toSleepFile(className, si);
+                   sloader.touch(className, tempf.lastModified());
+
+                   istream = new FileInputStream(tempf);
                 }
 
                 if (istream != null)

Modified: sleep/src/sleep/console/ConsoleImplementation.java
===================================================================
--- sleep/src/sleep/console/ConsoleImplementation.java	2008-05-15 04:50:24 UTC (rev 376)
+++ sleep/src/sleep/console/ConsoleImplementation.java	2008-05-15 16:10:37 UTC (rev 377)
@@ -471,7 +471,7 @@
        }
        else
        {
-          HashMap temp = loader.getScriptsByKey();
+          Map temp = loader.getScriptsByKey();
 
           if (temp.get(getFullScript(item)) != null)
           {
@@ -493,7 +493,7 @@
        }
        else
        {
-          HashMap temp = loader.getScriptsByKey();
+          Map temp = loader.getScriptsByKey();
 
           if (temp.get(getFullScript(item)) != null)
           {

Modified: sleep/src/sleep/runtime/ScriptLoader.java
===================================================================
--- sleep/src/sleep/runtime/ScriptLoader.java	2008-05-15 04:50:24 UTC (rev 376)
+++ sleep/src/sleep/runtime/ScriptLoader.java	2008-05-15 16:10:37 UTC (rev 377)
@@ -92,8 +92,39 @@
     /**
      * cache for parsed scripts mantained (optionally) by the script loader.
      */
-    protected static HashMap BLOCK_CACHE = null;
+    protected static Map BLOCK_CACHE = null;
 
+    private Block retrieveCacheEntry(String name)
+    {
+       if (BLOCK_CACHE != null && BLOCK_CACHE.containsKey(name))
+       {
+          Object[] temp = (Object[])BLOCK_CACHE.get(name);
+          return (Block)temp[0];
+       }
+
+       return null;
+    }
+
+    private static boolean isCacheHit(String name)
+    {
+       return BLOCK_CACHE != null && BLOCK_CACHE.containsKey(name);
+    }
+
+    /** nudge the cache with the last modified time of the specified script.  this call will delete the script from the cache if the lastModifiedTime > lastLoadTime */
+    public void touch(String name, long lastModifiedTime)
+    {
+       if (BLOCK_CACHE != null && BLOCK_CACHE.containsKey(name))
+       {
+          Object[] temp   = (Object[])BLOCK_CACHE.get(name);
+          long     loaded = ((Long)temp[1]).longValue();
+
+          if (lastModifiedTime > loaded)
+          {
+             BLOCK_CACHE.remove(name);
+          }
+       }
+    }
+
     /**
      * loaded scripts
      */
@@ -102,7 +133,7 @@
     /**
      * loaded scripts except referable by key
      */
-    protected HashMap scripts;
+    protected Map scripts;
 
     /**
      * global bridges
@@ -136,10 +167,10 @@
      * The Sleep script loader can optionally cache parsed script files once they are loaded.  This is useful if you will have
      * several script loader instances loading the same script files in isolated objects.
      */
-    public HashMap setGlobalCache(boolean setting)
+    public Map setGlobalCache(boolean setting)
     {
         if (setting && BLOCK_CACHE == null)
-            BLOCK_CACHE = new HashMap();
+            BLOCK_CACHE = Collections.synchronizedMap(new HashMap());
 
         if (!setting)
             BLOCK_CACHE = null;
@@ -187,7 +218,7 @@
      * Returns a HashMap with all loaded scripts, the key is a string which is just the filename, the value is a ScriptInstance
      * object
      */
-    public HashMap getScriptsByKey()
+    public Map getScriptsByKey()
     {
         return scripts;
     }
@@ -205,7 +236,8 @@
      */
     public ScriptEnvironment getFirstScriptEnvironment()
     {
-        if (loadedScripts.size() > 0) {
+        if (loadedScripts.size() > 0) 
+        {
             ScriptInstance si = (ScriptInstance) loadedScripts.getFirst();
             return si.getScriptEnvironment();
         }
@@ -230,14 +262,17 @@
         si.setName(name);
 
         Iterator i = bridgess.iterator();
-        while (i.hasNext()) {
+        while (i.hasNext()) 
+        {
             ((Loadable) i.next()).scriptLoaded(si);
         }
 
         // load the "global" bridges iff they need to be loaded again...
-        if (si.getScriptEnvironment().getEnvironment().get("(isloaded)") != this) {
+        if (si.getScriptEnvironment().getEnvironment().get("(isloaded)") != this) 
+        {
             i = bridgesg.iterator();
-            while (i.hasNext()) {
+            while (i.hasNext()) 
+            {
                 ((Loadable) i.next()).scriptLoaded(si);
             }
             si.getScriptEnvironment().getEnvironment().put("(isloaded)", this);
@@ -263,7 +298,8 @@
     {
         File bin = new File(script.getAbsolutePath() + ".bin");
 
-        if (bin.exists() && (!script.exists() || script.lastModified() < bin.lastModified())) {
+        if (bin.exists() && (!script.exists() || script.lastModified() < bin.lastModified())) 
+        {
             return loadSerialized(script.getName(), new FileInputStream(bin), env);
         }
 
@@ -307,11 +343,6 @@
         return si;
     }
 
-    private static boolean isCacheHit(String name)
-    {
-        return BLOCK_CACHE != null && BLOCK_CACHE.containsKey(name);
-    }
-
     /** loads the specified script */
     public ScriptInstance loadScript(String name, String code, Hashtable env) throws YourCodeSucksException
     {
@@ -321,16 +352,18 @@
     /** compiles a script using the specified stream as a source */
     public Block compileScript(String name, InputStream stream) throws YourCodeSucksException, IOException
     {
-        if (isCacheHit(name)) {
+        if (isCacheHit(name)) 
+        {
             stream.close();
-            return compileScript(name, "");
+            return retrieveCacheEntry(name);
         }
 
-        StringBuffer code = new StringBuffer("");
+        StringBuffer code = new StringBuffer();
 
         BufferedReader in = new BufferedReader(getInputStreamReader(stream));
         String s = in.readLine();
-        while (s != null) {
+        while (s != null) 
+        {
             code.append("\n");
             code.append(s);
             s = in.readLine();
@@ -347,6 +380,7 @@
      */
     public Block compileScript(File file) throws IOException, YourCodeSucksException
     {
+        touch(file.getAbsolutePath(), file.lastModified());
         return compileScript(file.getAbsolutePath(), new FileInputStream(file));
     }
 
@@ -363,8 +397,7 @@
     {
         if (isCacheHit(name)) 
         {
-            //System.out.println("BLOCK CACHE HIT FOR: " + name);
-            return (Block) BLOCK_CACHE.get(name);
+            return retrieveCacheEntry(name);
         } 
         else 
         {
@@ -378,7 +411,9 @@
             temp.parse();
 
             if (BLOCK_CACHE != null)
-                BLOCK_CACHE.put(name, temp.getRunnableBlock());
+            {
+                BLOCK_CACHE.put(name, new Object[] { temp.getRunnableBlock(), new Long(System.currentTimeMillis()) });
+            }
 
             return temp.getRunnableBlock();
         }
@@ -442,10 +477,9 @@
     public void unloadScript(ScriptInstance script)
     {
         // clear the block cache of this script...
-        if (BLOCK_CACHE != null) {
-            //System.out.println("Removing: " + script.getName() + " from BLOCK_CACHE");
-            //BLOCK_CACHE.remove(script.getName());
-            BLOCK_CACHE.clear();
+        if (BLOCK_CACHE != null) 
+        {
+            BLOCK_CACHE.remove(script.getName());
         }
 
         //

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 04:50:24 UTC (rev 376)
+++ sleep/whatsnew.txt	2008-05-15 16:10:37 UTC (rev 377)
@@ -47,7 +47,12 @@
 - added JSR223/javax.script API support.  sleep.jar is now a 
   service provider for this API.  See jsr223/readme-jsr223.txt
   for more information.
-  
+- Reworked the ScriptLoader compiled code cache.  It works mostly
+  as before except now an unloaded script will not delete the 
+  entire cache.  This was put in place to account for &include'd
+  scripts.  Now &include validates its last modified timestamp
+  with the ScriptLoader prior to (re)loading.  
+   
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========
 - added &chdir() to change the current working directory of the



From rsmudge at mail.berlios.de  Thu May 15 19:49:26 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 19:49:26 +0200
Subject: [Sleep-svn] r378 - in sleep: . src/sleep/bridges tests
Message-ID: <200805151749.m4FHnQNX022589@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 19:49:25 +0200 (Thu, 15 May 2008)
New Revision: 378

Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/tests/behavior.sl
   sleep/whatsnew.txt
Log:
reinstated the ability for regex's to recurse on eachother... 


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-15 16:10:37 UTC (rev 377)
+++ sleep/build.xml	2008-05-15 17:49:25 UTC (rev 378)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-15 16:10:37 UTC (rev 377)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-15 17:49:25 UTC (rev 378)
@@ -117,19 +117,30 @@
        }
     }
 
-    /** a helper utility to get the matcher out of the script environment */
-    private static Scalar getMatcher(ScriptEnvironment env, String text, Pattern p)
+    private static String key(String text, Pattern p)
     {
+       StringBuffer buffer = new StringBuffer();
+       buffer.append(text);
+       buffer.append(p.pattern());
+
+       return buffer.toString();
+    }
+
+    private static Scalar getLastMatcher(ScriptEnvironment env)
+    {
        Scalar temp = (Scalar)env.getContextMetadata("matcher");
+       return temp == null ? SleepUtils.getEmptyScalar() : temp;    
+    }
 
-       if (temp == null && text == null && p == null)
+    /** a helper utility to get the matcher out of the script environment */
+    private static Scalar getMatcher(ScriptEnvironment env, String key, String text, Pattern p)
+    {
+       Scalar temp = (Scalar)env.getContextMetadata(key);
+
+       if (temp == null)
        {
-          return SleepUtils.getEmptyScalar();
-       }
-       else if (temp == null || (p != null && ((Matcher)temp.objectValue()).pattern() != p))
-       {
           temp = SleepUtils.getScalar(p.matcher(text));
-          env.setContextMetadata("matcher", temp);
+          env.setContextMetadata(key, temp);
           return temp;
        }
        else
@@ -150,30 +161,41 @@
 
           Pattern pattern = RegexBridge.getPattern(bb.toString());
 
-          Scalar container = getMatcher(i.getScriptEnvironment(), aa.toString(), pattern);
-          Matcher matcher  = (Matcher)container.objectValue();
+          Scalar  container = null;
+          Matcher matcher   = null;
 
-          /* check our taint value please */ 
-          if (TaintUtils.isTainted(aa) || TaintUtils.isTainted(bb))
+          if (n.equals("hasmatch"))
           {
-             TaintUtils.taintAll(container);
-          }
+              String key = key(aa.toString(), pattern);
 
-          if (n.equals("hasmatch"))
-          {
+              container = getMatcher(i.getScriptEnvironment(), key, aa.toString(), pattern);
+              matcher  = (Matcher)container.objectValue();
+
               rv = matcher.find();
+
+              if (!rv)
+              {
+                 i.getScriptEnvironment().setContextMetadata(key, null);
+              }
           }
           else
           {
-              matcher.reset(aa.toString());
+              matcher = pattern.matcher(aa.toString());
+              container = SleepUtils.getScalar(matcher);
+
               rv = matcher.matches();
           }
 
-          if (!rv) 
+
+          /* check our taint value please */ 
+          if (TaintUtils.isTainted(aa) || TaintUtils.isTainted(bb))
           {
-             i.getScriptEnvironment().setContextMetadata("matcher", null);
+             TaintUtils.taintAll(container);
           }
 
+          /* set our matcher for retrieval by matched() later */
+          i.getScriptEnvironment().setContextMetadata("matcher", rv ? container : null);
+
           return rv;
        }
 
@@ -181,7 +203,7 @@
        {
           Scalar value = SleepUtils.getArrayScalar();            
 
-          Scalar container = getMatcher(i.getScriptEnvironment(), null, null);
+          Scalar container = getLastMatcher(i.getScriptEnvironment());
 
           if (!SleepUtils.isEmptyScalar(container))
           {

Modified: sleep/tests/behavior.sl
===================================================================
--- sleep/tests/behavior.sl	2008-05-15 16:10:37 UTC (rev 377)
+++ sleep/tests/behavior.sl	2008-05-15 17:49:25 UTC (rev 378)
@@ -1,15 +1,11 @@
-sub foo
+while ('(654) 555-1212(248) 399-8219(734) 586-9912' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
 {
+   ($areaCode, $phoneNumber) = matched();
+   println("$areaCode and $phoneNumber");
+
    while ('(123) 456-7890 sfdsdf (453) 443-3455' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
    {
       ($areaCode, $phoneNumber) = matched();
       println("    $areaCode and $phoneNumber");
    }
 }
-
-while ('(654) 555-1212(248) 399-8219(734) 586-9912' hasmatch '\((\d\d\d)\) (\d\d\d-\d\d\d\d)')
-{
-   ($areaCode, $phoneNumber) = matched();
-   println("$areaCode and $phoneNumber");
-   foo();
-}

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 16:10:37 UTC (rev 377)
+++ sleep/whatsnew.txt	2008-05-15 17:49:25 UTC (rev 378)
@@ -24,9 +24,7 @@
   &matched() works to retrieve the matched groups from the
   substring.
 - conducted a 3am cleanup of the RegexBridge--you know what 
-  that means.  consequently, nesting of loops that iterate
-  hasmatch no longer works.  This is to prevent a memory leak
-  from unremoved regex state.
+  that means.
 - updated array implementation to use a LinkedList in lieu of
   a Stack.  This offers better performance characteristics for
   most array operations.  The only real losing operation is



From rsmudge at mail.berlios.de  Thu May 15 23:36:01 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 15 May 2008 23:36:01 +0200
Subject: [Sleep-svn] r379 - in sleep: . src/sleep/runtime src/sleep/taint
Message-ID: <200805152136.m4FLa1dg009784@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-15 23:36:00 +0200 (Thu, 15 May 2008)
New Revision: 379

Modified:
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/src/sleep/taint/TaintUtils.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-15 17:49:25 UTC (rev 378)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-15 21:36:00 UTC (rev 379)
@@ -271,7 +271,7 @@
           while (i.hasNext())
           {
              Map.Entry value = (Map.Entry)i.next();
-             locals.push(new KeyValuePair(SleepUtils.getScalar(value.getKey().toString()), (Scalar)value.getValue()));
+             locals.push(SleepUtils.getScalar(new KeyValuePair(SleepUtils.getScalar(value.getKey().toString()), (Scalar)value.getValue())));
           }
        }
 

Modified: sleep/src/sleep/taint/TaintUtils.java
===================================================================
--- sleep/src/sleep/taint/TaintUtils.java	2008-05-15 17:49:25 UTC (rev 378)
+++ sleep/src/sleep/taint/TaintUtils.java	2008-05-15 21:36:00 UTC (rev 379)
@@ -74,14 +74,18 @@
        return value;
     }
 
-    /** taints all of the Scalar values in the specified stack.  More fun that a barrel full of monkeys */
-    public static void taint(Stack values)
+    /** taints all of the Scalar values in the specified stack.  More fun that a barrel full of monkeys.  this function acts on the passed in stack */
+    public static Stack taint(Stack values)
     {
-       Iterator i = values.iterator();
-       while (i.hasNext())
+       if (isTaintMode())
        {
-          taintAll((Scalar)i.next());
+          Iterator i = values.iterator();
+          while (i.hasNext())
+          {
+             taintAll((Scalar)i.next());
+          }
        }
+       return values;
     }
 
     /** taints the specified scalar (bridge writers should call this on their scalars).  recurses on hashes and arrays.  returns the original container.  If tainting is disabled the original bridge is returned. not safe for circular data structures. */

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 17:49:25 UTC (rev 378)
+++ sleep/whatsnew.txt	2008-05-15 21:36:00 UTC (rev 379)
@@ -50,6 +50,7 @@
   entire cache.  This was put in place to account for &include'd
   scripts.  Now &include validates its last modified timestamp
   with the ScriptLoader prior to (re)loading.  
+- fixed bug in SleepUtils.getArgumentStack(Map)
    
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Fri May 16 00:56:59 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 16 May 2008 00:56:59 +0200
Subject: [Sleep-svn] r380 - in sleep: . src/sleep/bridges
	src/sleep/interfaces src/sleep/runtime tests
Message-ID: <200805152256.m4FMuxlC022026@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-16 00:56:58 +0200 (Fri, 16 May 2008)
New Revision: 380

Removed:
   sleep/src/sleep/interfaces/Evaluation.java
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/runtime/ScriptInstance.java
   sleep/src/sleep/runtime/ScriptLoader.java
   sleep/tests/matcher.sl
   sleep/whatsnew.txt
Log:
some changes to script loader cache


Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-15 22:56:58 UTC (rev 380)
@@ -350,8 +350,11 @@
          
                 if (parent != null)
                 {
+                   File theFile = parent.isDirectory() ? new File(parent, className) : parent;
+
                    URLClassLoader loader = new URLClassLoader(new URL[] { parent.toURL() });
-                   sloader.touch(className, parent.isDirectory() ? new File(parent, className).lastModified() : parent.lastModified());
+                   sloader.touch(className, theFile.lastModified());
+                   si.associateFile(theFile); /* associate this included script with the current script instance */
 
                    istream = loader.getResourceAsStream(className);
                 }
@@ -359,6 +362,7 @@
                 {
                    File tempf = BridgeUtilities.toSleepFile(className, si);
                    sloader.touch(className, tempf.lastModified());
+                   si.associateFile(tempf); /* associate this included script with the current script instance */
 
                    istream = new FileInputStream(tempf);
                 }

Deleted: sleep/src/sleep/interfaces/Evaluation.java
===================================================================
--- sleep/src/sleep/interfaces/Evaluation.java	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/src/sleep/interfaces/Evaluation.java	2008-05-15 22:56:58 UTC (rev 380)
@@ -1,96 +0,0 @@
-/*
-   SLEEP - Simple Language for Environment Extension Purposes
- .----------------------------.
- | sleep.interfaces.Evalation |_______________________________________________
- |                                                                            |
-   Author: Raphael Mudge (rsmudge at mtu.edu)
-           http://www.csl.mtu.edu/~rsmudge/
- 
-   Description: An interface for a class that defines a environment for user
-     defined functions.   
-
-   Documentation: 
- 
-   * This software is distributed under the artistic license, see license.txt
-     for more information. *
- 
- |____________________________________________________________________________|
- */
-
-package sleep.interfaces;
- 
-import sleep.runtime.ScriptInstance;
-import sleep.runtime.Scalar;
-
-/**
- * <p>A Sleep evaluation is a way to define how a `back quoted` string should work.  In Perl any text inside of `back quotes` is
- * fevaluated for embedded $scalar values and then executed as a shell command.  The output of the executed command is collected 
- * into a perl array and returned as the resulting value of the `back quote` expression.</p>
- *
- * <p>While executing commands in this way might be a useful abstraction, it seems more fun to allow you, the application
- * developer to define what this syntax should do.</p>
- *
- * <p>The following is an implementation of perl-like backquote behavior for Sleep:</p>
- * 
- * <pre> import sleep.interfaces.Evaluation;
- *
- * import sleep.runtime.Scalar;
- * import sleep.runtime.ScriptInstance;
- * import sleep.runtime.SleepUtils;
- *
- * import java.io.*;
- *
- * public class PerlLike implements Evaluation
- * {
- *    public Scalar evaluateString(ScriptInstance script, String value)
- *    {
- *       Scalar rv = SleepUtils.getArrayScalar();
- *
- *       try
- *       {
- *          // execute our process and setup a reader for it 
- * 
- *          Process proc  = Runtime.getRuntime().exec(value);
- *          BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));
- *
- *          // read each line from the process output, stuff it into our scalar array rv
- *
- *          String text = null;
- *          while ((text = reader.readLine()) != null)
- *          {
- *             rv.getArray().push(SleepUtils.getScalar(text));
- *          }
- *       }
- *       catch (IOException ex)
- *       {
- *          script.getScriptEnvironment().flagError(ex.toString());
- *       }
- *
- *       return rv;
- *    }
- * }</pre>
- *
- * <p>To install the perl-like backquote evaluator into the script environment:</p>
- * <pre>
- * public boolean scriptLoaded(ScriptInstance script)
- * {
- *    Evaluation perlStuff = new PerlLike();
- * 
- *    Hashtable environment = script.getScriptEnvironment().getEnvironment();
- *    environment.put("%BACKQUOTE%", perlStuff);
- *
- *    return true;
- * }
- * </pre>
- */
-public interface Evaluation
-{
-   /**
-    * Evaluate the specified string value.
-    *
-    * @param typeKeyword the keyword for the function. (i.e. sub)
-    * @param functionName the function name (i.e. add)
-    * @param functionBody the compiled body of the function (i.e. code to add 2 numbers)
-    */
-   public abstract Scalar evaluateString(ScriptInstance si, String value);
-}

Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2008-05-15 22:56:58 UTC (rev 380)
@@ -104,7 +104,37 @@
     /** track all of the flagged debug options for this script (set to DEBUG_SHOW_ERRORS by default) */
     protected int debug = DEBUG_SHOW_ERRORS;
 
+    /** track the time this script was loaded */
+    protected long loadTime = System.currentTimeMillis();
 
+    /** list of source files associated with this script (to account for &include) */
+    protected List sourceFiles = new LinkedList();
+
+    /** associates the specified source file with this script */
+    public void associateFile(File f)
+    {
+       if (f.exists())
+       {
+          sourceFiles.add(f);
+       }
+    }
+
+    /** this script instance checks if (to the best of its knowledge) any of its source files have changed */
+    public boolean hasChanged()
+    {
+       Iterator i = sourceFiles.iterator();
+       while (i.hasNext())
+       {
+          File temp = (File)i.next();
+          if (temp.lastModified() > loadTime)
+          {
+             return true;
+          }
+       }
+   
+       return false;
+    }
+
     /** set the debug flags for this script */
     public void setDebugFlags(int options)
     {

Modified: sleep/src/sleep/runtime/ScriptLoader.java
===================================================================
--- sleep/src/sleep/runtime/ScriptLoader.java	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/src/sleep/runtime/ScriptLoader.java	2008-05-15 22:56:58 UTC (rev 380)
@@ -78,14 +78,27 @@
  * the script.</p>
  *
  * <p>To compile a script means to produce a runnable Block of code.  On its own a Block is not really runnable as a script 
- * environment is needed.  For functions like eval(), include(), etc.. it makes sense to compile a script as one may want to run
+ * environment is needed.  For functions eval(), include(), etc.. it makes sense to compile a script as you may want to run
  * the block of code within the environment of the calling script.  Using the compile method saves on the overhead of unnecessary
  * script environment creation and bridge registration.</p>
  *
+ * <h3>Management of Script Reloading</h3>
+ *
+ * <p>The ScriptInstance class has a an associateFile method to associate a source File object with a script.  The &amp;include function 
+ * calls this method when a file is included into the current script context.  To check if any of the associated files has changed call 
+ * hasChanged on the appropriate ScriptInstance.</P>
+ *
+ * <p>The ScriptLoader will automatically associate a source file with a ScriptInstance when a File object is passed to loadScript.  If
+ * you choose to do some voodoo compiling scripts and managing your own cache (not necessary btw) then you will have to call associateFile
+ * against any ScriptInstance you construct</p>
+ *
+ * <h3>Script Cache</h3>
+ *
+ * <p>The ScriptLoader mantains a cache of Blocks.  These are indexed by name and a timestamp of when they were created.  You may call the
+ * touch method with the name and a timestamp to allow the ScriptLoader to invalidate the cache entry.  If you just load scripts from files
+ * then the script cache will just work.  To disable the cache use <code>loader.setGlobalCache(false)</code>.</p>
+ *
  * <p>Hopefully this helped to clarify things. :)</p>
- *
- * @see sleep.interfaces.Loadable
- * @see ScriptInstance
  */
 public class ScriptLoader
 {
@@ -99,6 +112,7 @@
        if (BLOCK_CACHE != null && BLOCK_CACHE.containsKey(name))
        {
           Object[] temp = (Object[])BLOCK_CACHE.get(name);
+
           return (Block)temp[0];
        }
 
@@ -452,7 +466,9 @@
      */
     public ScriptInstance loadScript(File file, Hashtable env) throws IOException, YourCodeSucksException
     {
-        return loadScript(file.getAbsolutePath(), new FileInputStream(file), env);
+        ScriptInstance script = loadScript(file.getAbsolutePath(), new FileInputStream(file), env);
+        script.associateFile(file);
+        return script;
     }
 
     /**
@@ -460,7 +476,7 @@
      */
     public ScriptInstance loadScript(File file) throws IOException, YourCodeSucksException
     {
-        return loadScript(file.getAbsolutePath(), new FileInputStream(file), null);
+        return loadScript(file, null);
     }
 
     /**

Modified: sleep/tests/matcher.sl
===================================================================
--- sleep/tests/matcher.sl	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/tests/matcher.sl	2008-05-15 22:56:58 UTC (rev 380)
@@ -17,4 +17,4 @@
   fork($my_th, $iter => "$ii");
 }
 
-
+sleep(3000);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 21:36:00 UTC (rev 379)
+++ sleep/whatsnew.txt	2008-05-15 22:56:58 UTC (rev 380)
@@ -51,6 +51,9 @@
   scripts.  Now &include validates its last modified timestamp
   with the ScriptLoader prior to (re)loading.  
 - fixed bug in SleepUtils.getArgumentStack(Map)
+- added a hasChanged() method to ScriptInstance to help apps
+  determine if a script (or any script it has included) has
+  changed.
    
 2.1-beta 25  (8 May 08) [will this beta process ever end?]
 ===========



From rsmudge at mail.berlios.de  Fri May 16 00:58:46 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 16 May 2008 00:58:46 +0200
Subject: [Sleep-svn] r381 - in sleep: . src/sleep/runtime
Message-ID: <200805152258.m4FMwk5V023178@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-16 00:58:46 +0200 (Fri, 16 May 2008)
New Revision: 381

Modified:
   sleep/readme.txt
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
2.1-b26


Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-05-15 22:56:58 UTC (rev 380)
+++ sleep/readme.txt	2008-05-15 22:58:46 UTC (rev 381)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 25 - README   
+Sleep - 2.1 beta 26 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is
@@ -169,4 +169,3 @@
 shall not be considered part of this library.
 
 See license.txt for more information.
-

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-15 22:56:58 UTC (rev 380)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-15 22:58:46 UTC (rev 381)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080508;
+   public static final int    SLEEP_RELEASE = 20080515;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 22:56:58 UTC (rev 380)
+++ sleep/whatsnew.txt	2008-05-15 22:58:46 UTC (rev 381)
@@ -1,4 +1,4 @@
-2.1-beta 26
+2.1-beta 26  (15 May 08)
 ===========
 - removed extra key string conversion within ordered hashes.  
   may offer a performance speedup in some cases.



From rsmudge at mail.berlios.de  Sat May 17 02:16:19 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 May 2008 02:16:19 +0200
Subject: [Sleep-svn] r382 - in sleep: . src/sleep/engine
Message-ID: <200805170016.m4H0GJKD020127@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-17 02:16:17 +0200 (Sat, 17 May 2008)
New Revision: 382

Modified:
   sleep/src/sleep/engine/Block.java
   sleep/whatsnew.txt
Log:
change to the interpreter to note critical errors.


Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-15 22:58:46 UTC (rev 381)
+++ sleep/src/sleep/engine/Block.java	2008-05-17 00:16:17 UTC (rev 382)
@@ -268,6 +268,11 @@
               cleanupEnvironment(environment);
               return SleepUtils.getEmptyScalar();
            } 
+           catch (Error th)
+           {
+              environment.getScriptInstance().fireWarning("critical internal error - " + th.toString(), temp.getLineNumber());
+              throw th;
+           }
 
            while (environment.isReturn())
            {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-15 22:58:46 UTC (rev 381)
+++ sleep/whatsnew.txt	2008-05-17 00:16:17 UTC (rev 382)
@@ -1,3 +1,9 @@
+2.1-beta 27 
+===========
+- Virtual machine errors (stack overflow, out of memory) etc.
+  are now caught within the interpreter and used to coerce
+  a printout of the location of each Sleep stack frame.
+
 2.1-beta 26  (15 May 08)
 ===========
 - removed extra key string conversion within ordered hashes.  



From rsmudge at mail.berlios.de  Mon May 19 23:39:02 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 19 May 2008 23:39:02 +0200
Subject: [Sleep-svn] r383 - in sleep: . src/sleep/bridges
	src/sleep/engine/atoms tests tests/output
Message-ID: <200805192139.m4JLd2XN008740@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-19 23:39:01 +0200 (Mon, 19 May 2008)
New Revision: 383

Added:
   sleep/tests/assertcompare.sl
   sleep/tests/output/assertcompare.sl
Modified:
   sleep/src/sleep/bridges/SleepClosure.java
   sleep/src/sleep/engine/atoms/Decide.java
   sleep/whatsnew.txt
Log:
bug feexes


Modified: sleep/src/sleep/bridges/SleepClosure.java
===================================================================
--- sleep/src/sleep/bridges/SleepClosure.java	2008-05-17 00:16:17 UTC (rev 382)
+++ sleep/src/sleep/bridges/SleepClosure.java	2008-05-19 21:39:01 UTC (rev 383)
@@ -9,7 +9,7 @@
 import sleep.runtime.*;
 
 /** The Sleep Closure class.  This class represents a Function object that is also a self contained closure */
-public class SleepClosure implements Function
+public class SleepClosure implements Function, Runnable
 {
     private static int ccount = -1;
     private int id;
@@ -159,6 +159,12 @@
        variables = _variables; 
     }
 
+    /** "Safely" calls this closure. */
+    public void run()
+    {
+       callClosure("run", null, null);
+    }
+
     /** "Safely" calls this closure.  Use this if you are evaluating this closure from your own code. 
 
         @param message the message to pass to this closure (available as $0)

Modified: sleep/src/sleep/engine/atoms/Decide.java
===================================================================
--- sleep/src/sleep/engine/atoms/Decide.java	2008-05-17 00:16:17 UTC (rev 382)
+++ sleep/src/sleep/engine/atoms/Decide.java	2008-05-19 21:39:01 UTC (rev 383)
@@ -66,6 +66,14 @@
 
    public int getHighLineNumber()
    {
+      if (iftrue == null)
+      {
+         return iffalse.getHighLineNumber();
+      }
+      else if (iffalse == null)
+      {
+         return iftrue.getHighLineNumber();
+      }
       int x = iftrue.getHighLineNumber(); 
       int y = iffalse.getHighLineNumber();
       return x > y ? x : y;

Added: sleep/tests/assertcompare.sl
===================================================================
--- sleep/tests/assertcompare.sl	2008-05-17 00:16:17 UTC (rev 382)
+++ sleep/tests/assertcompare.sl	2008-05-19 21:39:01 UTC (rev 383)
@@ -0,0 +1,5 @@
+# this program will quit early when
+# assertions are enabled
+
+assert 2 + 2 : "eh, assertions are enabled";
+println("Whee...");

Added: sleep/tests/output/assertcompare.sl
===================================================================
--- sleep/tests/output/assertcompare.sl	2008-05-17 00:16:17 UTC (rev 382)
+++ sleep/tests/output/assertcompare.sl	2008-05-19 21:39:01 UTC (rev 383)
@@ -0,0 +1 @@
+Warning: eh, assertions are enabled at assertcompare.sl:4

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-17 00:16:17 UTC (rev 382)
+++ sleep/whatsnew.txt	2008-05-19 21:39:01 UTC (rev 383)
@@ -3,6 +3,9 @@
 - Virtual machine errors (stack overflow, out of memory) etc.
   are now caught within the interpreter and used to coerce
   a printout of the location of each Sleep stack frame.
+- SleepClosure now implements the Runnable interface.
+- fixed a null pointer exception for assertions triggered
+  with no preceeding statements.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Wed May 28 05:49:42 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 28 May 2008 05:49:42 +0200
Subject: [Sleep-svn] r384 - in sleep: . src/sleep/engine
Message-ID: <200805280349.m4S3ngQQ030821@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-28 05:49:40 +0200 (Wed, 28 May 2008)
New Revision: 384

Modified:
   sleep/build.xml
   sleep/src/sleep/engine/Block.java
Log:
..


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-19 21:39:01 UTC (rev 383)
+++ sleep/build.xml	2008-05-28 03:49:40 UTC (rev 384)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-19 21:39:01 UTC (rev 383)
+++ sleep/src/sleep/engine/Block.java	2008-05-28 03:49:40 UTC (rev 384)
@@ -271,6 +271,7 @@
            catch (Error th)
            {
               environment.getScriptInstance().fireWarning("critical internal error - " + th.toString(), temp.getLineNumber());
+              cleanupEnvironment(environment);
               throw th;
            }
 



From rsmudge at mail.berlios.de  Thu May 29 06:39:03 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 29 May 2008 06:39:03 +0200
Subject: [Sleep-svn] r385 - in sleep: . docs src/sleep/engine
	src/sleep/engine/atoms src/sleep/engine/types tests tests/output
Message-ID: <200805290439.m4T4d3gq019518@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-29 06:38:57 +0200 (Thu, 29 May 2008)
New Revision: 385

Added:
   sleep/src/sleep/engine/types/MyLinkedList.java
   sleep/tests/femod.sl
   sleep/tests/listops2.sl
   sleep/tests/output/femod.sl
   sleep/tests/output/listops2.sl
Modified:
   sleep/docs/sleepmanual.url
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/atoms/Iterate.java
   sleep/src/sleep/engine/types/ListContainer.java
   sleep/tests/arrmods.sl
   sleep/whatsnew.txt
Log:
too many changes this close to a major release...


Modified: sleep/docs/sleepmanual.url
===================================================================
--- sleep/docs/sleepmanual.url	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/docs/sleepmanual.url	2008-05-29 04:38:57 UTC (rev 385)
@@ -1,2 +1,2 @@
 [InternetShortcut]
-URL=http://sleep.dashnine.org/manual
+URL=http://sleep.dashnine.org/documentation.html

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/src/sleep/engine/Block.java	2008-05-29 04:38:57 UTC (rev 385)
@@ -245,8 +245,18 @@
               else if (ex instanceof NullPointerException)
               {
                  environment.getScriptInstance().fireWarning("null value error", temp.getLineNumber());
-                 ex.printStackTrace();
               }
+              else if (ex instanceof ConcurrentModificationException)
+              {
+                 if (ex.getMessage()  != null)
+                 {
+                    environment.getScriptInstance().fireWarning("unsafe data modification: " + ex.getMessage(), temp.getLineNumber());
+                 }
+                 else
+                 {
+                    environment.getScriptInstance().fireWarning("detected unsafe data modification", temp.getLineNumber());
+                 }
+              }    
               else if (ex instanceof RuntimeException)
               {
                  if (ex.getMessage() == null)

Modified: sleep/src/sleep/engine/atoms/Iterate.java
===================================================================
--- sleep/src/sleep/engine/atoms/Iterate.java	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/src/sleep/engine/atoms/Iterate.java	2008-05-29 04:38:57 UTC (rev 385)
@@ -159,9 +159,18 @@
          e.getCurrentFrame().push(SleepUtils.getScalar(false));
          return;
       }
+     
+      Object next = null;
+      try
+      {
+         next = data.iterator.next();
+      }
+      catch (ConcurrentModificationException cmex)
+      {
+         data.iterator = null; /* force a break out of the loop */
+         throw (cmex);
+      }
 
-      Object next = data.iterator.next();
-
       if (data.source.getHash() != null)
       {
          if (data.key != null)

Modified: sleep/src/sleep/engine/types/ListContainer.java
===================================================================
--- sleep/src/sleep/engine/types/ListContainer.java	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/src/sleep/engine/types/ListContainer.java	2008-05-29 04:38:57 UTC (rev 385)
@@ -10,7 +10,7 @@
 
    public ListContainer()
    {
-      values = new LinkedList();
+      values = new MyLinkedList();
    }
 
    public ListContainer(List list)

Added: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 04:38:57 UTC (rev 385)
@@ -0,0 +1,475 @@
+package sleep.engine.types;
+
+import java.io.Serializable;
+import java.util.*;
+
+import sleep.runtime.*;
+
+public class MyLinkedList extends AbstractSequentialList implements Cloneable, Serializable, List
+{
+   private class MyListIterator implements ListIterator, Serializable
+   {
+      protected int       index; 
+      protected int       start;
+      protected ListEntry current;
+      protected int       modCountCheck = modCount;
+
+      public void checkSafety()
+      {
+         if (modCountCheck != modCount)
+         {
+            throw new ConcurrentModificationException("@array changed during iteration");
+         }
+      }
+
+      public MyListIterator(ListEntry entry, int index)
+      {
+         this.index   = index;
+         this.start   = index;
+         current      = entry;
+      }
+
+      public void add(Object o)
+      {
+         checkSafety();
+
+         /* add the new element after the current element */
+         current = current.addAfter(o);
+
+         /* increment the list so that the next element returned is
+            unaffected by this call */
+         index++;
+
+         modCountCheck++;
+      }
+
+      public boolean hasNext()
+      {
+         return index != size;
+      }
+
+      public boolean hasPrevious()
+      {
+         return index != 0;
+      }
+
+      public Object next()
+      {
+         checkSafety();
+         current = current.next();
+         index++;
+         return current.element();
+      }
+
+      public Object previous()
+      {
+         checkSafety();
+         current = current.previous();
+         index--;
+         return current.element();
+      }
+
+      public int nextIndex()
+      {
+         return index;
+      }
+
+      public int previousIndex()
+      {
+         return index - 1;
+      }
+
+      public void remove()
+      {
+         if (current == header)
+         {
+            throw new IllegalStateException("list is empty");
+         }
+
+         checkSafety();
+         current = current.remove().previous();
+
+         index--;
+
+         modCountCheck++;
+      }
+
+      public void set(Object o)
+      {
+         if (current == header)
+         {
+            throw new IllegalStateException("list is empty");
+         }
+
+         checkSafety();
+         current.setElement(o);
+      }
+   }
+
+   int size = 0;
+   private ListEntry header;
+
+   /* fields used by sublists */
+   private ListEntry    boundaryPrevious;
+   private ListEntry    boundaryNext;
+   private MyLinkedList parentList;
+
+   public int size()
+   {
+      return size;
+   }
+
+   private MyLinkedList(MyLinkedList plist, ListEntry begin, ListEntry end, int _size)
+   {
+      parentList = plist;
+      modCount = parentList.modCount;
+      header = new NormalListEntry(SleepUtils.getScalar("[:header:]"), null, null);
+
+      boundaryPrevious = begin;
+      boundaryNext     = end;
+
+      ListEntryWrapper head = new ListEntryWrapper(begin);
+      ListEntryWrapper tail = new ListEntryWrapper(end);
+
+      /* set the entries into the header */
+      head.check();
+      tail.check();
+
+      size = _size;
+   }
+
+   public MyLinkedList()
+   {
+      header = new NormalListEntry(SleepUtils.getScalar("[:HEADER:]"), null, null);
+      header.setNext(header);
+      header.setPrevious(header);
+   }   
+
+   public List subList(int beginAt, int endAt)
+   { 
+      checkSafety();
+
+      ListEntry begin;
+      ListEntry end;
+
+      begin = header.next();
+
+      int x = 0;
+      while (x < beginAt)
+      {
+         begin = begin.next();
+         x++;
+      }
+
+      if (endAt == size)
+      {
+         end = header;
+      }
+      else
+      {
+         end = begin;
+
+         while (x < endAt)
+         {
+            end = end.next();
+            x++;
+         }
+      }
+
+      if (begin instanceof ListEntryWrapper)
+      {
+         begin = ((ListEntryWrapper)begin).parent;
+      }
+
+      if (end instanceof ListEntryWrapper)
+      {
+         end = ((ListEntryWrapper)end).parent;
+      }
+
+      end = end.previous();
+      return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
+   }
+
+   public ListIterator listIterator(int index)
+   {
+      ListEntry entry = header;
+
+      if (index < 0 || index > size)
+         throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
+
+      for (int x = 0; x < index; x++)
+      {
+         entry = entry.next();
+      }
+
+//      System.out.println("listIterator(" + index + "): " + entry.toString());
+      return new MyListIterator(entry, index); 
+   }
+
+   // code for the ListEntry //
+
+   private interface ListEntry extends Serializable
+   {
+      public ListEntry remove();
+      public ListEntry addBefore(Object o);
+      public ListEntry addAfter(Object o);
+
+      public ListEntry next();
+      public ListEntry previous();
+
+      public void setNext(ListEntry entry);
+      public void setPrevious(ListEntry entry);
+
+      public Object element();
+      public void setElement(Object o);
+   }
+
+   public void checkSafety()
+   {
+      if (parentList != null && modCount != parentList.modCount)
+      {
+         throw new ConcurrentModificationException("parent @array changed after &sublist creation");
+      }
+   }
+
+   private class ListEntryWrapper implements ListEntry
+   {
+      public ListEntry parent;
+
+      public ListEntryWrapper check()
+      {
+         if (parent == boundaryPrevious)
+         {
+            header.setNext(this);
+         }
+
+         if (parent == boundaryNext)
+         {
+            header.setPrevious(this);
+         }
+
+         return this;
+      }
+
+      public ListEntryWrapper(ListEntry _parent)
+      {
+         parent = _parent;
+      }
+
+      public ListEntry remove()
+      {
+         checkSafety();
+
+         ListEntry temp = parent.remove();
+
+         size--;
+         modCount++;
+
+         if (parent == boundaryPrevious)
+         {
+            boundaryPrevious = temp;
+         }
+
+         if (parent == boundaryNext)
+         {
+            boundaryNext = temp;
+         }
+
+         ListEntryWrapper r = new ListEntryWrapper(temp);
+         return r.check();
+      }
+
+      public ListEntry addBefore(Object o)
+      {
+         checkSafety();
+
+         ListEntry temp = parent.addBefore(o);
+
+         size++;
+         modCount++;
+
+         if (parent == boundaryPrevious)
+         {
+            boundaryPrevious = temp;
+         }
+
+         ListEntryWrapper r = new ListEntryWrapper(temp);
+         return r.check();
+      }
+
+      public ListEntry addAfter(Object o)
+      {
+         checkSafety();
+
+         ListEntry temp = parent.addAfter(o);
+
+         size++;
+         modCount++;
+
+         if (parent == boundaryNext)
+         {
+            boundaryNext = temp;
+         }
+
+         ListEntryWrapper r = new ListEntryWrapper(temp);
+         return r.check();
+      }
+
+      public void setNext(ListEntry entry)
+      {
+      }
+
+      public void setPrevious(ListEntry entry)
+      {
+      }
+
+      public Object element()
+      {
+         return parent.element();
+      }
+
+      public void setElement(Object o)
+      {
+         parent.setElement(o);
+      }
+
+      public ListEntry next()
+      {
+         checkSafety();
+
+         if (parent == boundaryNext)
+         {
+            return header;
+         }
+
+         ListEntryWrapper r = new ListEntryWrapper(parent.next());
+         return r;
+      }
+
+      public ListEntry previous()
+      {
+         checkSafety();
+
+         if (parent == boundaryPrevious)
+         {
+            return header;
+         }
+
+         ListEntryWrapper r = new ListEntryWrapper(parent.previous());
+         return r;
+      }
+   }
+
+   private class NormalListEntry implements ListEntry
+   {
+      public Object element;
+      public ListEntry previous;
+      public ListEntry next;
+
+      public NormalListEntry(Object _element, ListEntry _previous, ListEntry _next)
+      {
+         element  = _element;
+         previous = _previous;
+         next     = _next;
+
+         if (previous != null)
+         {
+            previous.setNext(this);
+         }
+
+         if (next != null)
+         {
+            next.setPrevious(this);
+         }
+      }
+
+      public void setNext(ListEntry entry) 
+      {
+         next = entry;
+      }
+
+      public void setPrevious(ListEntry entry)
+      {
+         previous = entry;
+      }
+
+      public ListEntry next()
+      {
+         return next;
+      }
+
+      public ListEntry previous()
+      {
+         return previous;
+      }
+
+      public ListEntry remove()
+      {
+         ListEntry prev = previous();
+         ListEntry nxt  = next();
+
+         nxt.setPrevious(prev);
+         prev.setNext(nxt);
+
+         size--;
+         modCount++;
+         return nxt;
+      }
+
+      public void setElement(Object o)
+      {
+         element = o;
+      }
+
+      public Object element()
+      {
+         return element;
+      }
+
+      public ListEntry addBefore(Object o)
+      {
+         ListEntry temp = new NormalListEntry(o, this.previous, this);
+
+         size++;
+         modCount++;
+
+         return temp;
+      }
+
+      public ListEntry addAfter(Object o)
+      {
+         ListEntry temp = new NormalListEntry(o, this, this.next);
+
+         size++;
+         modCount++;
+
+         return temp;
+      }
+
+      public String toString()
+      {
+         StringBuffer buffer = new StringBuffer(":[" + element() + "]:");
+
+         if (this == header)
+         {
+             buffer = new StringBuffer(":[HEADER]:");
+         }
+
+         ListEntry entry = this.previous();
+         while (entry != header)
+         {
+            buffer.insert(0, "[" + entry.element() + "]-> ");
+            entry = entry.previous();
+         }
+         
+         entry = this.next();
+         while (entry != header)
+         {
+            buffer.append(" ->[" + entry.element() + "]");
+            entry = entry.next();
+         }
+
+         return buffer.toString();
+      }
+   }
+}

Modified: sleep/tests/arrmods.sl
===================================================================
--- sleep/tests/arrmods.sl	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/tests/arrmods.sl	2008-05-29 04:38:57 UTC (rev 385)
@@ -6,7 +6,9 @@
 @b = @(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
 @c = copy(@b);
 
-println(splice(@c, subarray(@a, -4), 3));
+$a = subarray(@a, -4);
+$b = splice(@c, $a, 3);
+println($b);
 
 @c = copy(@b);
 println(splice(@c, subarray(@a, -4), 3, 0));

Added: sleep/tests/femod.sl
===================================================================
--- sleep/tests/femod.sl	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/tests/femod.sl	2008-05-29 04:38:57 UTC (rev 385)
@@ -0,0 +1,10 @@
+ at a = @("a", "b", "c", "d");
+
+foreach $index => $value (@a)
+{
+   println("$index => $value");
+   if ($value eq "c")
+   {
+      push(@a, "d");
+   }
+}   

Added: sleep/tests/listops2.sl
===================================================================
--- sleep/tests/listops2.sl	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/tests/listops2.sl	2008-05-29 04:38:57 UTC (rev 385)
@@ -0,0 +1,43 @@
+ at a = @("a", "b", "c", "d");
+println(@a);
+
+ at a[2] = "pHEAR";
+println(@a);
+
+removeAt(@a, 2);
+println(@a);
+
+add(@a, "???", 2);
+println(@a);
+
+foreach $index => $temp (@a)
+{
+   println("$index => $temp");
+}
+
+ at c = sublist(@a, 1);
+println(@c);
+
+shift(@c);
+println(@c);
+println(@a);
+
+push(@c, "phearz");
+println(@c);
+println(@a);
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p");
+ at b = sublist(@a, 3, 12);
+ at c = sublist(@b, 2, 6);
+removeAt(@c, 2);
+println(@a);
+println(@c);
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p");
+ at b = sublist(@a, 3, 12);
+ at c = sublist(@b, 2, 6);
+removeAt(@c, 3);
+println(@a);
+println(@c);
+println(@b);
+

Added: sleep/tests/output/femod.sl
===================================================================
--- sleep/tests/output/femod.sl	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/tests/output/femod.sl	2008-05-29 04:38:57 UTC (rev 385)
@@ -0,0 +1,5 @@
+0 => a
+1 => b
+2 => c
+Warning: unsafe data modification: @array changed during iteration at femod.sl:3
+2 => c

Added: sleep/tests/output/listops2.sl
===================================================================
--- sleep/tests/output/listops2.sl	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/tests/output/listops2.sl	2008-05-29 04:38:57 UTC (rev 385)
@@ -0,0 +1,18 @@
+@('a', 'b', 'c', 'd')
+@('a', 'b', 'pHEAR', 'd')
+@('a', 'b', 'd')
+@('a', 'b', '???', 'd')
+0 => a
+1 => b
+2 => ???
+3 => d
+@('b', '???', 'd')
+@('???', 'd')
+@('a', '???', 'd')
+@('???', 'd', 'phearz')
+@('a', '???', 'd', 'phearz')
+@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p')
+@('f', 'g', 'i')
+@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p')
+@('f', 'g', 'h')
+Warning: unsafe data modification: parent @array changed after &sublist creation at listops2.sl:42

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-28 03:49:40 UTC (rev 384)
+++ sleep/whatsnew.txt	2008-05-29 04:38:57 UTC (rev 385)
@@ -6,6 +6,15 @@
 - SleepClosure now implements the Runnable interface.
 - fixed a null pointer exception for assertions triggered
   with no preceeding statements.
+- created a java.util.List compatible data structure to back
+  Sleep arrays.  this data structure is similar to LinkedList
+  except it creates sublists with more desired performance
+  characteristics--sublists of java.util.LinkedList traverse
+  the entire parent list for each requested element.
+- added better error messages for ConcurrentModificationException's
+  thrown by Java
+- foreach loops now break if a ConcurrentModificationException
+  is thrown.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Thu May 29 09:43:19 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 29 May 2008 09:43:19 +0200
Subject: [Sleep-svn] r386 - in sleep: . src/sleep/bridges
Message-ID: <200805290743.m4T7hJEG012478@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-29 09:43:19 +0200 (Thu, 29 May 2008)
New Revision: 386

Modified:
   sleep/runtests.sl
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/whatsnew.txt
Log:
fixed hasmatch memory leak


Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-29 04:38:57 UTC (rev 385)
+++ sleep/runtests.sl	2008-05-29 07:43:19 UTC (rev 386)
@@ -96,7 +96,7 @@
    $1 = replace($1, '(\&closure\[.*?\]\#)\d+', '$1X');
    $1 = replace($1, '/Users/raffi/sleepdev/sleep', '==CWD==');
    $1 = replace($1, getFileParent(cwd()), '==CWD==');
-   $1 = replace($1, '([\.\[][a-zA-Z_0-9;]+@)[0-9a-f]{5,6}', '$1######');
+   $1 = replace($1, '([\.\[][a-zA-Z_0-9;]+@)[0-9a-f]{4,6}', '$1######');
    $1 = replace($1, '\$Proxy\d+?', '\$Proxy#');
    return $1;
 }

Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-29 04:38:57 UTC (rev 385)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-29 07:43:19 UTC (rev 386)
@@ -38,7 +38,23 @@
 /** Provides a bridge between Java's regex API and sleep.  Rock on */
 public class RegexBridge implements Loadable
 {
-    private static Map patternCache = Collections.synchronizedMap(new HashMap());
+    private static Map patternCache = Collections.synchronizedMap(new Cache(128));
+
+    private static class Cache extends LinkedHashMap
+    {
+       protected int count;
+
+       public Cache(int count)
+       {
+          super(11, 0.75f, true);
+          this.count = count;
+       }
+
+       protected boolean removeEldestEntry(Map.Entry eldest)
+       {
+          return (size() >= count);
+       }
+    }
  
     static
     {
@@ -56,11 +72,6 @@
        }
        else
        {
-          if (patternCache.size() > 1024)
-          {
-             patternCache.clear(); /* ensure the pattern cache is flushed once in awhile */
-          }
-     
           temp = Pattern.compile(pattern);
           patternCache.put(pattern, temp);
 
@@ -135,12 +146,22 @@
     /** a helper utility to get the matcher out of the script environment */
     private static Scalar getMatcher(ScriptEnvironment env, String key, String text, Pattern p)
     {
-       Scalar temp = (Scalar)env.getContextMetadata(key);
+       Map matchers = (Map)env.getContextMetadata("matchers");
 
+       if (matchers == null)
+       {
+          matchers = new Cache(16);
+          env.setContextMetadata("matchers", matchers);
+       }       
+
+       /* get our value */
+
+       Scalar temp = (Scalar)matchers.get(key);
+
        if (temp == null)
        {
           temp = SleepUtils.getScalar(p.matcher(text));
-          env.setContextMetadata(key, temp);
+          matchers.put(key, temp);
           return temp;
        }
        else
@@ -175,7 +196,8 @@
 
               if (!rv)
               {
-                 i.getScriptEnvironment().setContextMetadata(key, null);
+                 Map matchers = (Map)i.getScriptEnvironment().getContextMetadata("matchers");
+                 if (matchers != null) { matchers.remove(key); }
               }
           }
           else

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-29 04:38:57 UTC (rev 385)
+++ sleep/whatsnew.txt	2008-05-29 07:43:19 UTC (rev 386)
@@ -15,6 +15,12 @@
   thrown by Java
 - foreach loops now break if a ConcurrentModificationException
   is thrown.
+- reimplemented regex pattern and hasmatch state cacheing to 
+  prevent memory leaks.  Sleep will cache 128 patterns globally 
+  and up to 16 hasmatch contexts per closure.  Remember that 
+  hasmatch will remove its state after returning false.  These
+  measures are in place to help prevent runaway uses of 
+  hasmatch from eating all of the memory.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Thu May 29 20:33:07 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 29 May 2008 20:33:07 +0200
Subject: [Sleep-svn] r387 - in sleep: src/sleep/engine/types tests
	tests/output
Message-ID: <200805291833.m4TIX7EB025266@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-29 20:33:07 +0200 (Thu, 29 May 2008)
New Revision: 387

Added:
   sleep/tests/output/traverse2.sl
   sleep/tests/traverse2.sl
Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
more work on the linked list implementation


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 07:43:19 UTC (rev 386)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 18:33:07 UTC (rev 387)
@@ -127,7 +127,15 @@
 
       boundaryPrevious = begin;
       boundaryNext     = end;
+      
+/*      if (begin instanceof ListEntryWrapper || end instanceof ListEntryWrapper)
+      {
+         System.out.println("This is a problem!");
+         Thread.dumpStack();
+         System.exit(0);
+      } */
 
+
       ListEntryWrapper head = new ListEntryWrapper(begin);
       ListEntryWrapper tail = new ListEntryWrapper(end);
 
@@ -163,7 +171,7 @@
 
       if (endAt == size)
       {
-         end = header;
+         end = header.previous();
       }
       else
       {
@@ -172,21 +180,22 @@
          while (x < endAt)
          {
             end = end.next();
-            x++;
-         }
+           x++;
+         } 
+ 
+         end = end.previous();
       }
 
-      if (begin instanceof ListEntryWrapper)
+      while (begin instanceof ListEntryWrapper)
       {
          begin = ((ListEntryWrapper)begin).parent;
       }
 
-      if (end instanceof ListEntryWrapper)
+      while (end instanceof ListEntryWrapper)
       {
          end = ((ListEntryWrapper)end).parent;
       }
 
-      end = end.previous();
       return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
    }
 
@@ -197,12 +206,22 @@
       if (index < 0 || index > size)
          throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
 
-      for (int x = 0; x < index; x++)
+      if (index < (size / 2))
       {
-         entry = entry.next();
+         for (int x = 0; x < index; x++)
+         {
+            entry = entry.next();
+         }
       }
+      else
+      {
+         entry = entry.previous();
+         for (int x = size; x > index; x--)
+         {
+            entry = entry.previous();
+         }
+      }
 
-//      System.out.println("listIterator(" + index + "): " + entry.toString());
       return new MyListIterator(entry, index); 
    }
 
@@ -254,6 +273,20 @@
       public ListEntryWrapper(ListEntry _parent)
       {
          parent = _parent;
+
+       /*  if (parent instanceof ListEntryWrapper)
+         {
+             System.out.println("Parent is a wrapper");
+             Thread.dumpStack();
+             System.exit(0);
+         }
+
+         if (parent == header)
+         {
+             System.out.println("Parent is the header!!!");
+             Thread.dumpStack();
+             System.exit(0);
+         } */
       }
 
       public ListEntry remove()
@@ -342,6 +375,11 @@
             return header;
          }
 
+/*         if (parent instanceof ListEntryWrapper)
+         {
+             System.err.println("next() ARGH!!!!!!!!!!! " + parent);
+         } */
+
          ListEntryWrapper r = new ListEntryWrapper(parent.next());
          return r;
       }
@@ -355,6 +393,16 @@
             return header;
          }
 
+/*         if (parent instanceof ListEntryWrapper)
+         {
+             System.err.println("previous() ARGH!!!!!!!!!!! " + parent);
+         }
+         
+         if (parent.previous() instanceof ListEntryWrapper)
+         {
+             System.err.println(".. " + header.element() + " and whatever");
+         } */
+
          ListEntryWrapper r = new ListEntryWrapper(parent.previous());
          return r;
       }

Added: sleep/tests/output/traverse2.sl
===================================================================
--- sleep/tests/output/traverse2.sl	2008-05-29 07:43:19 UTC (rev 386)
+++ sleep/tests/output/traverse2.sl	2008-05-29 18:33:07 UTC (rev 387)
@@ -0,0 +1,10 @@
+head: a
+rest: @('b', 'c', 'd', 'e')
+head: b
+rest: @('c', 'd', 'e')
+head: c
+rest: @('d', 'e')
+head: d
+rest: @('e')
+head: e
+rest: @()

Added: sleep/tests/traverse2.sl
===================================================================
--- sleep/tests/traverse2.sl	2008-05-29 07:43:19 UTC (rev 386)
+++ sleep/tests/traverse2.sl	2008-05-29 18:33:07 UTC (rev 387)
@@ -0,0 +1,8 @@
+ at a = @("a", "b", "c", "d", "e");
+
+while (size(@a) > 0)
+{
+   println("head: " . @a[0]);
+   @a = sublist(@a, 1);
+   println("rest: " . @a);
+}



From rsmudge at mail.berlios.de  Thu May 29 22:24:41 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 29 May 2008 22:24:41 +0200
Subject: [Sleep-svn] r388 - in sleep: src/sleep/engine/types tests
	tests/output
Message-ID: <200805292024.m4TKOfaa002767@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-29 22:24:41 +0200 (Thu, 29 May 2008)
New Revision: 388

Added:
   sleep/tests/listops_get.sl
   sleep/tests/mlistfun.sl
   sleep/tests/output/listops_get.sl
   sleep/tests/output/mlistfun.sl
Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
more list improvements.


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 18:33:07 UTC (rev 387)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 20:24:41 UTC (rev 388)
@@ -157,35 +157,13 @@
    { 
       checkSafety();
 
-      ListEntry begin;
-      ListEntry end;
+      ListEntry begin = getAt(beginAt).next();  /* included */
+      ListEntry end = getAt(endAt); /* not included */
 
-      begin = header.next();
-
-      int x = 0;
-      while (x < beginAt)
-      {
-         begin = begin.next();
-         x++;
-      }
-
-      if (endAt == size)
-      {
-         end = header.previous();
-      }
-      else
-      {
-         end = begin;
-
-         while (x < endAt)
-         {
-            end = end.next();
-           x++;
-         } 
- 
-         end = end.previous();
-      }
-
+      /* we want each sublist to consist of a direct view into the parent... operations on other
+         sublists will fail if the parent is changed through some other sublist, this makes things
+         efficient and safe */
+        
       while (begin instanceof ListEntryWrapper)
       {
          begin = ((ListEntryWrapper)begin).parent;
@@ -199,15 +177,29 @@
       return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
    }
 
-   public ListIterator listIterator(int index)
+   /** get an object from the linked list */
+   public Object get(int index)
    {
-      ListEntry entry = header;
+      if (size == 0)
+         throw new IndexOutOfBoundsException("list is empty");
 
+      return getAt(index).next().element();
+   }
+
+   /** returns the entry at the specified index */
+   private ListEntry getAt(int index)
+   {
       if (index < 0 || index > size)
-         throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
+        throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
 
-      if (index < (size / 2))
+      ListEntry entry = header;
+
+      if (index == size)
       {
+         return header.previous();
+      }
+      else if (index < (size / 2))
+      {
          for (int x = 0; x < index; x++)
          {
             entry = entry.next();
@@ -222,9 +214,14 @@
          }
       }
 
-      return new MyListIterator(entry, index); 
+      return entry;
    }
 
+   public ListIterator listIterator(int index)
+   {
+      return new MyListIterator(getAt(index), index);
+   }
+
    // code for the ListEntry //
 
    private interface ListEntry extends Serializable

Added: sleep/tests/listops_get.sl
===================================================================
--- sleep/tests/listops_get.sl	2008-05-29 18:33:07 UTC (rev 387)
+++ sleep/tests/listops_get.sl	2008-05-29 20:24:41 UTC (rev 388)
@@ -0,0 +1,14 @@
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h");
+
+for ($x = 0; $x < size(@a); $x++)
+{
+   println("$x $+ : " . @a[$x]);
+}
+
+for ($x = 1; $x < 9; $x++)
+{
+   $y = $x * -1;
+   println("$y $+ : " . @a[$y]);
+}
+
+println(@a[345]);

Added: sleep/tests/mlistfun.sl
===================================================================
--- sleep/tests/mlistfun.sl	2008-05-29 18:33:07 UTC (rev 387)
+++ sleep/tests/mlistfun.sl	2008-05-29 20:24:41 UTC (rev 388)
@@ -0,0 +1,13 @@
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h");
+
+for ($x = 0; $x < size(@a); $x++)
+{
+   for ($y = $x; $y < size(@a); $y++)
+   {
+      println("$x $+ , $y $+ : " . sublist(@a, $x, $y));
+   }
+
+   println("$x $+ , all: " . sublist(@a, $x));
+}
+
+println(sublist(@a, 4, 2));

Added: sleep/tests/output/listops_get.sl
===================================================================
--- sleep/tests/output/listops_get.sl	2008-05-29 18:33:07 UTC (rev 387)
+++ sleep/tests/output/listops_get.sl	2008-05-29 20:24:41 UTC (rev 388)
@@ -0,0 +1,17 @@
+0: a
+1: b
+2: c
+3: d
+4: e
+5: f
+6: g
+7: h
+-1: h
+-2: g
+-3: f
+-4: e
+-5: d
+-6: c
+-7: b
+-8: a
+

Added: sleep/tests/output/mlistfun.sl
===================================================================
--- sleep/tests/output/mlistfun.sl	2008-05-29 18:33:07 UTC (rev 387)
+++ sleep/tests/output/mlistfun.sl	2008-05-29 20:24:41 UTC (rev 388)
@@ -0,0 +1,45 @@
+0, 0: @()
+0, 1: @('a')
+0, 2: @('a', 'b')
+0, 3: @('a', 'b', 'c')
+0, 4: @('a', 'b', 'c', 'd')
+0, 5: @('a', 'b', 'c', 'd', 'e')
+0, 6: @('a', 'b', 'c', 'd', 'e', 'f')
+0, 7: @('a', 'b', 'c', 'd', 'e', 'f', 'g')
+0, all: @('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
+1, 1: @()
+1, 2: @('b')
+1, 3: @('b', 'c')
+1, 4: @('b', 'c', 'd')
+1, 5: @('b', 'c', 'd', 'e')
+1, 6: @('b', 'c', 'd', 'e', 'f')
+1, 7: @('b', 'c', 'd', 'e', 'f', 'g')
+1, all: @('b', 'c', 'd', 'e', 'f', 'g', 'h')
+2, 2: @()
+2, 3: @('c')
+2, 4: @('c', 'd')
+2, 5: @('c', 'd', 'e')
+2, 6: @('c', 'd', 'e', 'f')
+2, 7: @('c', 'd', 'e', 'f', 'g')
+2, all: @('c', 'd', 'e', 'f', 'g', 'h')
+3, 3: @()
+3, 4: @('d')
+3, 5: @('d', 'e')
+3, 6: @('d', 'e', 'f')
+3, 7: @('d', 'e', 'f', 'g')
+3, all: @('d', 'e', 'f', 'g', 'h')
+4, 4: @()
+4, 5: @('e')
+4, 6: @('e', 'f')
+4, 7: @('e', 'f', 'g')
+4, all: @('e', 'f', 'g', 'h')
+5, 5: @()
+5, 6: @('f')
+5, 7: @('f', 'g')
+5, all: @('f', 'g', 'h')
+6, 6: @()
+6, 7: @('g')
+6, all: @('g', 'h')
+7, 7: @()
+7, all: @('h')
+Warning: illegal subarray(@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), 4 -> 4, 2 -> 2) at mlistfun.sl:13



From rsmudge at mail.berlios.de  Fri May 30 03:11:37 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 03:11:37 +0200
Subject: [Sleep-svn] r389 - in sleep: src/sleep/engine
	src/sleep/engine/types tests tests/output
Message-ID: <200805300111.m4U1BbCN002839@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 03:11:36 +0200 (Fri, 30 May 2008)
New Revision: 389

Added:
   sleep/tests/listops_empty.sl
   sleep/tests/listops_simple.sl
   sleep/tests/output/listops_empty.sl
   sleep/tests/output/listops_simple.sl
Modified:
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
more updates to the list interface...  not enjoying this... really.



Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/src/sleep/engine/Block.java	2008-05-30 01:11:36 UTC (rev 389)
@@ -245,6 +245,7 @@
               else if (ex instanceof NullPointerException)
               {
                  environment.getScriptInstance().fireWarning("null value error", temp.getLineNumber());
+                 ex.printStackTrace();
               }
               else if (ex instanceof ConcurrentModificationException)
               {

Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 01:11:36 UTC (rev 389)
@@ -33,13 +33,20 @@
       {
          checkSafety();
 
-         /* add the new element after the current element */
-         current = current.addAfter(o);
-
-         /* increment the list so that the next element returned is
-            unaffected by this call */
-         index++;
-
+         if (size == 0)
+         {
+            current = current.addBefore(o);
+         }
+         else
+         {
+            /* add the new element after the current element */
+            current = current.addAfter(o);
+ 
+            /* increment the list so that the next element returned is
+               unaffected by this call */
+            index++;
+         }
+        
          modCountCheck++;
       }
 
@@ -110,8 +117,8 @@
    private ListEntry header;
 
    /* fields used by sublists */
-   private ListEntry    boundaryPrevious;
-   private ListEntry    boundaryNext;
+   private ListEntry    boundaryLeft;
+   private ListEntry    boundaryRight;
    private MyLinkedList parentList;
 
    public int size()
@@ -123,26 +130,13 @@
    {
       parentList = plist;
       modCount = parentList.modCount;
-      header = new NormalListEntry(SleepUtils.getScalar("[:header:]"), null, null);
 
-      boundaryPrevious = begin;
-      boundaryNext     = end;
+      /* setup the header */
+      header = new SublistHeaderEntry();
+
+      boundaryLeft = begin;
+      boundaryRight = end;
       
-/*      if (begin instanceof ListEntryWrapper || end instanceof ListEntryWrapper)
-      {
-         System.out.println("This is a problem!");
-         Thread.dumpStack();
-         System.exit(0);
-      } */
-
-
-      ListEntryWrapper head = new ListEntryWrapper(begin);
-      ListEntryWrapper tail = new ListEntryWrapper(end);
-
-      /* set the entries into the header */
-      head.check();
-      tail.check();
-
       size = _size;
    }
 
@@ -177,6 +171,13 @@
       return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
    }
 
+/*   public boolean add(Object o)
+   {
+      ListEntry entry = header;
+      header.previous().addAfter(o);
+      return true;
+   } */
+
    /** get an object from the linked list */
    public Object get(int index)
    {
@@ -248,44 +249,65 @@
       }
    }
 
-   private class ListEntryWrapper implements ListEntry
+   private class SublistHeaderEntry implements ListEntry
    {
-      public ListEntry parent;
+      public SublistHeaderEntry() { }
 
-      public ListEntryWrapper check()
+      public ListEntry remove() 
       {
-         if (parent == boundaryPrevious)
-         {
-            header.setNext(this);
-         }
+         throw new UnsupportedOperationException("remove");
+      }
 
-         if (parent == boundaryNext)
-         {
-            header.setPrevious(this);
-         }
+      public ListEntry previous() 
+      {
+         return new ListEntryWrapper(boundaryRight);
+      }
 
-         return this;
+      public ListEntry next() 
+      {
+         return new ListEntryWrapper(boundaryLeft);
       }
 
-      public ListEntryWrapper(ListEntry _parent)
+      public void setNext(ListEntry e)
       {
-         parent = _parent;
+         throw new UnsupportedOperationException("setNext");
+      }
 
-       /*  if (parent instanceof ListEntryWrapper)
-         {
-             System.out.println("Parent is a wrapper");
-             Thread.dumpStack();
-             System.exit(0);
-         }
+      public void setPrevious(ListEntry e)
+      {
+         throw new UnsupportedOperationException("setPrevious");
+      }
 
-         if (parent == header)
-         {
-             System.out.println("Parent is the header!!!");
-             Thread.dumpStack();
-             System.exit(0);
-         } */
+      public ListEntry addBefore(Object o)
+      {
+         return previous().addAfter(o);
       }
 
+      public ListEntry addAfter(Object o)
+      {
+         return next().addBefore(o);
+      }
+
+      public Object element()
+      {
+         return SleepUtils.getScalar("[:header:]");
+      }
+
+      public void setElement(Object o)
+      {
+         throw new UnsupportedOperationException("setElement");
+      }
+   }
+
+   private class ListEntryWrapper implements ListEntry
+   {
+      public ListEntry parent;
+
+      public ListEntryWrapper(ListEntry _parent)
+      {
+         parent = _parent;
+      }
+
       public ListEntry remove()
       {
          checkSafety();
@@ -295,18 +317,29 @@
          size--;
          modCount++;
 
-         if (parent == boundaryPrevious)
+         if (size == 0)
          {
-            boundaryPrevious = temp;
+            boundaryLeft = boundaryLeft.previous();
+            boundaryRight = boundaryRight.next();
+
+//            System.out.println("Did the remove() magic: " + boundaryLeft.element() + " and " + boundaryRight.element());
+
+            return header;
          }
+         else
+         {
+            if (parent == boundaryLeft)
+            {
+                boundaryLeft = temp;
+            } 
 
-         if (parent == boundaryNext)
-         {
-            boundaryNext = temp;
+            if (parent == boundaryRight)
+            {
+                boundaryRight = temp;
+            }
          }
 
-         ListEntryWrapper r = new ListEntryWrapper(temp);
-         return r.check();
+         return new ListEntryWrapper(temp);
       }
 
       public ListEntry addBefore(Object o)
@@ -318,13 +351,17 @@
          size++;
          modCount++;
 
-         if (parent == boundaryPrevious)
+         if (size == 1)
          {
-            boundaryPrevious = temp;
+            boundaryLeft = temp;
+            boundaryRight = temp;
          }
+         else if (parent == boundaryLeft)
+         {
+            boundaryLeft = temp;
+         }
 
-         ListEntryWrapper r = new ListEntryWrapper(temp);
-         return r.check();
+         return new ListEntryWrapper(temp);
       }
 
       public ListEntry addAfter(Object o)
@@ -336,21 +373,27 @@
          size++;
          modCount++;
 
-         if (parent == boundaryNext)
+         if (size == 1)
          {
-            boundaryNext = temp;
+            boundaryLeft = temp;
+            boundaryRight = temp;
          }
-
-         ListEntryWrapper r = new ListEntryWrapper(temp);
-         return r.check();
+         else if (parent == boundaryRight)
+         {
+            boundaryRight = temp;
+         }
+	
+         return new ListEntryWrapper(temp);
       }
 
       public void setNext(ListEntry entry)
       {
+         System.err.println("setNext");
       }
 
       public void setPrevious(ListEntry entry)
       {
+         System.err.println("setPrevious");
       }
 
       public Object element()
@@ -367,16 +410,11 @@
       {
          checkSafety();
 
-         if (parent == boundaryNext)
+         if (parent == boundaryRight)
          {
-            return header;
+            return new ListEntryWrapper(boundaryLeft);
          }
 
-/*         if (parent instanceof ListEntryWrapper)
-         {
-             System.err.println("next() ARGH!!!!!!!!!!! " + parent);
-         } */
-
          ListEntryWrapper r = new ListEntryWrapper(parent.next());
          return r;
       }
@@ -385,21 +423,11 @@
       {
          checkSafety();
 
-         if (parent == boundaryPrevious)
+         if (parent == boundaryLeft)
          {
-            return header;
+            return new ListEntryWrapper(boundaryRight);
          }
 
-/*         if (parent instanceof ListEntryWrapper)
-         {
-             System.err.println("previous() ARGH!!!!!!!!!!! " + parent);
-         }
-         
-         if (parent.previous() instanceof ListEntryWrapper)
-         {
-             System.err.println(".. " + header.element() + " and whatever");
-         } */
-
          ListEntryWrapper r = new ListEntryWrapper(parent.previous());
          return r;
       }

Added: sleep/tests/listops_empty.sl
===================================================================
--- sleep/tests/listops_empty.sl	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/tests/listops_empty.sl	2008-05-30 01:11:36 UTC (rev 389)
@@ -0,0 +1,20 @@
+#
+# operations on empty sublists.
+#
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h");
+println(@a);
+
+ at b = sublist(@a, 2, 3);
+println(@b);
+push(@b, "PHEAR");
+println(@a);
+println(@b);
+
+clear(@b);
+println(@a);
+println(@b);
+
+push(@b, "uNF");
+println(@a);
+println(@b);

Added: sleep/tests/listops_simple.sl
===================================================================
--- sleep/tests/listops_simple.sl	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/tests/listops_simple.sl	2008-05-30 01:11:36 UTC (rev 389)
@@ -0,0 +1,19 @@
+ at list = @("a", "b", "c", "d", "e");
+println(@list);
+
+ at sublist = sublist(@list, 1, 4);
+println(@sublist);
+
+removeAt(@sublist, 0);
+println(@sublist);
+
+removeAt(@sublist, 0);
+println(@sublist);
+
+removeAt(@sublist, 0);
+println(@sublist);
+
+add(@sublist, "blah");
+println(@sublist);
+
+println(@list);

Added: sleep/tests/output/listops_empty.sl
===================================================================
--- sleep/tests/output/listops_empty.sl	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/tests/output/listops_empty.sl	2008-05-30 01:11:36 UTC (rev 389)
@@ -0,0 +1,8 @@
+@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
+@('c')
+@('a', 'b', 'c', 'PHEAR', 'd', 'e', 'f', 'g', 'h')
+@('c', 'PHEAR')
+@('a', 'b', 'd', 'e', 'f', 'g', 'h')
+@()
+@('a', 'b', 'uNF', 'd', 'e', 'f', 'g', 'h')
+@('uNF')

Added: sleep/tests/output/listops_simple.sl
===================================================================
--- sleep/tests/output/listops_simple.sl	2008-05-29 20:24:41 UTC (rev 388)
+++ sleep/tests/output/listops_simple.sl	2008-05-30 01:11:36 UTC (rev 389)
@@ -0,0 +1,7 @@
+@('a', 'b', 'c', 'd', 'e')
+@('b', 'c', 'd')
+@('c', 'd')
+@('d')
+@()
+@('blah')
+@('a', 'blah', 'e')



From rsmudge at mail.berlios.de  Fri May 30 17:43:53 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 17:43:53 +0200
Subject: [Sleep-svn] r390 - in sleep: src/sleep/engine/types tests
	tests/output
Message-ID: <200805301543.m4UFhr7B015671@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 17:43:52 +0200 (Fri, 30 May 2008)
New Revision: 390

Added:
   sleep/tests/listops_empty2.sl
   sleep/tests/output/listops_empty2.sl
Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
more changes to the linked list implementation


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 01:11:36 UTC (rev 389)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 15:43:52 UTC (rev 390)
@@ -33,19 +33,12 @@
       {
          checkSafety();
 
-         if (size == 0)
-         {
-            current = current.addBefore(o);
-         }
-         else
-         {
-            /* add the new element after the current element */
-            current = current.addAfter(o);
+         /* add the new element after the current element */
+         current = current.addAfter(o);
  
-            /* increment the list so that the next element returned is
-               unaffected by this call */
-            index++;
-         }
+         /* increment the list so that the next element returned is
+            unaffected by this call */
+         index++;
         
          modCountCheck++;
       }
@@ -117,8 +110,6 @@
    private ListEntry header;
 
    /* fields used by sublists */
-   private ListEntry    boundaryLeft;
-   private ListEntry    boundaryRight;
    private MyLinkedList parentList;
 
    public int size()
@@ -131,12 +122,7 @@
       parentList = plist;
       modCount = parentList.modCount;
 
-      /* setup the header */
-      header = new SublistHeaderEntry();
-
-      boundaryLeft = begin;
-      boundaryRight = end;
-      
+      header = new SublistHeaderEntry(begin, end);
       size = _size;
    }
 
@@ -251,8 +237,15 @@
 
    private class SublistHeaderEntry implements ListEntry
    {
-      public SublistHeaderEntry() { }
+      private ListEntry anchorLeft;
+      private ListEntry anchorRight;
 
+      public SublistHeaderEntry(ListEntry a, ListEntry b) 
+      {
+         anchorLeft  = a.previous();
+         anchorRight = b.next();
+      }
+
       public ListEntry remove() 
       {
          throw new UnsupportedOperationException("remove");
@@ -260,22 +253,24 @@
 
       public ListEntry previous() 
       {
-         return new ListEntryWrapper(boundaryRight);
+         return new ListEntryWrapper(anchorRight.previous());
       }
 
       public ListEntry next() 
       {
-         return new ListEntryWrapper(boundaryLeft);
+         return new ListEntryWrapper(anchorLeft.next());
       }
 
       public void setNext(ListEntry e)
       {
-         throw new UnsupportedOperationException("setNext");
+         anchorRight.setPrevious(e);
+         e.setNext(anchorRight);
       }
 
       public void setPrevious(ListEntry e)
       {
-         throw new UnsupportedOperationException("setPrevious");
+         anchorLeft.setNext(e);
+         e.setPrevious(anchorLeft);
       }
 
       public ListEntry addBefore(Object o)
@@ -319,23 +314,18 @@
 
          if (size == 0)
          {
-            boundaryLeft = boundaryLeft.previous();
-            boundaryRight = boundaryRight.next();
-
-//            System.out.println("Did the remove() magic: " + boundaryLeft.element() + " and " + boundaryRight.element());
-
             return header;
          }
          else
          {
-            if (parent == boundaryLeft)
+            if (parent == header.next())
             {
-                boundaryLeft = temp;
+                header.setNext(temp);
             } 
 
-            if (parent == boundaryRight)
+            if (parent == header.previous())
             {
-                boundaryRight = temp;
+                header.setPrevious(temp);
             }
          }
 
@@ -353,12 +343,12 @@
 
          if (size == 1)
          {
-            boundaryLeft = temp;
-            boundaryRight = temp;
+            header.setNext(temp);
+            header.setPrevious(temp);
          }
-         else if (parent == boundaryLeft)
+         else if (parent == header.next())
          {
-            boundaryLeft = temp;
+            header.setPrevious(temp);
          }
 
          return new ListEntryWrapper(temp);
@@ -375,12 +365,12 @@
 
          if (size == 1)
          {
-            boundaryLeft = temp;
-            boundaryRight = temp;
+            header.setNext(temp);
+            header.setPrevious(temp);
          }
-         else if (parent == boundaryRight)
+         else if (parent == header.previous())
          {
-            boundaryRight = temp;
+            header.setNext(temp);
          }
 	
          return new ListEntryWrapper(temp);
@@ -410,9 +400,9 @@
       {
          checkSafety();
 
-         if (parent == boundaryRight)
+         if (parent == header.next())
          {
-            return new ListEntryWrapper(boundaryLeft);
+            return new ListEntryWrapper(header);
          }
 
          ListEntryWrapper r = new ListEntryWrapper(parent.next());
@@ -423,9 +413,9 @@
       {
          checkSafety();
 
-         if (parent == boundaryLeft)
+         if (parent == header.previous())
          {
-            return new ListEntryWrapper(boundaryRight);
+            return new ListEntryWrapper(header);
          }
 
          ListEntryWrapper r = new ListEntryWrapper(parent.previous());

Added: sleep/tests/listops_empty2.sl
===================================================================
--- sleep/tests/listops_empty2.sl	2008-05-30 01:11:36 UTC (rev 389)
+++ sleep/tests/listops_empty2.sl	2008-05-30 15:43:52 UTC (rev 390)
@@ -0,0 +1,20 @@
+#
+# operations on empty sublists.
+#
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h");
+println(@a);
+
+ at b = sublist(@a, 2, 3);
+println(@b);
+add(@b, "PHEAR");
+println(@a);
+println(@b);
+
+clear(@b);
+println(@a);
+println(@b);
+
+add(@b, "uNF");
+println(@a);
+println(@b);

Added: sleep/tests/output/listops_empty2.sl
===================================================================
--- sleep/tests/output/listops_empty2.sl	2008-05-30 01:11:36 UTC (rev 389)
+++ sleep/tests/output/listops_empty2.sl	2008-05-30 15:43:52 UTC (rev 390)
@@ -0,0 +1,8 @@
+@('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
+@('c')
+@('a', 'b', 'PHEAR', 'c', 'd', 'e', 'f', 'g', 'h')
+@('PHEAR', 'c')
+@('a', 'b', 'd', 'e', 'f', 'g', 'h')
+@()
+@('a', 'b', 'uNF', 'd', 'e', 'f', 'g', 'h')
+@('uNF')



From rsmudge at mail.berlios.de  Fri May 30 17:49:19 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 17:49:19 +0200
Subject: [Sleep-svn] r391 - sleep/src/sleep/engine/types
Message-ID: <200805301549.m4UFnJbN016134@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 17:49:19 +0200 (Fri, 30 May 2008)
New Revision: 391

Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
..


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 15:43:52 UTC (rev 390)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 15:49:19 UTC (rev 391)
@@ -378,12 +378,12 @@
 
       public void setNext(ListEntry entry)
       {
-         System.err.println("setNext");
+         throw new UnsupportedOperationException("ListEntryWrapper::setNext");
       }
 
       public void setPrevious(ListEntry entry)
       {
-         System.err.println("setPrevious");
+         throw new UnsupportedOperationException("ListEntryWrapper::setPrevious");
       }
 
       public Object element()



From rsmudge at mail.berlios.de  Fri May 30 18:09:16 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 18:09:16 +0200
Subject: [Sleep-svn] r392 - in sleep: src/sleep/engine/types tests
	tests/output
Message-ID: <200805301609.m4UG9GAZ018089@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 18:09:15 +0200 (Fri, 30 May 2008)
New Revision: 392

Added:
   sleep/tests/addtest.sl
   sleep/tests/output/addtest.sl
   sleep/tests/output/removetest.sl
   sleep/tests/removetest.sl
Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
Log:
more tests == more stable array implementation


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 15:49:19 UTC (rev 391)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 16:09:15 UTC (rev 392)
@@ -157,12 +157,12 @@
       return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
    }
 
-/*   public boolean add(Object o)
+   public boolean add(Object o)
    {
       ListEntry entry = header;
       header.previous().addAfter(o);
       return true;
-   } */
+   }
 
    /** get an object from the linked list */
    public Object get(int index)

Added: sleep/tests/addtest.sl
===================================================================
--- sleep/tests/addtest.sl	2008-05-30 15:49:19 UTC (rev 391)
+++ sleep/tests/addtest.sl	2008-05-30 16:09:15 UTC (rev 392)
@@ -0,0 +1,25 @@
+#
+# test out the add and push ops in many different scenarios.
+#
+
+ at a = @("a", "b", "c", "d", "e");
+println(@a);
+
+for ($x = 0; $x < 6; $x++)
+{
+   for ($y = $x; $y < 6; $y++)
+   {
+      @a = @("a", "b", "c", "d", "e");
+      @b = sublist(@a, $x, $y);
+      println("sublist(@a, $x $+ , $y $+ ) = " . @b);
+      println("   Push END");
+      push(@b, "END");
+      println("      " . @b);
+      println("      " . @a);
+      println("   Add BEGIN");
+      add(@b, "BEGIN");
+      println("      " . @b);
+      println("      " . @a);
+      println();
+   }
+}

Added: sleep/tests/output/addtest.sl
===================================================================
--- sleep/tests/output/addtest.sl	2008-05-30 15:49:19 UTC (rev 391)
+++ sleep/tests/output/addtest.sl	2008-05-30 16:09:15 UTC (rev 392)
@@ -0,0 +1,169 @@
+@('a', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 0) = @()
+   Push END
+      @('END')
+      @('END', 'a', 'b', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('BEGIN', 'END', 'a', 'b', 'c', 'd', 'e')
+
+sublist(@a, 0, 1) = @('a')
+   Push END
+      @('a', 'END')
+      @('a', 'END', 'b', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'a', 'END')
+      @('BEGIN', 'a', 'END', 'b', 'c', 'd', 'e')
+
+sublist(@a, 0, 2) = @('a', 'b')
+   Push END
+      @('a', 'b', 'END')
+      @('a', 'b', 'END', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'a', 'b', 'END')
+      @('BEGIN', 'a', 'b', 'END', 'c', 'd', 'e')
+
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Push END
+      @('a', 'b', 'c', 'END')
+      @('a', 'b', 'c', 'END', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'a', 'b', 'c', 'END')
+      @('BEGIN', 'a', 'b', 'c', 'END', 'd', 'e')
+
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Push END
+      @('a', 'b', 'c', 'd', 'END')
+      @('a', 'b', 'c', 'd', 'END', 'e')
+   Add BEGIN
+      @('BEGIN', 'a', 'b', 'c', 'd', 'END')
+      @('BEGIN', 'a', 'b', 'c', 'd', 'END', 'e')
+
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Push END
+      @('a', 'b', 'c', 'd', 'e', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'a', 'b', 'c', 'd', 'e', 'END')
+      @('BEGIN', 'a', 'b', 'c', 'd', 'e', 'END')
+
+sublist(@a, 1, 1) = @()
+   Push END
+      @('END')
+      @('a', 'END', 'b', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('a', 'BEGIN', 'END', 'b', 'c', 'd', 'e')
+
+sublist(@a, 1, 2) = @('b')
+   Push END
+      @('b', 'END')
+      @('a', 'b', 'END', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'b', 'END')
+      @('a', 'BEGIN', 'b', 'END', 'c', 'd', 'e')
+
+sublist(@a, 1, 3) = @('b', 'c')
+   Push END
+      @('b', 'c', 'END')
+      @('a', 'b', 'c', 'END', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'b', 'c', 'END')
+      @('a', 'BEGIN', 'b', 'c', 'END', 'd', 'e')
+
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Push END
+      @('b', 'c', 'd', 'END')
+      @('a', 'b', 'c', 'd', 'END', 'e')
+   Add BEGIN
+      @('BEGIN', 'b', 'c', 'd', 'END')
+      @('a', 'BEGIN', 'b', 'c', 'd', 'END', 'e')
+
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Push END
+      @('b', 'c', 'd', 'e', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'b', 'c', 'd', 'e', 'END')
+      @('a', 'BEGIN', 'b', 'c', 'd', 'e', 'END')
+
+sublist(@a, 2, 2) = @()
+   Push END
+      @('END')
+      @('a', 'b', 'END', 'c', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('a', 'b', 'BEGIN', 'END', 'c', 'd', 'e')
+
+sublist(@a, 2, 3) = @('c')
+   Push END
+      @('c', 'END')
+      @('a', 'b', 'c', 'END', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'c', 'END')
+      @('a', 'b', 'BEGIN', 'c', 'END', 'd', 'e')
+
+sublist(@a, 2, 4) = @('c', 'd')
+   Push END
+      @('c', 'd', 'END')
+      @('a', 'b', 'c', 'd', 'END', 'e')
+   Add BEGIN
+      @('BEGIN', 'c', 'd', 'END')
+      @('a', 'b', 'BEGIN', 'c', 'd', 'END', 'e')
+
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Push END
+      @('c', 'd', 'e', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'c', 'd', 'e', 'END')
+      @('a', 'b', 'BEGIN', 'c', 'd', 'e', 'END')
+
+sublist(@a, 3, 3) = @()
+   Push END
+      @('END')
+      @('a', 'b', 'c', 'END', 'd', 'e')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('a', 'b', 'c', 'BEGIN', 'END', 'd', 'e')
+
+sublist(@a, 3, 4) = @('d')
+   Push END
+      @('d', 'END')
+      @('a', 'b', 'c', 'd', 'END', 'e')
+   Add BEGIN
+      @('BEGIN', 'd', 'END')
+      @('a', 'b', 'c', 'BEGIN', 'd', 'END', 'e')
+
+sublist(@a, 3, 5) = @('d', 'e')
+   Push END
+      @('d', 'e', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'd', 'e', 'END')
+      @('a', 'b', 'c', 'BEGIN', 'd', 'e', 'END')
+
+sublist(@a, 4, 4) = @()
+   Push END
+      @('END')
+      @('a', 'b', 'c', 'd', 'END', 'e')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('a', 'b', 'c', 'd', 'BEGIN', 'END', 'e')
+
+sublist(@a, 4, 5) = @('e')
+   Push END
+      @('e', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'e', 'END')
+      @('a', 'b', 'c', 'd', 'BEGIN', 'e', 'END')
+
+sublist(@a, 5, 5) = @()
+   Push END
+      @('END')
+      @('a', 'b', 'c', 'd', 'e', 'END')
+   Add BEGIN
+      @('BEGIN', 'END')
+      @('a', 'b', 'c', 'd', 'e', 'BEGIN', 'END')
+

Added: sleep/tests/output/removetest.sl
===================================================================
--- sleep/tests/output/removetest.sl	2008-05-30 15:49:19 UTC (rev 391)
+++ sleep/tests/output/removetest.sl	2008-05-30 16:09:15 UTC (rev 392)
@@ -0,0 +1,141 @@
+@('a', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 1) = @('a')
+   Remove 0:
+     @('b', 'c', 'd', 'e')
+     @()
+sublist(@a, 0, 2) = @('a', 'b')
+   Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b')
+sublist(@a, 0, 2) = @('a', 'b')
+   Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Remove 4:
+     @('a', 'b', 'c', 'd')
+     @('a', 'b', 'c', 'd')
+sublist(@a, 1, 2) = @('b')
+   Remove 0:
+     @('a', 'c', 'd', 'e')
+     @()
+sublist(@a, 1, 3) = @('b', 'c')
+   Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c')
+sublist(@a, 1, 3) = @('b', 'c')
+   Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Remove 3:
+     @('a', 'b', 'c', 'd')
+     @('b', 'c', 'd')
+sublist(@a, 2, 3) = @('c')
+   Remove 0:
+     @('a', 'b', 'd', 'e')
+     @()
+sublist(@a, 2, 4) = @('c', 'd')
+   Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d')
+sublist(@a, 2, 4) = @('c', 'd')
+   Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Remove 2:
+     @('a', 'b', 'c', 'd')
+     @('c', 'd')
+sublist(@a, 3, 4) = @('d')
+   Remove 0:
+     @('a', 'b', 'c', 'e')
+     @()
+sublist(@a, 3, 5) = @('d', 'e')
+   Remove 0:
+     @('a', 'b', 'c', 'e')
+     @('e')
+sublist(@a, 3, 5) = @('d', 'e')
+   Remove 1:
+     @('a', 'b', 'c', 'd')
+     @('d')
+sublist(@a, 4, 5) = @('e')
+   Remove 0:
+     @('a', 'b', 'c', 'd')
+     @()

Added: sleep/tests/removetest.sl
===================================================================
--- sleep/tests/removetest.sl	2008-05-30 15:49:19 UTC (rev 391)
+++ sleep/tests/removetest.sl	2008-05-30 16:09:15 UTC (rev 392)
@@ -0,0 +1,23 @@
+#
+# test out the add and push ops in many different scenarios.
+#
+
+ at a = @("a", "b", "c", "d", "e");
+println(@a);
+
+for ($x = 0; $x < 6; $x++)
+{
+   for ($y = $x; $y < 6; $y++)
+   {
+      for ($z = 0; $z < ($y - $x); $z++)
+      {
+         @a = @("a", "b", "c", "d", "e");
+         @b = sublist(@a, $x, $y);
+         println("sublist(@a, $x $+ , $y $+ ) = " . @b);
+         removeAt(@b, $z);
+         println("   Remove $z $+ :");
+         println("     " . @a);
+         println("     " . @b);
+      }
+   }
+}



From rsmudge at mail.berlios.de  Fri May 30 18:19:24 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 18:19:24 +0200
Subject: [Sleep-svn] r393 - in sleep: . src/sleep/engine
	src/sleep/engine/types tests tests/output
Message-ID: <200805301619.m4UGJOR9018983@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 18:19:23 +0200 (Fri, 30 May 2008)
New Revision: 393

Added:
   sleep/tests/output/removeerr.sl
   sleep/tests/removeerr.sl
Modified:
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/types/MyLinkedList.java
   sleep/tests/output/nmesgs.sl
   sleep/whatsnew.txt
Log:
more descriptive index errors and ah, ... whatever :)


Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/src/sleep/engine/Block.java	2008-05-30 16:19:23 UTC (rev 393)
@@ -236,7 +236,14 @@
               }
               else if (ex instanceof IndexOutOfBoundsException)
               {
-                 environment.getScriptInstance().fireWarning("attempted an invalid index", temp.getLineNumber());
+                 if (ex.getMessage() != null)
+                 {
+                    environment.getScriptInstance().fireWarning("attempted an invalid index: " + ex.getMessage(), temp.getLineNumber());
+                 }
+                 else
+                 {
+                    environment.getScriptInstance().fireWarning("attempted an invalid index", temp.getLineNumber());
+                 }
               }
               else if (ex instanceof ClassCastException)
               {

Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 16:19:23 UTC (rev 393)
@@ -157,6 +157,7 @@
       return new MyLinkedList(parentList == null ? this : parentList, begin, end, (endAt - beginAt));
    }
 
+   /** add an object to the list */
    public boolean add(Object o)
    {
       ListEntry entry = header;
@@ -167,12 +168,25 @@
    /** get an object from the linked list */
    public Object get(int index)
    {
-      if (size == 0)
-         throw new IndexOutOfBoundsException("list is empty");
+      if (index >= size)
+         throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
 
       return getAt(index).next().element();
    }
 
+   /** remove an object at the specified index */
+   public Object remove(int index)
+   {
+      if (index >= size)
+         throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
+
+      ListEntry entry = getAt(index).next();
+      Object value = entry.element();
+      entry.remove();
+
+      return value;
+   }
+
    /** returns the entry at the specified index */
    private ListEntry getAt(int index)
    {

Modified: sleep/tests/output/nmesgs.sl
===================================================================
--- sleep/tests/output/nmesgs.sl	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/tests/output/nmesgs.sl	2008-05-30 16:19:23 UTC (rev 393)
@@ -1,2 +1,2 @@
 Warning: expected I/O handle argument, received: $null at eval:1
-Warning: attempted an invalid index at nmesgs.sl:13
+Warning: attempted an invalid index: Index: -5, Size: 4 at nmesgs.sl:13

Added: sleep/tests/output/removeerr.sl
===================================================================
--- sleep/tests/output/removeerr.sl	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/tests/output/removeerr.sl	2008-05-30 16:19:23 UTC (rev 393)
@@ -0,0 +1 @@
+Warning: attempted an invalid index: Index: 4, Size: 3 at removeerr.sl:2

Added: sleep/tests/removeerr.sl
===================================================================
--- sleep/tests/removeerr.sl	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/tests/removeerr.sl	2008-05-30 16:19:23 UTC (rev 393)
@@ -0,0 +1,2 @@
+ at a = @("a", "b", "c");
+removeAt(@a, 4);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 16:09:15 UTC (rev 392)
+++ sleep/whatsnew.txt	2008-05-30 16:19:23 UTC (rev 393)
@@ -21,6 +21,8 @@
   hasmatch will remove its state after returning false.  These
   measures are in place to help prevent runaway uses of 
   hasmatch from eating all of the memory.
+- bad index errors (IndexOutOfBoundsException) are now more
+  descriptive in some cases.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 18:23:11 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 18:23:11 +0200
Subject: [Sleep-svn] r394 - in sleep/tests: . output
Message-ID: <200805301623.m4UGNBCK019475@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 18:23:11 +0200 (Fri, 30 May 2008)
New Revision: 394

Added:
   sleep/tests/output/poptest.sl
   sleep/tests/poptest.sl
Log:
another test :)


Added: sleep/tests/output/poptest.sl
===================================================================
--- sleep/tests/output/poptest.sl	2008-05-30 16:19:23 UTC (rev 393)
+++ sleep/tests/output/poptest.sl	2008-05-30 16:23:11 UTC (rev 394)
@@ -0,0 +1,127 @@
+@('a', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 0) = @()
+sublist(@a, 0, 1) = @('a')
+   Popped: a
+      @('b', 'c', 'd', 'e')
+      @()
+sublist(@a, 0, 2) = @('a', 'b')
+   Popped: b
+      @('a', 'c', 'd', 'e')
+      @('a')
+   Popped: a
+      @('c', 'd', 'e')
+      @()
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Popped: c
+      @('a', 'b', 'd', 'e')
+      @('a', 'b')
+   Popped: b
+      @('a', 'd', 'e')
+      @('a')
+   Popped: a
+      @('d', 'e')
+      @()
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Popped: d
+      @('a', 'b', 'c', 'e')
+      @('a', 'b', 'c')
+   Popped: c
+      @('a', 'b', 'e')
+      @('a', 'b')
+   Popped: b
+      @('a', 'e')
+      @('a')
+   Popped: a
+      @('e')
+      @()
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Popped: e
+      @('a', 'b', 'c', 'd')
+      @('a', 'b', 'c', 'd')
+   Popped: d
+      @('a', 'b', 'c')
+      @('a', 'b', 'c')
+   Popped: c
+      @('a', 'b')
+      @('a', 'b')
+   Popped: b
+      @('a')
+      @('a')
+   Popped: a
+      @()
+      @()
+sublist(@a, 1, 1) = @()
+sublist(@a, 1, 2) = @('b')
+   Popped: b
+      @('a', 'c', 'd', 'e')
+      @()
+sublist(@a, 1, 3) = @('b', 'c')
+   Popped: c
+      @('a', 'b', 'd', 'e')
+      @('b')
+   Popped: b
+      @('a', 'd', 'e')
+      @()
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Popped: d
+      @('a', 'b', 'c', 'e')
+      @('b', 'c')
+   Popped: c
+      @('a', 'b', 'e')
+      @('b')
+   Popped: b
+      @('a', 'e')
+      @()
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Popped: e
+      @('a', 'b', 'c', 'd')
+      @('b', 'c', 'd')
+   Popped: d
+      @('a', 'b', 'c')
+      @('b', 'c')
+   Popped: c
+      @('a', 'b')
+      @('b')
+   Popped: b
+      @('a')
+      @()
+sublist(@a, 2, 2) = @()
+sublist(@a, 2, 3) = @('c')
+   Popped: c
+      @('a', 'b', 'd', 'e')
+      @()
+sublist(@a, 2, 4) = @('c', 'd')
+   Popped: d
+      @('a', 'b', 'c', 'e')
+      @('c')
+   Popped: c
+      @('a', 'b', 'e')
+      @()
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Popped: e
+      @('a', 'b', 'c', 'd')
+      @('c', 'd')
+   Popped: d
+      @('a', 'b', 'c')
+      @('c')
+   Popped: c
+      @('a', 'b')
+      @()
+sublist(@a, 3, 3) = @()
+sublist(@a, 3, 4) = @('d')
+   Popped: d
+      @('a', 'b', 'c', 'e')
+      @()
+sublist(@a, 3, 5) = @('d', 'e')
+   Popped: e
+      @('a', 'b', 'c', 'd')
+      @('d')
+   Popped: d
+      @('a', 'b', 'c')
+      @()
+sublist(@a, 4, 4) = @()
+sublist(@a, 4, 5) = @('e')
+   Popped: e
+      @('a', 'b', 'c', 'd')
+      @()
+sublist(@a, 5, 5) = @()

Added: sleep/tests/poptest.sl
===================================================================
--- sleep/tests/poptest.sl	2008-05-30 16:19:23 UTC (rev 393)
+++ sleep/tests/poptest.sl	2008-05-30 16:23:11 UTC (rev 394)
@@ -0,0 +1,23 @@
+#
+# test out the add and push ops in many different scenarios.
+#
+
+ at a = @("a", "b", "c", "d", "e");
+println(@a);
+
+for ($x = 0; $x < 6; $x++)
+{
+   for ($y = $x; $y < 6; $y++)
+   {
+      @a = @("a", "b", "c", "d", "e");
+      @b = sublist(@a, $x, $y);
+      println("sublist(@a, $x $+ , $y $+ ) = " . @b);
+
+      for ($z = 0; $z < ($y - $x); $z++)
+      {
+         println("   Popped: " . pop(@b));
+         println("      " . @a);
+         println("      " . @b);
+      }
+   }
+}



From rsmudge at mail.berlios.de  Fri May 30 18:45:10 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 18:45:10 +0200
Subject: [Sleep-svn] r395 - in sleep/tests: . output
Message-ID: <200805301645.m4UGjAGR012771@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 18:45:09 +0200 (Fri, 30 May 2008)
New Revision: 395

Added:
   sleep/tests/addattest.sl
   sleep/tests/feremovetest.sl
   sleep/tests/output/addattest.sl
   sleep/tests/output/feremovetest.sl
Log:
more tests...


Added: sleep/tests/addattest.sl
===================================================================
--- sleep/tests/addattest.sl	2008-05-30 16:23:11 UTC (rev 394)
+++ sleep/tests/addattest.sl	2008-05-30 16:45:09 UTC (rev 395)
@@ -0,0 +1,24 @@
+#
+# test out the add and push ops in many different scenarios.
+#
+
+ at a = @("a", "b", "c", "d", "e");
+println(@a);
+
+for ($x = 0; $x < 6; $x++)
+{
+   for ($y = $x; $y < 6; $y++)
+   {
+      for ($z = 0; $z < (($y - $x) + 1); $z++)
+      {
+         @a = @("a", "b", "c", "d", "e");
+         @b = sublist(@a, $x, $y);
+         println("sublist(@a, $x $+ , $y $+ ) = " . @b);
+
+         add(@b, "HELLO", $z);
+         println("  add at $z $+ :");
+         println("     " . @a);
+         println("     " . @b);
+      }
+   }
+}

Added: sleep/tests/feremovetest.sl
===================================================================
--- sleep/tests/feremovetest.sl	2008-05-30 16:23:11 UTC (rev 394)
+++ sleep/tests/feremovetest.sl	2008-05-30 16:45:09 UTC (rev 395)
@@ -0,0 +1,29 @@
+#
+# test out the add and push ops in many different scenarios.
+#
+
+for ($x = 0; $x < 6; $x++)
+{
+   for ($y = $x; $y < 6; $y++)
+   {
+      for ($z = 0; $z < ($y - $x); $z++)
+      {
+         @a = @("a", "b", "c", "d", "e");
+         @b = sublist(@a, $x, $y);
+         println("sublist(@a, $x $+ , $y $+ ) = " . @b);
+
+         foreach $index => $value (@b)
+         {
+             if ($index == $z)
+             {
+                remove();
+                break;
+             }
+         }
+
+         println("   Foreach Remove $z $+ :");
+         println("     " . @a);
+         println("     " . @b);
+      }
+   }
+}

Added: sleep/tests/output/addattest.sl
===================================================================
--- sleep/tests/output/addattest.sl	2008-05-30 16:23:11 UTC (rev 394)
+++ sleep/tests/output/addattest.sl	2008-05-30 16:45:09 UTC (rev 395)
@@ -0,0 +1,225 @@
+@('a', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 0) = @()
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO')
+sublist(@a, 0, 1) = @('a')
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO', 'a')
+sublist(@a, 0, 1) = @('a')
+  add at 1:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('a', 'HELLO')
+sublist(@a, 0, 2) = @('a', 'b')
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO', 'a', 'b')
+sublist(@a, 0, 2) = @('a', 'b')
+  add at 1:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('a', 'HELLO', 'b')
+sublist(@a, 0, 2) = @('a', 'b')
+  add at 2:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('a', 'b', 'HELLO')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO', 'a', 'b', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+  add at 1:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('a', 'HELLO', 'b', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+  add at 2:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('a', 'b', 'HELLO', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+  add at 3:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('a', 'b', 'c', 'HELLO')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO', 'a', 'b', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+  add at 1:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('a', 'HELLO', 'b', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+  add at 2:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('a', 'b', 'HELLO', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+  add at 3:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('a', 'b', 'c', 'HELLO', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+  add at 4:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('a', 'b', 'c', 'd', 'HELLO')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 0:
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+     @('HELLO', 'a', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 1:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 2:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 3:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 4:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+  add at 5:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+sublist(@a, 1, 1) = @()
+  add at 0:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('HELLO')
+sublist(@a, 1, 2) = @('b')
+  add at 0:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('HELLO', 'b')
+sublist(@a, 1, 2) = @('b')
+  add at 1:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('b', 'HELLO')
+sublist(@a, 1, 3) = @('b', 'c')
+  add at 0:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('HELLO', 'b', 'c')
+sublist(@a, 1, 3) = @('b', 'c')
+  add at 1:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('b', 'HELLO', 'c')
+sublist(@a, 1, 3) = @('b', 'c')
+  add at 2:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('b', 'c', 'HELLO')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+  add at 0:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('HELLO', 'b', 'c', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+  add at 1:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('b', 'HELLO', 'c', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+  add at 2:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('b', 'c', 'HELLO', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+  add at 3:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('b', 'c', 'd', 'HELLO')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+  add at 0:
+     @('a', 'HELLO', 'b', 'c', 'd', 'e')
+     @('HELLO', 'b', 'c', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+  add at 1:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('b', 'HELLO', 'c', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+  add at 2:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('b', 'c', 'HELLO', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+  add at 3:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('b', 'c', 'd', 'HELLO', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+  add at 4:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('b', 'c', 'd', 'e', 'HELLO')
+sublist(@a, 2, 2) = @()
+  add at 0:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('HELLO')
+sublist(@a, 2, 3) = @('c')
+  add at 0:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('HELLO', 'c')
+sublist(@a, 2, 3) = @('c')
+  add at 1:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('c', 'HELLO')
+sublist(@a, 2, 4) = @('c', 'd')
+  add at 0:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('HELLO', 'c', 'd')
+sublist(@a, 2, 4) = @('c', 'd')
+  add at 1:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('c', 'HELLO', 'd')
+sublist(@a, 2, 4) = @('c', 'd')
+  add at 2:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('c', 'd', 'HELLO')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+  add at 0:
+     @('a', 'b', 'HELLO', 'c', 'd', 'e')
+     @('HELLO', 'c', 'd', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+  add at 1:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('c', 'HELLO', 'd', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+  add at 2:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('c', 'd', 'HELLO', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+  add at 3:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('c', 'd', 'e', 'HELLO')
+sublist(@a, 3, 3) = @()
+  add at 0:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('HELLO')
+sublist(@a, 3, 4) = @('d')
+  add at 0:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('HELLO', 'd')
+sublist(@a, 3, 4) = @('d')
+  add at 1:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('d', 'HELLO')
+sublist(@a, 3, 5) = @('d', 'e')
+  add at 0:
+     @('a', 'b', 'c', 'HELLO', 'd', 'e')
+     @('HELLO', 'd', 'e')
+sublist(@a, 3, 5) = @('d', 'e')
+  add at 1:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('d', 'HELLO', 'e')
+sublist(@a, 3, 5) = @('d', 'e')
+  add at 2:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('d', 'e', 'HELLO')
+sublist(@a, 4, 4) = @()
+  add at 0:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('HELLO')
+sublist(@a, 4, 5) = @('e')
+  add at 0:
+     @('a', 'b', 'c', 'd', 'HELLO', 'e')
+     @('HELLO', 'e')
+sublist(@a, 4, 5) = @('e')
+  add at 1:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('e', 'HELLO')
+sublist(@a, 5, 5) = @()
+  add at 0:
+     @('a', 'b', 'c', 'd', 'e', 'HELLO')
+     @('HELLO')

Added: sleep/tests/output/feremovetest.sl
===================================================================
--- sleep/tests/output/feremovetest.sl	2008-05-30 16:23:11 UTC (rev 394)
+++ sleep/tests/output/feremovetest.sl	2008-05-30 16:45:09 UTC (rev 395)
@@ -0,0 +1,140 @@
+sublist(@a, 0, 1) = @('a')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @()
+sublist(@a, 0, 2) = @('a', 'b')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b')
+sublist(@a, 0, 2) = @('a', 'b')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 4:
+     @('a', 'b', 'c', 'd')
+     @('a', 'b', 'c', 'd')
+sublist(@a, 1, 2) = @('b')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @()
+sublist(@a, 1, 3) = @('b', 'c')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c')
+sublist(@a, 1, 3) = @('b', 'c')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'd')
+     @('b', 'c', 'd')
+sublist(@a, 2, 3) = @('c')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @()
+sublist(@a, 2, 4) = @('c', 'd')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d')
+sublist(@a, 2, 4) = @('c', 'd')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'd')
+     @('c', 'd')
+sublist(@a, 3, 4) = @('d')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'e')
+     @()
+sublist(@a, 3, 5) = @('d', 'e')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'e')
+     @('e')
+sublist(@a, 3, 5) = @('d', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'd')
+     @('d')
+sublist(@a, 4, 5) = @('e')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'd')
+     @()



From rsmudge at mail.berlios.de  Fri May 30 19:15:03 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 19:15:03 +0200
Subject: [Sleep-svn] r396 - in sleep: . src/sleep/engine/types tests
	tests/output
Message-ID: <200805301715.m4UHF349017045@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 19:15:02 +0200 (Fri, 30 May 2008)
New Revision: 396

Added:
   sleep/tests/output/feremove.sl
   sleep/tests/output/sertest.sl
   sleep/tests/sertest.sl
Modified:
   sleep/src/sleep/engine/types/MyLinkedList.java
   sleep/whatsnew.txt
Log:
linkedlist crap is done.


Modified: sleep/src/sleep/engine/types/MyLinkedList.java
===================================================================
--- sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 16:45:09 UTC (rev 395)
+++ sleep/src/sleep/engine/types/MyLinkedList.java	2008-05-30 17:15:02 UTC (rev 396)
@@ -106,11 +106,11 @@
       }
    }
 
-   int size = 0;
-   private ListEntry header;
+   private transient int size = 0;
+   private transient ListEntry header;
 
    /* fields used by sublists */
-   private MyLinkedList parentList;
+   private transient MyLinkedList parentList;
 
    public int size()
    {
@@ -165,6 +165,13 @@
       return true;
    }
 
+   /** add an object to the list at the specified index */
+   public void add(int index, Object element)
+   {
+      ListEntry entry = getAt(index);
+      entry.addAfter(element); 
+   }
+
    /** get an object from the linked list */
    public Object get(int index)
    {
@@ -549,4 +556,42 @@
          return buffer.toString();
       }
    }
+
+    /* save this list to the stream */
+    private synchronized void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException 
+    {
+        /* grab any fields I missed */
+	out.defaultWriteObject();
+      
+        /* write out the size */
+        out.writeInt(size);
+
+        /* blah blah blah */
+        Iterator i = iterator();
+        while (i.hasNext())
+        {
+           out.writeObject(i.next());
+        }
+    }
+
+    /* reconstitute this list from the stream */
+    private synchronized void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException 
+    {
+        /* read any fields I missed */
+	in.defaultReadObject();
+      
+        /* read in the size */
+        int size = in.readInt();
+
+        /* create the header */
+        header = new NormalListEntry(SleepUtils.getScalar("[:HEADER:]"), null, null);
+        header.setNext(header);
+        header.setPrevious(header);
+
+        /* populate the list */
+        for (int x = 0; x < size; x++)
+        {
+           add(in.readObject());
+        }
+    }
 }

Added: sleep/tests/output/feremove.sl
===================================================================
--- sleep/tests/output/feremove.sl	2008-05-30 16:45:09 UTC (rev 395)
+++ sleep/tests/output/feremove.sl	2008-05-30 17:15:02 UTC (rev 396)
@@ -0,0 +1,140 @@
+sublist(@a, 0, 1) = @('a')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @()
+sublist(@a, 0, 2) = @('a', 'b')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b')
+sublist(@a, 0, 2) = @('a', 'b')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c')
+sublist(@a, 0, 3) = @('a', 'b', 'c')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd')
+sublist(@a, 0, 4) = @('a', 'b', 'c', 'd')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 0:
+     @('b', 'c', 'd', 'e')
+     @('b', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'c', 'd', 'e')
+     @('a', 'c', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'd', 'e')
+     @('a', 'b', 'd', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'e')
+     @('a', 'b', 'c', 'e')
+sublist(@a, 0, 5) = @('a', 'b', 'c', 'd', 'e')
+   Foreach Remove 4:
+     @('a', 'b', 'c', 'd')
+     @('a', 'b', 'c', 'd')
+sublist(@a, 1, 2) = @('b')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @()
+sublist(@a, 1, 3) = @('b', 'c')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c')
+sublist(@a, 1, 3) = @('b', 'c')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd')
+sublist(@a, 1, 4) = @('b', 'c', 'd')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 0:
+     @('a', 'c', 'd', 'e')
+     @('c', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'd', 'e')
+     @('b', 'd', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'e')
+     @('b', 'c', 'e')
+sublist(@a, 1, 5) = @('b', 'c', 'd', 'e')
+   Foreach Remove 3:
+     @('a', 'b', 'c', 'd')
+     @('b', 'c', 'd')
+sublist(@a, 2, 3) = @('c')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @()
+sublist(@a, 2, 4) = @('c', 'd')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d')
+sublist(@a, 2, 4) = @('c', 'd')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 0:
+     @('a', 'b', 'd', 'e')
+     @('d', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'e')
+     @('c', 'e')
+sublist(@a, 2, 5) = @('c', 'd', 'e')
+   Foreach Remove 2:
+     @('a', 'b', 'c', 'd')
+     @('c', 'd')
+sublist(@a, 3, 4) = @('d')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'e')
+     @()
+sublist(@a, 3, 5) = @('d', 'e')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'e')
+     @('e')
+sublist(@a, 3, 5) = @('d', 'e')
+   Foreach Remove 1:
+     @('a', 'b', 'c', 'd')
+     @('d')
+sublist(@a, 4, 5) = @('e')
+   Foreach Remove 0:
+     @('a', 'b', 'c', 'd')
+     @()

Added: sleep/tests/output/sertest.sl
===================================================================
--- sleep/tests/output/sertest.sl	2008-05-30 16:45:09 UTC (rev 395)
+++ sleep/tests/output/sertest.sl	2008-05-30 17:15:02 UTC (rev 396)
@@ -0,0 +1,12 @@
+Prior to serialization:
+@('a', 'b', 'c', 'd', 'e')
+@('c', 'd')
+Post serialization
+@('a', 'b', 'c', 'd', 'e')
+@('c', 'd')
+The push!
+@('a', 'b', 'c', 'd', 'e')
+@('c', 'd', 'hello world!')
+And for the originals
+@('a', 'b', 'c', 'd', 'e')
+@('c', 'd')

Added: sleep/tests/sertest.sl
===================================================================
--- sleep/tests/sertest.sl	2008-05-30 16:45:09 UTC (rev 395)
+++ sleep/tests/sertest.sl	2008-05-30 17:15:02 UTC (rev 396)
@@ -0,0 +1,35 @@
+#
+# test serialization of the arrays.
+#
+
+ at a = @("a", "b", "c", "d", "e");
+ at b = sublist(@a, 2, 4);
+
+println("Prior to serialization:");
+println(@a);
+println(@b);
+
+$handle = allocate();
+writeObject($handle, @a);
+writeObject($handle, @b);
+closef($handle);
+
+#println("Buffer size: " . available($handle));
+
+ at aa = readObject($handle);
+ at bb = readObject($handle);
+
+println("Post serialization");
+println(@aa);
+println(@bb);
+
+push(@bb, "hello world!");
+
+println("The push!");
+
+println(@aa);
+println(@bb);
+
+println("And for the originals");
+println(@a);
+println(@b);

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 16:45:09 UTC (rev 395)
+++ sleep/whatsnew.txt	2008-05-30 17:15:02 UTC (rev 396)
@@ -23,6 +23,8 @@
   hasmatch from eating all of the memory.
 - bad index errors (IndexOutOfBoundsException) are now more
   descriptive in some cases.
+- sublists are now serializable--when serialized only the 
+  sublist itself is serialized.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 19:44:36 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 19:44:36 +0200
Subject: [Sleep-svn] r397 - in sleep: . src/sleep/bridges src/sleep/engine
	src/sleep/parser tests tests/output
Message-ID: <200805301744.m4UHiaYB016881@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 19:44:36 +0200 (Fri, 30 May 2008)
New Revision: 397

Added:
   sleep/tests/functiondesc.sl
   sleep/tests/functionerr.sl
   sleep/tests/output/functiondesc.sl
   sleep/tests/output/functionerr.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/Step.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/whatsnew.txt
Log:
function description stuff.



Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-30 17:44:36 UTC (rev 397)
@@ -517,6 +517,10 @@
           if (n.equals("&function"))
           {
              String temp = BridgeUtilities.getString(l, "");
+
+             if (temp.length() == 0 || temp.charAt(0) != '&')
+                throw new IllegalArgumentException(n + ": requested function name must begin with '&'");
+
              return SleepUtils.getScalar(si.getScriptEnvironment().getFunction(temp));
           }
           else if (n.equals("&setf"))

Modified: sleep/src/sleep/engine/Step.java
===================================================================
--- sleep/src/sleep/engine/Step.java	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/src/sleep/engine/Step.java	2008-05-30 17:44:36 UTC (rev 397)
@@ -30,7 +30,7 @@
 </pre> */
 
 
-public abstract class Step implements Serializable
+public class Step implements Serializable
 {
    /** the script line number that this step was generated from */
    protected int  line;
@@ -41,7 +41,7 @@
    /** returns a string representation of this atomic step */
    public String toString(String prefix)
    {
-      return prefix+toString();
+      return prefix+"[NOP]\n";
    }
  
    /** convience method for the code generator to set the line number. */

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-05-30 17:44:36 UTC (rev 397)
@@ -313,7 +313,15 @@
          return;
       }
 
-      parseBlock(allData);
+      if (allData.size() == 0)
+      {
+         Step temp = new Step();
+         add(temp, data);
+      }
+      else
+      {
+         parseBlock(allData);
+      }
    }
 
    public void parseBlock(LinkedList data)

Added: sleep/tests/functiondesc.sl
===================================================================
--- sleep/tests/functiondesc.sl	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/tests/functiondesc.sl	2008-05-30 17:44:36 UTC (rev 397)
@@ -0,0 +1,14 @@
+sub foo
+{
+   #...
+}
+
+println(&foo);
+println({});
+
+sub bar
+{
+   println("bar");
+}
+
+println(&bar);

Added: sleep/tests/functionerr.sl
===================================================================
--- sleep/tests/functionerr.sl	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/tests/functionerr.sl	2008-05-30 17:44:36 UTC (rev 397)
@@ -0,0 +1,10 @@
+sub foo
+{
+   println("hello world!");
+}
+
+$x = function('&foo');
+println($x);
+
+$x = function('foo');
+println($x);

Added: sleep/tests/output/functiondesc.sl
===================================================================
--- sleep/tests/output/functiondesc.sl	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/tests/output/functiondesc.sl	2008-05-30 17:44:36 UTC (rev 397)
@@ -0,0 +1,3 @@
+&closure[functiondesc.sl:2]#1
+&closure[functiondesc.sl:7]#2
+&closure[functiondesc.sl:11]#3

Added: sleep/tests/output/functionerr.sl
===================================================================
--- sleep/tests/output/functionerr.sl	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/tests/output/functionerr.sl	2008-05-30 17:44:36 UTC (rev 397)
@@ -0,0 +1,2 @@
+&closure[functionerr.sl:3]#1
+Warning: &function: requested function name must begin with '&' at functionerr.sl:9

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 17:15:02 UTC (rev 396)
+++ sleep/whatsnew.txt	2008-05-30 17:44:36 UTC (rev 397)
@@ -9,8 +9,7 @@
 - created a java.util.List compatible data structure to back
   Sleep arrays.  this data structure is similar to LinkedList
   except it creates sublists with more desired performance
-  characteristics--sublists of java.util.LinkedList traverse
-  the entire parent list for each requested element.
+  characteristics
 - added better error messages for ConcurrentModificationException's
   thrown by Java
 - foreach loops now break if a ConcurrentModificationException
@@ -24,7 +23,11 @@
 - bad index errors (IndexOutOfBoundsException) are now more
   descriptive in some cases.
 - sublists are now serializable--when serialized only the 
-  sublist itself is serialized.
+  sublist contents is serialized.
+- function("blah") will now throw an error if argument does not
+  begin with &
+- empty functions now retain proper line number information 
+  (compiler introduces a NOP into the body of an empty function)
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 20:30:26 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 20:30:26 +0200
Subject: [Sleep-svn] r398 - in sleep: . src/sleep/bridges src/sleep/engine
	src/sleep/parser src/sleep/runtime tests tests/output
Message-ID: <200805301830.m4UIUQ2Y020701@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 20:30:17 +0200 (Fri, 30 May 2008)
New Revision: 398

Added:
   sleep/tests/itererror.sl
   sleep/tests/output/itererror.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/callccfork.sl
   sleep/tests/output/fe_generatordb.sl
   sleep/tests/output/iternotrace.sl
   sleep/tests/output/proxy.sl
   sleep/tests/output/tracepo.sl
   sleep/whatsnew.txt
Log:
modified how function literals are handled (and iterator errors thrown)



Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2008-05-30 18:30:17 UTC (rev 398)
@@ -157,6 +157,7 @@
 
         function funcs = new function();
         temp.put("&function",  TaintUtils.Sensitive(funcs));
+        temp.put("function",   temp.get("&function")); /* special form used by the compiler */
         temp.put("&setf",      funcs);
         temp.put("&eval",      TaintUtils.Sensitive(new eval()));
         temp.put("&expr",      TaintUtils.Sensitive((Function)temp.get("&eval")));
@@ -514,7 +515,7 @@
     {
        public Scalar evaluate(String n, ScriptInstance si, Stack l)
        {
-          if (n.equals("&function"))
+          if (n.equals("&function") || n.equals("function"))
           {
              String temp = BridgeUtilities.getString(l, "");
 

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-30 18:30:17 UTC (rev 398)
@@ -152,7 +152,12 @@
          return temp.getArray().scalarIterator();
       }      
 
-      return SleepUtils.getFunctionFromScalar(temp, script).scalarIterator();
+      if (SleepUtils.isFunctionScalar(temp))
+      {
+         return SleepUtils.getFunctionFromScalar(temp).scalarIterator();
+      }
+
+      throw new IllegalArgumentException("expected iterator (@array or &closure)--received: " + SleepUtils.describe(temp));
    }
 
    /** grab a sleep array, if the stack is empty a scalar array with no elements will be returned. */

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/src/sleep/engine/Block.java	2008-05-30 18:30:17 UTC (rev 398)
@@ -252,7 +252,6 @@
               else if (ex instanceof NullPointerException)
               {
                  environment.getScriptInstance().fireWarning("null value error", temp.getLineNumber());
-                 ex.printStackTrace();
               }
               else if (ex instanceof ConcurrentModificationException)
               {

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/src/sleep/parser/CodeGenerator.java	2008-05-30 18:30:17 UTC (rev 398)
@@ -856,10 +856,15 @@
            }
            else
            {
-              // retrieve a function literal... 
+              // transform a function literal into call on &function('&literal') 
+              atom = factory.CreateFrame();
+              add(atom, tokens[0]);
 
-              atom = factory.Get(strings[0]);
+              atom = factory.SValue(SleepUtils.getScalar(strings[0]));
               add(atom, tokens[0]);
+
+              atom = factory.Call("function");
+              add(atom, tokens[0]);
            }
            break;
          case EXPR_WHILE:                                        // done

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-30 18:30:17 UTC (rev 398)
@@ -341,13 +341,23 @@
       return (value.objectValue() != null && value.objectValue() instanceof SleepClosure);
    }
 
-   /** extracts a callable Function from the passed in Scalar.  The passed in Scalar can be either a SleepClosure scalar or a string scalar specifying a function name */
+   /** extracts a callable Function from the passed in Scalar.  Returns null if value does not contain a function.  Calling isFunctionScalar before this method is highly recommended. */
+   public static SleepClosure getFunctionFromScalar(Scalar value)
+   {
+       if (value.objectValue() != null && value.objectValue() instanceof SleepClosure)
+           return (SleepClosure)value.objectValue();
+
+       return null;
+   }
+
+   /** extracts a callable Function from the passed in Scalar.  The passed in Scalar can be either a SleepClosure scalar or a string scalar specifying a function name.
+       This method exists for backwards compatability of old jIRCii scripts. */
    public static SleepClosure getFunctionFromScalar(Scalar value, ScriptInstance script)
    {
-     if (value.objectValue() != null && value.objectValue() instanceof SleepClosure)
-         return (SleepClosure)value.objectValue();
+      if (value.objectValue() != null && value.objectValue() instanceof SleepClosure)
+          return (SleepClosure)value.objectValue();
 
-     return (SleepClosure)script.getScriptEnvironment().getFunction(value.toString());
+      return (SleepClosure)script.getScriptEnvironment().getFunction(value.toString());
    }
 
    /** creates an IO handle scalar suitable for use with the sleep IO API.  The passed in

Added: sleep/tests/itererror.sl
===================================================================
--- sleep/tests/itererror.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/itererror.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -0,0 +1 @@
+map({ println("Hello goldfish"); }, "345");

Modified: sleep/tests/output/callccfork.sl
===================================================================
--- sleep/tests/output/callccfork.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/callccfork.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -1,10 +1,11 @@
 Trace: &global('$handle $value') at callccfork.sl:18
+Trace: function('&func') = &closure[callccfork.sl:9-15]#X at callccfork.sl:20
 Begin!
 Trace: &println('Begin!') at callccfork.sl:9
 Inside of callcc function
 Trace: &println('Inside of callcc function') at callccfork.sl:12
-Trace: [&closure[callccfork.sl:12-13]#3 CALLCC: &closure[callccfork.sl:9-15]#2] = 'pHEAR' at callccfork.sl:10
-Trace: &fork(&closure[callccfork.sl:9-15]#1) = sleep.bridges.io.IOObject at dec8b3 at callccfork.sl:20
-Trace: &wait(sleep.bridges.io.IOObject at dec8b3, 5000) = 'pHEAR' at callccfork.sl:21
+Trace: [&closure[callccfork.sl:12-13]#X CALLCC: &closure[callccfork.sl:9-15]#X] = 'pHEAR' at callccfork.sl:10
+Trace: &fork(&closure[callccfork.sl:9-15]#X) = sleep.bridges.io.IOObject@###### at callccfork.sl:20
+Trace: &wait(sleep.bridges.io.IOObject@######, 5000) = 'pHEAR' at callccfork.sl:21
 pHEAR
 Trace: &println('pHEAR') at callccfork.sl:22

Modified: sleep/tests/output/fe_generatordb.sl
===================================================================
--- sleep/tests/output/fe_generatordb.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/fe_generatordb.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -1,97 +1,98 @@
 Trace: &this('$x') at fe_generatordb.sl:6
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 0' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 0' at <internal>:-1
 0 => val: 0
 Trace: &println('0 => val: 0') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 1' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 1' at <internal>:-1
 1 => val: 1
 Trace: &println('1 => val: 1') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 2' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 2' at <internal>:-1
 2 => val: 2
 Trace: &println('2 => val: 2') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 3' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 3' at <internal>:-1
 3 => val: 3
 Trace: &println('3 => val: 3') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 4' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 4' at <internal>:-1
 4 => val: 4
 Trace: &println('4 => val: 4') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 5' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 5' at <internal>:-1
 5 => val: 5
 Trace: &println('5 => val: 5') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 6' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 6' at <internal>:-1
 6 => val: 6
 Trace: &println('6 => val: 6') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 7' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 7' at <internal>:-1
 7 => val: 7
 Trace: &println('7 => val: 7') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 8' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 8' at <internal>:-1
 8 => val: 8
 Trace: &println('8 => val: 8') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] = 'val: 9' at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] = 'val: 9' at <internal>:-1
 9 => val: 9
 Trace: &println('9 => val: 9') at fe_generatordb.sl:8
-Trace: [&closure[fe_generatordb.sl:6]#1 eval] at <internal>:-1
-Trace: &lambda(&closure[fe_generatordb.sl:13-19]#2, $start => 50, $stop => 60) = &closure[fe_generatordb.sl:13-19]#3 at fe_generatordb.sl:22
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 50 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:6]#X eval] at <internal>:-1
+Trace: function('&_range') = &closure[fe_generatordb.sl:13-19]#X at fe_generatordb.sl:22
+Trace: &lambda(&closure[fe_generatordb.sl:13-19]#X, $start => 50, $stop => 60) = &closure[fe_generatordb.sl:13-19]#X at fe_generatordb.sl:22
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 50 at <internal>:-1
 Testing out range stuff: 0 => 50
 Trace: &println('Testing out range stuff: 0 => 50') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 51 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 51 at <internal>:-1
 Testing out range stuff: 1 => 51
 Trace: &println('Testing out range stuff: 1 => 51') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 52 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 52 at <internal>:-1
 Testing out range stuff: 2 => 52
 Trace: &println('Testing out range stuff: 2 => 52') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 53 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 53 at <internal>:-1
 Testing out range stuff: 3 => 53
 Trace: &println('Testing out range stuff: 3 => 53') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 54 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 54 at <internal>:-1
 Testing out range stuff: 4 => 54
 Trace: &println('Testing out range stuff: 4 => 54') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 55 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 55 at <internal>:-1
 Testing out range stuff: 5 => 55
 Trace: &println('Testing out range stuff: 5 => 55') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 56 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 56 at <internal>:-1
 Testing out range stuff: 6 => 56
 Trace: &println('Testing out range stuff: 6 => 56') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 57 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 57 at <internal>:-1
 Testing out range stuff: 7 => 57
 Trace: &println('Testing out range stuff: 7 => 57') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 58 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 58 at <internal>:-1
 Testing out range stuff: 8 => 58
 Trace: &println('Testing out range stuff: 8 => 58') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] = 59 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] = 59 at <internal>:-1
 Testing out range stuff: 9 => 59
 Trace: &println('Testing out range stuff: 9 => 59') at fe_generatordb.sl:24
-Trace: [&closure[fe_generatordb.sl:13-19]#3 eval] at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:13-19]#X eval] at <internal>:-1
 Trace: &this('$start $stop') at fe_generatordb.sl:29
-Trace: &_range2(70, 80) = &closure[fe_generatordb.sl:29-39]#4 at fe_generatordb.sl:42
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 70 at <internal>:-1
+Trace: &_range2(70, 80) = &closure[fe_generatordb.sl:29-39]#X at fe_generatordb.sl:42
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 70 at <internal>:-1
 My third test: 0 => 70
 Trace: &println('My third test: 0 => 70') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 71 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 71 at <internal>:-1
 My third test: 1 => 71
 Trace: &println('My third test: 1 => 71') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 72 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 72 at <internal>:-1
 My third test: 2 => 72
 Trace: &println('My third test: 2 => 72') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 73 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 73 at <internal>:-1
 My third test: 3 => 73
 Trace: &println('My third test: 3 => 73') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 74 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 74 at <internal>:-1
 My third test: 4 => 74
 Trace: &println('My third test: 4 => 74') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 75 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 75 at <internal>:-1
 My third test: 5 => 75
 Trace: &println('My third test: 5 => 75') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 76 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 76 at <internal>:-1
 My third test: 6 => 76
 Trace: &println('My third test: 6 => 76') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 77 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 77 at <internal>:-1
 My third test: 7 => 77
 Trace: &println('My third test: 7 => 77') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 78 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 78 at <internal>:-1
 My third test: 8 => 78
 Trace: &println('My third test: 8 => 78') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] = 79 at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] = 79 at <internal>:-1
 My third test: 9 => 79
 Trace: &println('My third test: 9 => 79') at fe_generatordb.sl:44
-Trace: [&closure[fe_generatordb.sl:29-39]#4 eval] at <internal>:-1
+Trace: [&closure[fe_generatordb.sl:29-39]#X eval] at <internal>:-1

Added: sleep/tests/output/itererror.sl
===================================================================
--- sleep/tests/output/itererror.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/itererror.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -0,0 +1 @@
+Warning: expected iterator (@array or &closure)--received: '345' at itererror.sl:1

Modified: sleep/tests/output/iternotrace.sl
===================================================================
--- sleep/tests/output/iternotrace.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/iternotrace.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -1,41 +1,43 @@
+Trace: function('&generator') = &closure[iternotrace.sl:5-9]#X at iternotrace.sl:15
 Trace: &local('$x') at iternotrace.sl:5
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 0 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 0 at <internal>:-1
 Received 0
 Trace: &println('Received 0') at iternotrace.sl:17
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 2 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 2 at <internal>:-1
 Received 2
 Trace: &println('Received 2') at iternotrace.sl:17
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 4 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 4 at <internal>:-1
 Received 4
 Trace: &println('Received 4') at iternotrace.sl:17
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 6 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 6 at <internal>:-1
 Received 6
 Trace: &println('Received 6') at iternotrace.sl:17
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 8 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 8 at <internal>:-1
 Received 8
 Trace: &println('Received 8') at iternotrace.sl:17
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] at <internal>:-1
+Trace: function('&generator') = &closure[iternotrace.sl:5-9]#X at iternotrace.sl:20
 Trace: &local('$x') at iternotrace.sl:5
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 0 at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 0 at <internal>:-1
 More fp: 0
 Trace: &println('More fp: 0') at iternotrace.sl:20
-Trace: [&closure[iternotrace.sl:20]#3 eval: 0] at <internal>:-1
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 2 at <internal>:-1
+Trace: [&closure[iternotrace.sl:20]#X eval: 0] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 2 at <internal>:-1
 More fp: 2
 Trace: &println('More fp: 2') at iternotrace.sl:20
-Trace: [&closure[iternotrace.sl:20]#3 eval: 2] at <internal>:-1
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 4 at <internal>:-1
+Trace: [&closure[iternotrace.sl:20]#X eval: 2] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 4 at <internal>:-1
 More fp: 4
 Trace: &println('More fp: 4') at iternotrace.sl:20
-Trace: [&closure[iternotrace.sl:20]#3 eval: 4] at <internal>:-1
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 6 at <internal>:-1
+Trace: [&closure[iternotrace.sl:20]#X eval: 4] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 6 at <internal>:-1
 More fp: 6
 Trace: &println('More fp: 6') at iternotrace.sl:20
-Trace: [&closure[iternotrace.sl:20]#3 eval: 6] at <internal>:-1
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] = 8 at <internal>:-1
+Trace: [&closure[iternotrace.sl:20]#X eval: 6] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] = 8 at <internal>:-1
 More fp: 8
 Trace: &println('More fp: 8') at iternotrace.sl:20
-Trace: [&closure[iternotrace.sl:20]#3 eval: 8] at <internal>:-1
-Trace: [&closure[iternotrace.sl:5-9]#1 eval] at <internal>:-1
-Trace: &map(&closure[iternotrace.sl:20]#3, &closure[iternotrace.sl:5-9]#1) = @($null, $null, $null, $null, $null) at iternotrace.sl:20
+Trace: [&closure[iternotrace.sl:20]#X eval: 8] at <internal>:-1
+Trace: [&closure[iternotrace.sl:5-9]#X eval] at <internal>:-1
+Trace: &map(&closure[iternotrace.sl:20]#X, &closure[iternotrace.sl:5-9]#X) = @($null, $null, $null, $null, $null) at iternotrace.sl:20
 Trace: &foo() at iternotrace.sl:23

Modified: sleep/tests/output/proxy.sl
===================================================================
--- sleep/tests/output/proxy.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/proxy.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -1,76 +1,77 @@
 Trace: &local('$enumeration') at proxy.sl:25
-Trace: &lambda(&closure[proxy.sl:7-15]#1) = &closure[proxy.sl:7-15]#3 at proxy.sl:26
-Trace: &foo() = &closure[proxy.sl:7-15]#3 at proxy.sl:45
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: function('&object') = &closure[proxy.sl:7-15]#X at proxy.sl:26
+Trace: &lambda(&closure[proxy.sl:7-15]#X) = &closure[proxy.sl:7-15]#X at proxy.sl:26
+Trace: &foo() = &closure[proxy.sl:7-15]#X at proxy.sl:45
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd', 'e')) = 5 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd', 'e')) = 'e' at proxy.sl:32
-Trace: [&closure[proxy.sl:30-36]#5] = 'e' at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'e' at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'e' at <Java>:-1
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[proxy.sl:30-36]#X] = 'e' at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 'e' at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] = 'e' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd')) = 4 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd')) = 'd' at proxy.sl:32
-Trace: [&closure[proxy.sl:30-36]#5] = 'd' at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'd' at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'd' at <Java>:-1
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[proxy.sl:30-36]#X] = 'd' at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 'd' at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] = 'd' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c')) = 3 at proxy.sl:30
 Trace: &pop(@('a', 'b', 'c')) = 'c' at proxy.sl:32
-Trace: [&closure[proxy.sl:30-36]#5] = 'c' at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'c' at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'c' at <Java>:-1
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[proxy.sl:30-36]#X] = 'c' at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 'c' at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] = 'c' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b')) = 2 at proxy.sl:30
 Trace: &pop(@('a', 'b')) = 'b' at proxy.sl:32
-Trace: [&closure[proxy.sl:30-36]#5] = 'b' at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'b' at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'b' at <Java>:-1
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[proxy.sl:30-36]#X] = 'b' at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 'b' at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] = 'b' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a')) = 1 at proxy.sl:30
 Trace: &pop(@('a')) = 'a' at proxy.sl:32
-Trace: [&closure[proxy.sl:30-36]#5] = 'a' at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) = 'a' at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] = 'a' at <Java>:-1
-Trace: [&closure[proxy.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:28]#4, @(), $this => &closure[proxy.sl:7-15]#3) = 1 at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[proxy.sl:30-36]#X] = 'a' at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 'a' at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] = 'a' at <Java>:-1
+Trace: [&closure[proxy.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:28]#X, @(), $this => &closure[proxy.sl:7-15]#X) = 1 at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@()) = 0 at proxy.sl:30
 Trace: [new java.util.NoSuchElementException: 'overextending my bounds dude :('] = java.util.NoSuchElementException: overextending my bounds dude :( at proxy.sl:36
-Trace: [&closure[proxy.sl:30-36]#5] - FAILED! at <internal>:-1
-Trace: &invoke(&closure[proxy.sl:30-36]#5, @(), $this => &closure[proxy.sl:7-15]#3) - FAILED! at proxy.sl:11
-Trace: [&closure[proxy.sl:7-15]#3 nextElement] - FAILED! at <Java>:-1
-Trace: [java.util.Collections list: &closure[proxy.sl:7-15]#3] - FAILED! at proxy.sl:45
+Trace: [&closure[proxy.sl:30-36]#X] - FAILED! at <internal>:-1
+Trace: &invoke(&closure[proxy.sl:30-36]#X, @(), $this => &closure[proxy.sl:7-15]#X) - FAILED! at proxy.sl:11
+Trace: [&closure[proxy.sl:7-15]#X nextElement] - FAILED! at <Java>:-1
+Trace: [java.util.Collections list: &closure[proxy.sl:7-15]#X] - FAILED! at proxy.sl:45
 Trace: [java.util.NoSuchElementException: overextending my bounds dude :( getClass] = class java.util.NoSuchElementException at proxy.sl:49
 Trace: [java.util.NoSuchElementException: overextending my bounds dude :( getMessage] = 'overextending my bounds dude :(' at proxy.sl:49
 Error: overextending my bounds dude :( from: class java.util.NoSuchElementException
 Trace: &println('Error: overextending my bounds dude :( from: class java.util.NoSuchElementException') at proxy.sl:49
-Trace: &getStackTrace() = @(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#5,    proxy.sl:36 <origin of exception>) at proxy.sl:50
+Trace: &getStackTrace() = @(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#X as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#X,    proxy.sl:36 <origin of exception>) at proxy.sl:50
    proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration)
-   <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement()
+   <Java>:-1 &closure[proxy.sl:7-15]#X as public abstract java.lang.Object java.util.Enumeration.nextElement()
    proxy.sl:11 &invoke()
-   <internal>:-1 &closure[proxy.sl:30-36]#5
+   <internal>:-1 &closure[proxy.sl:30-36]#X
    proxy.sl:36 <origin of exception>
-Trace: &printAll(@(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#3 as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#5,    proxy.sl:36 <origin of exception>)) at proxy.sl:50
+Trace: &printAll(@(   proxy.sl:45 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:7-15]#X as public abstract java.lang.Object java.util.Enumeration.nextElement(),    proxy.sl:11 &invoke(),    <internal>:-1 &closure[proxy.sl:30-36]#X,    proxy.sl:36 <origin of exception>)) at proxy.sl:50
 Trying again... what will java do?
 Trace: &println('Trying again... what will java do?') at proxy.sl:55
-Trace: [&closure[proxy.sl:57]#6 hasMoreElements] - FAILED! at <Java>:-1
-Trace: [java.util.Collections list: &closure[proxy.sl:57]#6] - FAILED! at proxy.sl:56
+Trace: [&closure[proxy.sl:57]#X hasMoreElements] - FAILED! at <Java>:-1
+Trace: [java.util.Collections list: &closure[proxy.sl:57]#X] - FAILED! at proxy.sl:56
 Trace: [java.lang.RuntimeException: haha... testing bish!@#$ getClass] = class java.lang.RuntimeException at proxy.sl:62
 Trace: [java.lang.RuntimeException: haha... testing bish!@#$ getMessage] = 'haha... testing bish!@#$' at proxy.sl:62
 Error: haha... testing bish!@#$ from: class java.lang.RuntimeException
 Trace: &println('Error: haha... testing bish!@#$ from: class java.lang.RuntimeException') at proxy.sl:62
-Trace: &getStackTrace() = @(   proxy.sl:56 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:57]#6 as public abstract boolean java.util.Enumeration.hasMoreElements(),    proxy.sl:57 <origin of exception>) at proxy.sl:63
+Trace: &getStackTrace() = @(   proxy.sl:56 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:57]#X as public abstract boolean java.util.Enumeration.hasMoreElements(),    proxy.sl:57 <origin of exception>) at proxy.sl:63
    proxy.sl:56 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration)
-   <Java>:-1 &closure[proxy.sl:57]#6 as public abstract boolean java.util.Enumeration.hasMoreElements()
+   <Java>:-1 &closure[proxy.sl:57]#X as public abstract boolean java.util.Enumeration.hasMoreElements()
    proxy.sl:57 <origin of exception>
-Trace: &printAll(@(   proxy.sl:56 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:57]#6 as public abstract boolean java.util.Enumeration.hasMoreElements(),    proxy.sl:57 <origin of exception>)) at proxy.sl:63
+Trace: &printAll(@(   proxy.sl:56 public static java.util.ArrayList java.util.Collections.list(java.util.Enumeration),    <Java>:-1 &closure[proxy.sl:57]#X as public abstract boolean java.util.Enumeration.hasMoreElements(),    proxy.sl:57 <origin of exception>)) at proxy.sl:63

Modified: sleep/tests/output/tracepo.sl
===================================================================
--- sleep/tests/output/tracepo.sl	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/tests/output/tracepo.sl	2008-05-30 18:30:17 UTC (rev 398)
@@ -1,62 +1,63 @@
 Trace: &local('$enumeration') at tracepo.sl:25
-Trace: &lambda(&closure[tracepo.sl:7-15]#1) = &closure[tracepo.sl:7-15]#3 at tracepo.sl:26
-Trace: &foo() = &closure[tracepo.sl:7-15]#3 at tracepo.sl:45
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: function('&object') = &closure[tracepo.sl:7-15]#X at tracepo.sl:26
+Trace: &lambda(&closure[tracepo.sl:7-15]#X) = &closure[tracepo.sl:7-15]#X at tracepo.sl:26
+Trace: &foo() = &closure[tracepo.sl:7-15]#X at tracepo.sl:45
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd', 'e')) = 5 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd', 'e')) = 'e' at tracepo.sl:32
-Trace: [&closure[tracepo.sl:30-36]#5] = 'e' at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'e' at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'e' at <Java>:-1
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[tracepo.sl:30-36]#X] = 'e' at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 'e' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] = 'e' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c', 'd')) = 4 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c', 'd')) = 'd' at tracepo.sl:32
-Trace: [&closure[tracepo.sl:30-36]#5] = 'd' at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'd' at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'd' at <Java>:-1
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[tracepo.sl:30-36]#X] = 'd' at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 'd' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] = 'd' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b', 'c')) = 3 at tracepo.sl:30
 Trace: &pop(@('a', 'b', 'c')) = 'c' at tracepo.sl:32
-Trace: [&closure[tracepo.sl:30-36]#5] = 'c' at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'c' at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'c' at <Java>:-1
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[tracepo.sl:30-36]#X] = 'c' at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 'c' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] = 'c' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a', 'b')) = 2 at tracepo.sl:30
 Trace: &pop(@('a', 'b')) = 'b' at tracepo.sl:32
-Trace: [&closure[tracepo.sl:30-36]#5] = 'b' at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'b' at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'b' at <Java>:-1
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[tracepo.sl:30-36]#X] = 'b' at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 'b' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] = 'b' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@('a')) = 1 at tracepo.sl:30
 Trace: &pop(@('a')) = 'a' at tracepo.sl:32
-Trace: [&closure[tracepo.sl:30-36]#5] = 'a' at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'a' at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'a' at <Java>:-1
-Trace: [&closure[tracepo.sl:28]#4] = 1 at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at <Java>:-1
+Trace: [&closure[tracepo.sl:30-36]#X] = 'a' at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 'a' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] = 'a' at <Java>:-1
+Trace: [&closure[tracepo.sl:28]#X] = 1 at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:28]#X, @(), $this => &closure[tracepo.sl:7-15]#X) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X hasMoreElements] = 1 at <Java>:-1
 Trace: &size(@()) = 0 at tracepo.sl:30
 Trace: [new java.util.NoSuchElementException: 'overextending my bounds dude :('] = java.util.NoSuchElementException: overextending my bounds dude :( at tracepo.sl:36
-Trace: [&closure[tracepo.sl:30-36]#5] - FAILED! at <internal>:-1
-Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) - FAILED! at tracepo.sl:11
-Trace: [&closure[tracepo.sl:7-15]#3 nextElement] - FAILED! at <Java>:-1
-Trace: [java.util.Collections list: &closure[tracepo.sl:7-15]#3] - FAILED! at tracepo.sl:45
+Trace: [&closure[tracepo.sl:30-36]#X] - FAILED! at <internal>:-1
+Trace: &invoke(&closure[tracepo.sl:30-36]#X, @(), $this => &closure[tracepo.sl:7-15]#X) - FAILED! at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#X nextElement] - FAILED! at <Java>:-1
+Trace: [java.util.Collections list: &closure[tracepo.sl:7-15]#X] - FAILED! at tracepo.sl:45
 Warning: checkError(): java.util.NoSuchElementException: overextending my bounds dude :( at tracepo.sl:45
 
 Trace: &println($null) at tracepo.sl:45
 Trying again... what will java do?
 Trace: &println('Trying again... what will java do?') at tracepo.sl:55
-Trace: [&closure[tracepo.sl:57]#6 hasMoreElements] - FAILED! at <Java>:-1
-Trace: [java.util.Collections list: &closure[tracepo.sl:57]#6] - FAILED! at tracepo.sl:56
+Trace: [&closure[tracepo.sl:57]#X hasMoreElements] - FAILED! at <Java>:-1
+Trace: [java.util.Collections list: &closure[tracepo.sl:57]#X] - FAILED! at tracepo.sl:56
 Warning: checkError(): java.lang.RuntimeException: haha... testing bish!@#$ at tracepo.sl:56
 
 Trace: &println($null) at tracepo.sl:56

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 17:44:36 UTC (rev 397)
+++ sleep/whatsnew.txt	2008-05-30 18:30:17 UTC (rev 398)
@@ -28,6 +28,13 @@
   begin with &
 - empty functions now retain proper line number information 
   (compiler introduces a NOP into the body of an empty function)
+- reworked how Sleep handles &function literals--the compiler
+  transforms these into a call against function('&function')--
+  this has the benefit of providing more debug info in a trace
+  and simplifying bridges that expect to receive a function as
+  a parameter.
+- BridgeUtilities.getIterator() throws an exception if the 
+  value on the stack is not an iterator.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 20:37:32 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 20:37:32 +0200
Subject: [Sleep-svn] r399 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200805301837.m4UIbWLm021109@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 20:37:32 +0200 (Fri, 30 May 2008)
New Revision: 399

Added:
   sleep/tests/mapasc.sl
   sleep/tests/output/mapasc.sl
Modified:
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/whatsnew.txt
Log:
more error messages.


Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-30 18:30:17 UTC (rev 398)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2008-05-30 18:37:32 UTC (rev 399)
@@ -217,7 +217,14 @@
    public static SleepClosure getFunction(Stack arguments, ScriptInstance script)
    {
       Scalar temp = getScalar(arguments);
-      return SleepUtils.getFunctionFromScalar(temp, script);
+      SleepClosure func = SleepUtils.getFunctionFromScalar(temp, script);
+
+      if (func == null)
+      {
+         throw new IllegalArgumentException("expected &closure--received: " + SleepUtils.describe(temp));
+      }
+
+      return func;
    }
 
    /** grab a scalar, if the stack is empty the empty/null scalar will be returned. */

Added: sleep/tests/mapasc.sl
===================================================================
--- sleep/tests/mapasc.sl	2008-05-30 18:30:17 UTC (rev 398)
+++ sleep/tests/mapasc.sl	2008-05-30 18:37:32 UTC (rev 399)
@@ -0,0 +1,2 @@
+println(map(&asc, split("", "abcdefg")));
+

Added: sleep/tests/output/mapasc.sl
===================================================================
--- sleep/tests/output/mapasc.sl	2008-05-30 18:30:17 UTC (rev 398)
+++ sleep/tests/output/mapasc.sl	2008-05-30 18:37:32 UTC (rev 399)
@@ -0,0 +1 @@
+Warning: expected &closure--received: sleep.bridges.BasicStrings$func_asc at e2670b at mapasc.sl:1

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 18:30:17 UTC (rev 398)
+++ sleep/whatsnew.txt	2008-05-30 18:37:32 UTC (rev 399)
@@ -35,6 +35,8 @@
   a parameter.
 - BridgeUtilities.getIterator() throws an exception if the 
   value on the stack is not an iterator.
+- BridgeUtilities.getFunction() throws an exception if the  
+  value on the stack is not a closure.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 20:54:04 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 20:54:04 +0200
Subject: [Sleep-svn] r400 - in sleep: . src/sleep/bridges
Message-ID: <200805301854.m4UIs4GK022084@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 20:54:03 +0200 (Fri, 30 May 2008)
New Revision: 400

Modified:
   sleep/runtests.sl
   sleep/src/sleep/bridges/BasicIO.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/runtests.sl
===================================================================
--- sleep/runtests.sl	2008-05-30 18:37:32 UTC (rev 399)
+++ sleep/runtests.sl	2008-05-30 18:54:03 UTC (rev 400)
@@ -97,6 +97,7 @@
    $1 = replace($1, '/Users/raffi/sleepdev/sleep', '==CWD==');
    $1 = replace($1, getFileParent(cwd()), '==CWD==');
    $1 = replace($1, '([\.\[][a-zA-Z_0-9;]+@)[0-9a-f]{4,6}', '$1######');
+   $1 = replace($1, '(asc@)[0-9a-f]{4,6}', '$1######');
    $1 = replace($1, '\$Proxy\d+?', '\$Proxy#');
    return $1;
 }

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2008-05-30 18:37:32 UTC (rev 399)
+++ sleep/src/sleep/bridges/BasicIO.java	2008-05-30 18:54:03 UTC (rev 400)
@@ -142,8 +142,9 @@
           try
           { 
              Process proc  = Runtime.getRuntime().exec(BridgeUtilities.getString(l, ""), null, i.cwd());
-             BufferedReader reader    = new BufferedReader(new InputStreamReader(proc.getInputStream()));
 
+             IOObject reader = SleepUtils.getIOHandle(proc.getInputStream(), null);
+
              String text = null;
              while ((text = reader.readLine()) != null)
              {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 18:37:32 UTC (rev 399)
+++ sleep/whatsnew.txt	2008-05-30 18:54:03 UTC (rev 400)
@@ -37,6 +37,8 @@
   value on the stack is not an iterator.
 - BridgeUtilities.getFunction() throws an exception if the  
   value on the stack is not a closure.
+- Backtick expressions now use an IOObject to read in process
+  output. 
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 22:06:37 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 22:06:37 +0200
Subject: [Sleep-svn] r401 - in sleep/jsr223: . src/org/dashnine/sleep
Message-ID: <200805302006.m4UK6bO5029029@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 22:06:37 +0200 (Fri, 30 May 2008)
New Revision: 401

Modified:
   sleep/jsr223/readme-jsr223.txt
   sleep/jsr223/sleep-engine.jar
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
Log:
improved jsr223 support


Modified: sleep/jsr223/readme-jsr223.txt
===================================================================
--- sleep/jsr223/readme-jsr223.txt	2008-05-30 18:54:03 UTC (rev 400)
+++ sleep/jsr223/readme-jsr223.txt	2008-05-30 20:06:37 UTC (rev 401)
@@ -17,6 +17,8 @@
 
 [raffi at beardsley ~/sleep] jrunscript -cp sleep.jar -l sleep -f file.sl
 
+  @ARGV and $__SCRIPT__ are available for scripts run this way. 
+
 To evaluate Sleep code within Java:
 
   **** Make sure sleep.jar is in the classpath ****
@@ -24,13 +26,20 @@
   ScriptEngineManager manager = new ScriptEngineManager();
   ScriptEngine sleepEngine = manager.getEngineByName("sleep");
 
+  Object value = sleepEngine.eval("return 'hello world';");
+
   @see http://java.sun.com/javase/6/docs/api/javax/script/ScriptEngine.html
   
 Some notes about the integration:
 
-- The GLOBAL_SCOPE Bindings of the ScriptContext are treated as Sleep globals.  The Binding values
-  are dumped into an object scalar with no conversion.
+- The GLOBAL_SCOPE Bindings of the ScriptContext are treated as Sleep globals.  The ENGINE_SCOPE 
+  Bindings of the ScriptContext are treated as script locals.  
 
+  The binding keys are all prefixed with a $ sigil.  i.e the key javax.script.engine is available
+  as $javax.script.engine.
+
+  Sleep will marshall the bound values into Sleep scalars. 
+
 - The getErrorWriter(), getReader(), and getWriter() values of ScriptContext are virtually ignored.
   1) Sleep doesn't speak Reader/Writer language and 2) they seem to act as blackholes when 
   scripts are executed with JRunScript.  

Modified: sleep/jsr223/sleep-engine.jar
===================================================================
(Binary files differ)

Modified: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-30 18:54:03 UTC (rev 400)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-30 20:06:37 UTC (rev 401)
@@ -53,47 +53,6 @@
     private Hashtable       sharedEnvironment;
     private ScriptVariables variables;
 
-    private static class BindingVariables extends sleep.bridges.DefaultVariable
-    {
-        protected Bindings vars;
-
-        public BindingVariables(Bindings b)
-        {
-           vars = b;
-        }        
-
-        public Scalar putScalar(String key, Scalar value)
-        {
-           if (vars != null && vars.containsKey(key.substring(1)))
-           {
-              vars.put(key.substring(1), value.objectValue());
-           }
-
-           return super.putScalar(key, value);
-        }
-
-        public Scalar getScalar(String key)
-        {
-           if (vars != null && vars.containsKey(key.substring(1)))
-           {
-              return SleepUtils.getScalar(vars.get(key.substring(1)));
-           }
-
-           return super.getScalar(key);
-        }
-
-        public boolean scalarExists(String key)
-        {
-           if (vars != null && vars.containsKey(key.substring(1)))
-           {
-              return true;
-           }
-
-           return super.scalarExists(key);
-        }
-    }
-
-    // ..
     public SleepScriptEngine()
     {
         loader = new ScriptLoader();
@@ -116,7 +75,44 @@
 
     private Object evalScript(ScriptInstance script, ScriptContext context)
     {
-        return script.runScript().objectValue();
+        /* install global bindings */
+        Bindings global = context.getBindings(ScriptContext.GLOBAL_SCOPE);
+
+        if (global != null)
+        {
+           Iterator i = global.entrySet().iterator();
+           while (i.hasNext())
+           {
+              Map.Entry value = (Map.Entry)i.next();
+              script.getScriptVariables().putScalar("$" + value.getKey().toString(), ObjectUtilities.BuildScalar(true, value.getValue()));
+           }
+        }
+
+        /* install local bindings */
+        Bindings local = context.getBindings(ScriptContext.ENGINE_SCOPE);
+        Map locals = new HashMap();
+
+        if (local != null)
+        {
+           Iterator i = local.entrySet().iterator();
+           while (i.hasNext())
+           {
+              Map.Entry value = (Map.Entry)i.next();
+              locals.put("$" + value.getKey().toString(), ObjectUtilities.BuildScalar(true, value.getValue())  );
+           }
+        }
+
+        if (locals.get("$" + ScriptEngine.FILENAME) != null)
+        {
+           script.getScriptVariables().putScalar("$__SCRIPT__", (Scalar)locals.get("$" + ScriptEngine.FILENAME));
+        }        
+
+        if (locals.get("$" + ScriptEngine.ARGV) != null)
+        {
+           script.getScriptVariables().putScalar("@ARGV", (Scalar)locals.get("$" + ScriptEngine.ARGV));
+        }
+
+        return SleepUtils.runCode(script.getRunnableScript(), "eval", script, SleepUtils.getArgumentStack(locals)).objectValue();
     }
 
     private static class WarningWatcher implements RuntimeWarningWatcher
@@ -139,14 +135,6 @@
         try
         {
            ScriptInstance script = loader.loadScript("eval", text, sharedEnvironment);
-
-           if (variables == null)
-           {
-              variables = new ScriptVariables(new BindingVariables(context.getBindings(ScriptContext.GLOBAL_SCOPE)));
-           }
-
-           script.setScriptVariables(variables);
-
            script.addWarningWatcher(new WarningWatcher(context));
            return script;
         }

Modified: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-30 18:54:03 UTC (rev 400)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngineFactory.java	2008-05-30 20:06:37 UTC (rev 401)
@@ -153,13 +153,13 @@
     private static List<String> extensions;
     private static List<String> mimeTypes;
     static {
-        names = new ArrayList<String>(2);
+        names = new ArrayList<String>(3);
         names.add("sleep");
         names.add("Sleep");
+        names.add("sl");
         names = Collections.unmodifiableList(names);
-        extensions = new ArrayList<String>(2);
+        extensions = new ArrayList<String>(1);
         extensions.add("sl");
-        extensions.add(".sl");
         extensions = Collections.unmodifiableList(extensions);
         mimeTypes = new ArrayList<String>(0);
         mimeTypes = Collections.unmodifiableList(mimeTypes);



From rsmudge at mail.berlios.de  Fri May 30 22:11:18 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 22:11:18 +0200
Subject: [Sleep-svn] r402 - sleep
Message-ID: <200805302011.m4UKBIc0029591@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 22:11:18 +0200 (Fri, 30 May 2008)
New Revision: 402

Modified:
   sleep/whatsnew.txt
Log:
updated whatsnew file


Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 20:06:37 UTC (rev 401)
+++ sleep/whatsnew.txt	2008-05-30 20:11:18 UTC (rev 402)
@@ -39,6 +39,11 @@
   value on the stack is not a closure.
 - Backtick expressions now use an IOObject to read in process
   output. 
+- improved JSR223 support:
+  -- ENGINE_SCOPE bindings are now supported and marshalled in
+     as local variables
+  -- $__SCRIPT__ and @ARGV are now available to Sleep scripts
+     executed with jrunscript.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 22:39:35 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 22:39:35 +0200
Subject: [Sleep-svn] r403 - in sleep: src/sleep/bridges tests tests/output
Message-ID: <200805302039.m4UKdZPj031488@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 22:39:35 +0200 (Fri, 30 May 2008)
New Revision: 403

Added:
   sleep/tests/inlinelocalcallcc.sl
   sleep/tests/output/inlinelocalcallcc.sl
Modified:
   sleep/src/sleep/bridges/RegexBridge.java
Log:
..


Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2008-05-30 20:11:18 UTC (rev 402)
+++ sleep/src/sleep/bridges/RegexBridge.java	2008-05-30 20:39:35 UTC (rev 403)
@@ -130,7 +130,7 @@
 
     private static String key(String text, Pattern p)
     {
-       StringBuffer buffer = new StringBuffer();
+       StringBuffer buffer = new StringBuffer(text.length() + p.pattern().length() + 1);
        buffer.append(text);
        buffer.append(p.pattern());
 

Added: sleep/tests/inlinelocalcallcc.sl
===================================================================
--- sleep/tests/inlinelocalcallcc.sl	2008-05-30 20:11:18 UTC (rev 402)
+++ sleep/tests/inlinelocalcallcc.sl	2008-05-30 20:39:35 UTC (rev 403)
@@ -0,0 +1,25 @@
+# test or set in stone how Sleep handles
+# restoration of local variables from a callcc
+# within an inline function... dun dun dun.
+
+inline foo
+{
+   println("Welcome to foo: " . @_);
+
+   callcc
+   {
+      println("This is within callcc: $1 and " . @_);
+      [$1: "c", "d"];
+   };
+
+   println("What fun fruit rollups will callcc roll out with next? " . @_);
+}
+
+sub bar
+{
+   println("In the bar: " . @_);
+   foo("a", "b");
+   println("Out of the bar: " . @_);
+}
+
+bar("toplevel", "argument");

Added: sleep/tests/output/inlinelocalcallcc.sl
===================================================================
--- sleep/tests/output/inlinelocalcallcc.sl	2008-05-30 20:11:18 UTC (rev 402)
+++ sleep/tests/output/inlinelocalcallcc.sl	2008-05-30 20:39:35 UTC (rev 403)
@@ -0,0 +1,5 @@
+In the bar: @('toplevel', 'argument')
+Welcome to foo: @('a', 'b')
+This is within callcc: &closure[inlinelocalcallcc.sl:20-22]#1 and @(&closure[inlinelocalcallcc.sl:20-22]#1)
+What fun fruit rollups will callcc roll out with next? @('c', 'd')
+Out of the bar: @('c', 'd')



From rsmudge at mail.berlios.de  Fri May 30 22:41:11 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 22:41:11 +0200
Subject: [Sleep-svn] r404 - in sleep/tests: . output
Message-ID: <200805302041.m4UKfB0G031718@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 22:41:11 +0200 (Fri, 30 May 2008)
New Revision: 404

Modified:
   sleep/tests/inlinelocalcallcc.sl
   sleep/tests/output/inlinelocalcallcc.sl
Log:
one more change to go and we have a release...  yay.


Modified: sleep/tests/inlinelocalcallcc.sl
===================================================================
--- sleep/tests/inlinelocalcallcc.sl	2008-05-30 20:39:35 UTC (rev 403)
+++ sleep/tests/inlinelocalcallcc.sl	2008-05-30 20:41:11 UTC (rev 404)
@@ -12,14 +12,14 @@
       [$1: "c", "d"];
    };
 
-   println("What fun fruit rollups will callcc roll out with next? " . @_);
+   println("What fun fruit rollups will callcc roll out with next? " . @_ . " $1 and $2");
 }
 
 sub bar
 {
    println("In the bar: " . @_);
    foo("a", "b");
-   println("Out of the bar: " . @_);
+   println("Out of the bar: " . @_ . " $1 and $2");
 }
 
 bar("toplevel", "argument");

Modified: sleep/tests/output/inlinelocalcallcc.sl
===================================================================
--- sleep/tests/output/inlinelocalcallcc.sl	2008-05-30 20:39:35 UTC (rev 403)
+++ sleep/tests/output/inlinelocalcallcc.sl	2008-05-30 20:41:11 UTC (rev 404)
@@ -1,5 +1,5 @@
 In the bar: @('toplevel', 'argument')
 Welcome to foo: @('a', 'b')
 This is within callcc: &closure[inlinelocalcallcc.sl:20-22]#1 and @(&closure[inlinelocalcallcc.sl:20-22]#1)
-What fun fruit rollups will callcc roll out with next? @('c', 'd')
-Out of the bar: @('c', 'd')
+What fun fruit rollups will callcc roll out with next? @('c', 'd') c and d
+Out of the bar: @('c', 'd') c and d



From rsmudge at mail.berlios.de  Fri May 30 23:22:22 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 23:22:22 +0200
Subject: [Sleep-svn] r405 - in sleep: . src/sleep/parser src/sleep/runtime
	tests tests/output
Message-ID: <200805302122.m4ULMMh5002965@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 23:22:21 +0200 (Fri, 30 May 2008)
New Revision: 405

Added:
   sleep/tests/makebadscript.sl
   sleep/tests/output/makebadscript.sl
Modified:
   sleep/build.xml
   sleep/readme.txt
   sleep/src/sleep/parser/LexicalAnalyzer.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
blah...


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/build.xml	2008-05-30 21:22:21 UTC (rev 405)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/readme.txt	2008-05-30 21:22:21 UTC (rev 405)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 26 - README   
+Sleep - 2.1 beta 27 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is

Modified: sleep/src/sleep/parser/LexicalAnalyzer.java
===================================================================
--- sleep/src/sleep/parser/LexicalAnalyzer.java	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/src/sleep/parser/LexicalAnalyzer.java	2008-05-30 21:22:21 UTC (rev 405)
@@ -77,7 +77,7 @@
 
    private static boolean isEndOfLine(char f)
    {
-      return (f == '\n');
+      return (f == '\n' || f == '\r');
    }
 
    /** a general pass over the list of tokens, we create terms and then pass over them creating combined terms */

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/src/sleep/runtime/SleepUtils.java	2008-05-30 21:22:21 UTC (rev 405)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080515;
+   public static final int    SLEEP_RELEASE = 20080530;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Added: sleep/tests/makebadscript.sl
===================================================================
--- sleep/tests/makebadscript.sl	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/tests/makebadscript.sl	2008-05-30 21:22:21 UTC (rev 405)
@@ -0,0 +1,15 @@
+debug(3);
+
+$script = 'println("hello world!");
+println("this is a test");
+warn("everything work ok?");';
+
+$a = join(chr(10), split("\n", $script));
+eval($a);
+
+# sleep doesn't recognize \r by itself as a newline format...
+$b = join(chr(13), split("\n", $script));
+eval($b);
+
+$c = join(chr(13) . chr(10), split("\n", $script));
+eval($c);

Added: sleep/tests/output/makebadscript.sl
===================================================================
--- sleep/tests/output/makebadscript.sl	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/tests/output/makebadscript.sl	2008-05-30 21:22:21 UTC (rev 405)
@@ -0,0 +1,9 @@
+hello world!
+this is a test
+Warning: everything work ok? at eval:2
+hello world!
+this is a test
+Warning: everything work ok? at eval:0
+hello world!
+this is a test
+Warning: everything work ok? at eval:2

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 20:41:11 UTC (rev 404)
+++ sleep/whatsnew.txt	2008-05-30 21:22:21 UTC (rev 405)
@@ -1,4 +1,4 @@
-2.1-beta 27 
+2.1-beta 27  (30 May 08)
 ===========
 - Virtual machine errors (stack overflow, out of memory) etc.
   are now caught within the interpreter and used to coerce
@@ -22,8 +22,7 @@
   hasmatch from eating all of the memory.
 - bad index errors (IndexOutOfBoundsException) are now more
   descriptive in some cases.
-- sublists are now serializable--when serialized only the 
-  sublist contents is serialized.
+- sublists are now serializable
 - function("blah") will now throw an error if argument does not
   begin with &
 - empty functions now retain proper line number information 
@@ -44,6 +43,7 @@
      as local variables
   -- $__SCRIPT__ and @ARGV are now available to Sleep scripts
      executed with jrunscript.
+- sleep parser now ignores "\r" inside of script files.
 
 2.1-beta 26  (15 May 08)
 ===========



From rsmudge at mail.berlios.de  Fri May 30 23:49:17 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 23:49:17 +0200
Subject: [Sleep-svn] r406 - in sleep/jsr223: . src/org/dashnine/sleep
Message-ID: <200805302149.m4ULnHNZ008981@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 23:49:17 +0200 (Fri, 30 May 2008)
New Revision: 406

Modified:
   sleep/jsr223/sleep-engine.jar
   sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
Log:
changes to how SleepScriptEngine reads files


Modified: sleep/jsr223/sleep-engine.jar
===================================================================
(Binary files differ)

Modified: sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java
===================================================================
--- sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-30 21:22:21 UTC (rev 405)
+++ sleep/jsr223/src/org/dashnine/sleep/SleepScriptEngine.java	2008-05-30 21:49:17 UTC (rev 406)
@@ -1,34 +1,8 @@
-/*
- * Copyright 2006 Sun Microsystems, Inc. All rights reserved. 
- * Use is subject to license terms.
- *
- * Redistribution and use in source and binary forms, with or without modification, are 
- * permitted provided that the following conditions are met: Redistributions of source code 
- * must retain the above copyright notice, this list of conditions and the following disclaimer.
- * Redistributions in binary form must reproduce the above copyright notice, this list of 
- * conditions and the following disclaimer in the documentation and/or other materials 
- * provided with the distribution. Neither the name of the Sun Microsystems nor the names of 
- * is contributors may be used to endorse or promote products derived from this software 
- * without specific prior written permission. 
-
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
- * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
- * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
- * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
- * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-
-/*
- * SleepScriptEngine.java
- * @author A. Sundararajan
- */
-
 /* Derived from code created by A. Sundararajan (sundararajana at dev.java.net) at Sun 
-   What remains of this class is almost unrecognizable from the original. */
+   What remains of this class is almost unrecognizable from the original. 
+ 
+   The license info was removed as none of the original code remains in this file.  
+*/
 
 package org.dashnine.sleep;
 
@@ -169,20 +143,23 @@
 
     private String readFully(Reader reader) throws ScriptException 
     {
-        char[] arr = new char[8*1024]; // 8K at a time
-        StringBuilder buf = new StringBuilder();
-        int numChars;
-        try 
-        {
-            while ((numChars = reader.read(arr, 0, arr.length)) > 0) 
-            {
-                buf.append(arr, 0, numChars);
-            }
-        } 
-        catch (IOException exp) 
-        {
-            throw new ScriptException(exp);
+        StringBuffer code = new StringBuffer(8192);
+
+        try
+        { 
+           BufferedReader in = new BufferedReader(reader);
+           String s = in.readLine();   
+           while (s != null)
+           {
+               code.append("\n");
+               code.append(s);
+               s = in.readLine();
+           }
+   
+           in.close();
         }
-        return buf.toString();
+        catch (Exception ex) { }
+
+        return code.toString();
     }
 }



From rsmudge at mail.berlios.de  Fri May 30 23:50:17 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 23:50:17 +0200
Subject: [Sleep-svn] r407 - in sleep: src/sleep/runtime tests tests/output
Message-ID: <200805302150.m4ULoHD0009215@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 23:50:14 +0200 (Fri, 30 May 2008)
New Revision: 407

Removed:
   sleep/tests/makebadscript.sl
   sleep/tests/output/makebadscript.sl
Modified:
   sleep/src/sleep/runtime/ScriptLoader.java
Log:
small update to the script loader to use a bigger string buffer by default


Modified: sleep/src/sleep/runtime/ScriptLoader.java
===================================================================
--- sleep/src/sleep/runtime/ScriptLoader.java	2008-05-30 21:49:17 UTC (rev 406)
+++ sleep/src/sleep/runtime/ScriptLoader.java	2008-05-30 21:50:14 UTC (rev 407)
@@ -372,7 +372,7 @@
             return retrieveCacheEntry(name);
         }
 
-        StringBuffer code = new StringBuffer();
+        StringBuffer code = new StringBuffer(8192);
 
         BufferedReader in = new BufferedReader(getInputStreamReader(stream));
         String s = in.readLine();

Deleted: sleep/tests/makebadscript.sl
===================================================================
--- sleep/tests/makebadscript.sl	2008-05-30 21:49:17 UTC (rev 406)
+++ sleep/tests/makebadscript.sl	2008-05-30 21:50:14 UTC (rev 407)
@@ -1,15 +0,0 @@
-debug(3);
-
-$script = 'println("hello world!");
-println("this is a test");
-warn("everything work ok?");';
-
-$a = join(chr(10), split("\n", $script));
-eval($a);
-
-# sleep doesn't recognize \r by itself as a newline format...
-$b = join(chr(13), split("\n", $script));
-eval($b);
-
-$c = join(chr(13) . chr(10), split("\n", $script));
-eval($c);

Deleted: sleep/tests/output/makebadscript.sl
===================================================================
--- sleep/tests/output/makebadscript.sl	2008-05-30 21:49:17 UTC (rev 406)
+++ sleep/tests/output/makebadscript.sl	2008-05-30 21:50:14 UTC (rev 407)
@@ -1,9 +0,0 @@
-hello world!
-this is a test
-Warning: everything work ok? at eval:2
-hello world!
-this is a test
-Warning: everything work ok? at eval:0
-hello world!
-this is a test
-Warning: everything work ok? at eval:2



From rsmudge at mail.berlios.de  Fri May 30 23:55:21 2008
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 30 May 2008 23:55:21 +0200
Subject: [Sleep-svn] r408 - in sleep: . tests tests/output
Message-ID: <200805302155.m4ULtLhw009806@sheep.berlios.de>

Author: rsmudge
Date: 2008-05-30 23:55:20 +0200 (Fri, 30 May 2008)
New Revision: 408

Added:
   sleep/tests/makebadscript.sl
   sleep/tests/output/makebadscript.sl
Modified:
   sleep/whatsnew.txt
Log:
..


Added: sleep/tests/makebadscript.sl
===================================================================
--- sleep/tests/makebadscript.sl	2008-05-30 21:50:14 UTC (rev 407)
+++ sleep/tests/makebadscript.sl	2008-05-30 21:55:20 UTC (rev 408)
@@ -0,0 +1,15 @@
+debug(3);
+
+$script = 'println("hello world!");
+println("this is a test");
+warn("everything work ok?");';
+
+$a = join(chr(10), split("\n", $script));
+eval($a);
+
+# sleep doesn't recognize \r by itself as a newline format...
+$b = join(chr(13), split("\n", $script));
+eval($b);
+
+$c = join(chr(13) . chr(10), split("\n", $script));
+eval($c);

Added: sleep/tests/output/makebadscript.sl
===================================================================
--- sleep/tests/output/makebadscript.sl	2008-05-30 21:50:14 UTC (rev 407)
+++ sleep/tests/output/makebadscript.sl	2008-05-30 21:55:20 UTC (rev 408)
@@ -0,0 +1,9 @@
+hello world!
+this is a test
+Warning: everything work ok? at eval:2
+hello world!
+this is a test
+Warning: everything work ok? at eval:0
+hello world!
+this is a test
+Warning: everything work ok? at eval:2

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2008-05-30 21:50:14 UTC (rev 407)
+++ sleep/whatsnew.txt	2008-05-30 21:55:20 UTC (rev 408)
@@ -43,7 +43,8 @@
      as local variables
   -- $__SCRIPT__ and @ARGV are now available to Sleep scripts
      executed with jrunscript.
-- sleep parser now ignores "\r" inside of script files.
+  -- better handling of \r, \n, and \r\n in eval()
+- sleep lexer now ignores "\r" as whitespace
 
 2.1-beta 26  (15 May 08)
 ===========



