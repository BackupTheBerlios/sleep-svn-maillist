From rsmudge at mail.berlios.de  Thu Mar  8 07:27:35 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 Mar 2007 07:27:35 +0100
Subject: [Sleep-svn] r205 - in sleep: . src/sleep/bridges tests tests/data
	tests/output
Message-ID: <200703080627.l286RZc3024085@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-08 07:27:33 +0100 (Thu, 08 Mar 2007)
New Revision: 205

Added:
   sleep/tests/data/scripts.jar
   sleep/tests/include.sl
   sleep/tests/include2.sl
   sleep/tests/output/include.sl
   sleep/tests/output/include2.sl
Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/SleepClosure.java
   sleep/tests/output/forker.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/useerr.sl
   sleep/tests/output/wrong.sl
   sleep/whatsnew.txt
Log:
added the include() function.



Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-08 06:27:33 UTC (rev 205)
@@ -28,7 +28,7 @@
 import sleep.interfaces.*;
 import sleep.runtime.*;
 
-import java.io.File;
+import java.io.*;
 import java.net.URL;
 import java.net.URLClassLoader;
 
@@ -242,7 +242,7 @@
 
           if (parent != null && !parent.exists())
           {
-             throw new IllegalArgumentException(n + ": could not locate jar file '" + parent + "'");
+             throw new IllegalArgumentException(n + ": could not locate source '" + parent + "'");
           }
 
           try
@@ -279,22 +279,33 @@
              {
                 Block          script;
                 ScriptLoader   sloader = (ScriptLoader)si.getScriptEnvironment().getEnvironment().get("(isloaded)");
-
-                System.out.println(sloader);
-
+                InputStream    istream;
+         
                 if (parent != null)
                 {
                    URLClassLoader loader = new URLClassLoader(new URL[] { parent.toURL() });
-                   script = sloader.compileScript(new File(parent, className).getAbsolutePath(), loader.getResourceAsStream(className));
+                   istream = loader.getResourceAsStream(className);
                 }
                 else
                 {
-                   script = sloader.compileScript(new File(className));
+                   istream = new FileInputStream(new File(className));
                 }
 
-                SleepUtils.runCode(script, si.getScriptEnvironment());
+                if (istream != null)
+                {
+                   script = sloader.compileScript(className, istream);
+                   SleepUtils.runCode(script, si.getScriptEnvironment());
+                }
+                else
+                {
+                   throw new IOException("unable to locate " + className + " from: " + parent);
+                }
              }
           }
+          catch (YourCodeSucksException yex)
+          {
+             throw new RuntimeException(className + ": " + yex.getMessage());
+          }
           catch (Exception ex)
           {
              throw new RuntimeException(ex.toString());

Modified: sleep/src/sleep/bridges/SleepClosure.java
===================================================================
--- sleep/src/sleep/bridges/SleepClosure.java	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/src/sleep/bridges/SleepClosure.java	2007-03-08 06:27:33 UTC (rev 205)
@@ -32,7 +32,7 @@
 /** The Sleep Closure class.  This class represents a Function object that is also a self contained closure */
 public class SleepClosure implements Function
 {
-    private static int ccount;
+    private static int ccount = 0;
     private int id;
 
     private class ClosureIterator implements Iterator

Added: sleep/tests/data/scripts.jar
===================================================================
(Binary files differ)


Property changes on: sleep/tests/data/scripts.jar
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: sleep/tests/include.sl
===================================================================
--- sleep/tests/include.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/include.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -0,0 +1,27 @@
+#
+# test of the include function...
+#
+
+debug(7);
+
+global('$GLOBAL_VAR');
+
+$GLOBAL_VAR = "Harf... bish";
+
+sub foo
+{
+   println("This is foo() - :)");
+}
+
+# case 1:
+include("data/scripts.jar", "scripts/injar.sl");
+
+debug(7);
+println("Eh?!? $INJAR_VAR");
+
+# case 2:
+
+[{ include("data/scripts.jar", "scripts/errors1.sl"); }];
+
+# case 3:
+include("data/scripts.jar", "scripts/does_not_exist.sl");

Added: sleep/tests/include2.sl
===================================================================
--- sleep/tests/include2.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/include2.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -0,0 +1,11 @@
+debug(15);
+
+println("Testing yo");
+println("Blargh");
+
+sub foof
+{
+   include("accum.sl");
+} 
+
+foof();

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/forker.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -1,3 +1,3 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 1551b0 at forker.sl:8
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at e67e6a at forker.sl:8
 Trace: &check('outside of fork') at forker.sl:12

Added: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/include.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -0,0 +1,14 @@
+Trace: &global('$INJAR_VAR') at injar.sl:3
+This is a script included from a jar file
+Trace: &println('This is a script included from a jar file') at injar.sl:6
+This is foo() - :)
+Trace: &println('This is foo() - :)') at include.sl:13
+Trace: &foo() at injar.sl:9
+Done with injar.sl -- Harf... bish
+Trace: &println('Done with injar.sl -- Harf... bish') at injar.sl:12
+Trace: &substr('test', 8, 20) - FAILED! at injar.sl:17
+Warning: String index out of range: 20 at injar.sl:17
+Trace: &debug(7) = 7 at include.sl:19
+Eh?!? Hello from injar.sl
+Warning: scripts/errors1.sl: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24
+Warning: java.io.IOException: unable to locate scripts/does_not_exist.sl from: data/scripts.jar at include.sl:27

Added: sleep/tests/output/include2.sl
===================================================================
--- sleep/tests/output/include2.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/include2.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -0,0 +1,53 @@
+Testing yo
+Trace: &println('Testing yo') at include2.sl:3
+Blargh
+Trace: &println('Blargh') at include2.sl:4
+Trace: &lambda(&closure[accum.sl:7-8]#3, $i => 3) = &closure[accum.sl:7-8]#4 at accum.sl:6
+Trace: &accum(3) = &closure[accum.sl:7-8]#4 at accum.sl:12
+Warning: variable '$a' not declared at accum.sl:12
+Trace: &lambda(&closure[accum.sl:7-8]#5, $i => 40) = &closure[accum.sl:7-8]#6 at accum.sl:6
+Trace: &accum(40) = &closure[accum.sl:7-8]#6 at accum.sl:13
+Warning: variable '$b' not declared at accum.sl:13
+Warning: variable '$x' not declared at accum.sl:15
+Trace: [&closure[accum.sl:7-8]#6: 2] = 42 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 4 at accum.sl:17
+Accumulate: a: 4 b: 42
+Trace: &println('Accumulate: a: 4 b: 42') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 44 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 5 at accum.sl:17
+Accumulate: a: 5 b: 44
+Trace: &println('Accumulate: a: 5 b: 44') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 46 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 6 at accum.sl:17
+Accumulate: a: 6 b: 46
+Trace: &println('Accumulate: a: 6 b: 46') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 48 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 7 at accum.sl:17
+Accumulate: a: 7 b: 48
+Trace: &println('Accumulate: a: 7 b: 48') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 50 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 8 at accum.sl:17
+Accumulate: a: 8 b: 50
+Trace: &println('Accumulate: a: 8 b: 50') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 52 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 9 at accum.sl:17
+Accumulate: a: 9 b: 52
+Trace: &println('Accumulate: a: 9 b: 52') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 54 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 10 at accum.sl:17
+Accumulate: a: 10 b: 54
+Trace: &println('Accumulate: a: 10 b: 54') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 56 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 11 at accum.sl:17
+Accumulate: a: 11 b: 56
+Trace: &println('Accumulate: a: 11 b: 56') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 58 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 12 at accum.sl:17
+Accumulate: a: 12 b: 58
+Trace: &println('Accumulate: a: 12 b: 58') at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#6: 2] = 60 at accum.sl:17
+Trace: [&closure[accum.sl:7-8]#4: 1] = 13 at accum.sl:17
+Accumulate: a: 13 b: 60
+Trace: &println('Accumulate: a: 13 b: 60') at accum.sl:17
+Trace: &include('accum.sl') at include2.sl:8
+Trace: &foof() at include2.sl:11

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/trace.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at 648016 println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 969c29 println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at 648016 println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 969c29 println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at 648016 println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 969c29 println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/tests/output/useerr.sl
===================================================================
--- sleep/tests/output/useerr.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/useerr.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -1,2 +1,2 @@
-Warning: &use: could not locate jar file '/Users/raffi/jdbc.jar' at eval:0
+Warning: &use: could not locate source '/Users/raffi/jdbc.jar' at eval:0
 Warning: java.lang.ClassNotFoundException: ABCDE at eval:0

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/tests/output/wrong.sl	2007-03-08 06:27:33 UTC (rev 205)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at c7e2da println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at 608760 println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at c7e2da println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at 608760 println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at c7e2da println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at 608760 println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at c7e2da println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at 608760 println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at c7e2da println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at 608760 println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at c7e2da println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at 608760 println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at c7e2da println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at 608760 println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at c7e2da println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at 608760 println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at c7e2da println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at 608760 println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at c7e2da println: test] at wrong.sl:31
-Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at caf6c1 at wrong.sl:34
+Trace: [java.io.PrintStream at 608760 println: test] at wrong.sl:31
+Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at ce85c4 at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at c7e2da println: [C at caf6c1] at wrong.sl:34
+Trace: [java.io.PrintStream at 608760 println: [C at ce85c4] at wrong.sl:34

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-03 19:20:21 UTC (rev 204)
+++ sleep/whatsnew.txt	2007-03-08 06:27:33 UTC (rev 205)
@@ -8,7 +8,11 @@
 - improved tracking of source file information for blocks of code.  error
   messages and closure string representations will now accurately represent
   the code's origin information.
+- added an &include function for including code from other sleep scripts.
+  included code is included as if it is part of the current source file.
 
+  include(["/path-to/jar-file.jar"], "directory/filename.sl");
+
 2.1-beta 11  (3 Dec 06)
 ===========
 - multi-line parsed literals now make a more sincere effort to track which 



From rsmudge at mail.berlios.de  Thu Mar  8 07:45:18 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 8 Mar 2007 07:45:18 +0100
Subject: [Sleep-svn] r206 - in sleep: . src/sleep/engine/atoms tests
	tests/output
Message-ID: <200703080645.l286jIF4024915@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-08 07:45:17 +0100 (Thu, 08 Mar 2007)
New Revision: 206

Added:
   sleep/tests/corrupt.sl
   sleep/tests/output/corrupt.sl
Modified:
   sleep/src/sleep/engine/atoms/SValue.java
   sleep/whatsnew.txt
Log:
fixed a bug that allows constants to be "corrupted"



Modified: sleep/src/sleep/engine/atoms/SValue.java
===================================================================
--- sleep/src/sleep/engine/atoms/SValue.java	2007-03-08 06:27:33 UTC (rev 205)
+++ sleep/src/sleep/engine/atoms/SValue.java	2007-03-08 06:45:17 UTC (rev 206)
@@ -43,7 +43,7 @@
 
    public Scalar evaluate(ScriptEnvironment e)
    {
-      e.getCurrentFrame().push(value);
+      e.getCurrentFrame().push(SleepUtils.getScalar(value));
       return value;
    }
 }

Added: sleep/tests/corrupt.sl
===================================================================
--- sleep/tests/corrupt.sl	2007-03-08 06:27:33 UTC (rev 205)
+++ sleep/tests/corrupt.sl	2007-03-08 06:45:17 UTC (rev 206)
@@ -0,0 +1,15 @@
+#
+# reproduce a bug that allowed corrupting of constants
+#
+
+sub foo
+{
+   println($1);
+   $1 = 3;
+}
+
+for ($x = 0; $x < 5; $x++)
+{
+   foo(1);
+}
+

Added: sleep/tests/output/corrupt.sl
===================================================================
--- sleep/tests/output/corrupt.sl	2007-03-08 06:27:33 UTC (rev 205)
+++ sleep/tests/output/corrupt.sl	2007-03-08 06:45:17 UTC (rev 206)
@@ -0,0 +1,5 @@
+1
+1
+1
+1
+1

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-08 06:27:33 UTC (rev 205)
+++ sleep/whatsnew.txt	2007-03-08 06:45:17 UTC (rev 206)
@@ -12,6 +12,9 @@
   included code is included as if it is part of the current source file.
 
   include(["/path-to/jar-file.jar"], "directory/filename.sl");
+- SValue atomic step now returns a copy of the scalar literal and not a
+  reference to the scalar.  This prevents constants from being "changed"
+  on accident.
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 10 01:36:36 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 10 Mar 2007 01:36:36 +0100
Subject: [Sleep-svn] r207 - in sleep: . src/sleep/console
Message-ID: <200703100036.l2A0aamg011408@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-10 01:36:35 +0100 (Sat, 10 Mar 2007)
New Revision: 207

Modified:
   sleep/src/sleep/console/TextConsole.java
   sleep/whatsnew.txt
Log:
added some more command line options.



Modified: sleep/src/sleep/console/TextConsole.java
===================================================================
--- sleep/src/sleep/console/TextConsole.java	2007-03-08 06:45:17 UTC (rev 206)
+++ sleep/src/sleep/console/TextConsole.java	2007-03-10 00:36:35 UTC (rev 207)
@@ -22,6 +22,8 @@
       {
          boolean check = false;
          boolean ast   = false;
+         boolean eval  = false;
+         boolean expr  = false;
          int     start = 0;
 
          if (args[0].equals("-version") || args[0].equals("--version") || args[0].equals("-v"))
@@ -32,15 +34,17 @@
          else if (args[0].equals("-help") || args[0].equals("--help") || args[0].equals("-h"))
          {
              System.out.println(SleepUtils.SLEEP_VERSION + " (" + SleepUtils.SLEEP_RELEASE + ")");
-             System.out.println("Usage: java [properties] -jar sleep.jar [options] [-|file]");
+             System.out.println("Usage: java [properties] -jar sleep.jar [options] [-|file|expression]");
              System.out.println("       properties:");
              System.out.println("         -Dsleep.debug=<debug level>");
              System.out.println("         -Dsleep.classpath=<path to locate 3rd party jars from>");
              System.out.println("       options:");
-             System.out.println("         -a --ast       display the abstract syntax tree of the specified file");
+             System.out.println("         -a --ast       display the abstract syntax tree of the specified script");
              System.out.println("         -c --check     check the syntax of the specified file");
+             System.out.println("         -e --eval      evaluate a script as specified on command line");
+             System.out.println("         -h --help      display this help message");
              System.out.println("         -v --version   display version information");
-             System.out.println("         -h --help      display this help message");
+             System.out.println("         -x --expr      evaluate an expression as specified on the command line");
              System.out.println("       file:");
              System.out.println("         specify a '-' to read script from STDIN");
              return;
@@ -55,6 +59,17 @@
              start = 1;
              ast   = true;
          }
+
+         if (args[start].equals("--eval") || args[start].equals("-e"))
+         {
+             start++;
+             eval  = true;
+         }
+         else if (args[start].equals("--expr") || args[start].equals("-x"))
+         {
+             start++;
+             expr  = true;
+         }
          
          //
          // put all of our command line arguments into an array scalar
@@ -69,14 +84,24 @@
          try
          {
             ScriptInstance script;
-            if (args[start].equals("-"))
+
+            if (eval)
             {
+                script = loader.loadScript(args[start - 1], args[start], new Hashtable());
+            }
+            else if (expr)
+            {
+                script = loader.loadScript(args[start - 1], "println(" + args[start] + ");", new Hashtable());
+            }
+            else if (args[start].equals("-"))
+            {
                 script = loader.loadScript("STDIN", System.in);
             }
             else
             {
                 script = loader.loadScript(args[start]);     // load the script, parse it, etc.
             }
+
             script.getScriptVariables().putScalar("@ARGV", array);  // set @ARGV to be our array of command line arguments
 
             if (System.getProperty("sleep.debug") != null)

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-08 06:45:17 UTC (rev 206)
+++ sleep/whatsnew.txt	2007-03-10 00:36:35 UTC (rev 207)
@@ -15,6 +15,9 @@
 - SValue atomic step now returns a copy of the scalar literal and not a
   reference to the scalar.  This prevents constants from being "changed"
   on accident.
+- Added a -e|--eval and -x|--expr command line options to sleep.jar; these
+  options allow whole scripts/expressions to be specified on the command 
+  line for evaluation.
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 10 02:44:43 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 10 Mar 2007 02:44:43 +0100
Subject: [Sleep-svn] r208 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200703100144.l2A1ihpf015908@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-10 02:44:42 +0100 (Sat, 10 Mar 2007)
New Revision: 208

Added:
   sleep/tests/output/strmods.sl
   sleep/tests/strmods.sl
Modified:
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/tests/output/include.sl
   sleep/whatsnew.txt
Log:
updated numerous string functions to accept parameters with a negative index



Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2007-03-10 00:36:35 UTC (rev 207)
+++ sleep/src/sleep/bridges/BasicStrings.java	2007-03-10 01:44:42 UTC (rev 208)
@@ -289,9 +289,7 @@
            String temp  = l.pop().toString();
            int    value = ((Scalar)l.pop()).intValue();
 
-           if (value >= temp.length()) { return SleepUtils.getScalar(temp); }
-
-           return SleepUtils.getScalar(temp.substring(0, value));
+           return SleepUtils.getScalar(substring(n, temp, 0, value));
         }
     }
 
@@ -323,9 +321,7 @@
            String temp  = l.pop().toString();
            int    value = ((Scalar)l.pop()).intValue();
 
-           if (value >= temp.length()) { return SleepUtils.getScalar(temp); }
-
-           return SleepUtils.getScalar(temp.substring(temp.length() - value, temp.length()));
+           return SleepUtils.getScalar(substring(n, temp, 0 - value, temp.length()));
         }
     }
 
@@ -333,7 +329,7 @@
     {
         public Scalar evaluate(String n, ScriptInstance i, Stack l)
         {
-           return SleepUtils.getScalar((int)l.pop().toString().charAt(0));
+           return SleepUtils.getScalar((int)(BridgeUtilities.getString(l, "\u0000").charAt(0)));
         }
     }
 
@@ -404,7 +400,7 @@
         {
            StringBuffer work    = new StringBuffer(BridgeUtilities.getString(l, ""));
            String       nstr    = BridgeUtilities.getString(l, "");
-           int          index   = BridgeUtilities.getInt(l, 0);
+           int          index   = normalize(BridgeUtilities.getInt(l, 0), work.length());
            int          nchar   = BridgeUtilities.getInt(l, nstr.length());
 
            work.delete(index, index + nchar);
@@ -432,7 +428,7 @@
               stop  = BridgeUtilities.getInt(l, value.length());
            }
                     
-           return SleepUtils.getScalar(value.substring(start, stop));
+           return SleepUtils.getScalar(substring(n, value, start, stop));
         }
     }
 
@@ -442,8 +438,9 @@
         {
            String value = l.pop().toString();
            String item  = l.pop().toString();
-          
-           return SleepUtils.getScalar(value.indexOf(item));
+           int    start = normalize(BridgeUtilities.getInt(l, 0), value.length());
+                  
+           return SleepUtils.getScalar(value.indexOf(item, start));
         }
     }
 
@@ -454,7 +451,7 @@
            String value = l.pop().toString();
            int    start = BridgeUtilities.getInt(l);
           
-           return SleepUtils.getScalar(value.charAt(start) + "");
+           return SleepUtils.getScalar(charAt(value, start) + "");
         }
     }
 
@@ -632,4 +629,38 @@
         }
     }
 
+   /** Normalizes the start/end parameters based on the length of the string and returns a substring.  Strings normalized
+       in this way will be able to accept negative indices for their parameters. */
+   private static final String substring(String func, String str, int _start, int _end)
+   {
+      int length = str.length();
+      int start, end;
+
+
+      start = (_start < 0 ? _start + length : _start) % length;
+      end   = (_end < 0 ? _end + length : _end) % (length + 1);
+
+      if (start >= end)
+      {
+         throw new IllegalArgumentException(func + ": illegal substring('" + str + "', " + _start + " -> " + start + ", " + _end + " -> " + end + ") indices");
+      }
+
+      return str.substring(start, end);
+   }
+
+   /** normalizes the value based on the string length */
+   private static final int normalize(int value, int length)
+   {
+      return (value < 0 ? value + length : value) % length;
+   }
+
+   /** Normalizes the start parameter based on the length of the string and returns a character.  Functions with
+       parameters normalized in this way will be able to accept nagative indices for their parameters */
+   private static final char charAt(String str, int start)
+   {
+      int length = str.length();
+
+      start = (start < 0 ? start + length : start) % length;
+      return str.charAt(start);
+   }
 }

Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2007-03-10 00:36:35 UTC (rev 207)
+++ sleep/tests/output/include.sl	2007-03-10 01:44:42 UTC (rev 208)
@@ -7,7 +7,7 @@
 Done with injar.sl -- Harf... bish
 Trace: &println('Done with injar.sl -- Harf... bish') at injar.sl:12
 Trace: &substr('test', 8, 20) - FAILED! at injar.sl:17
-Warning: String index out of range: 20 at injar.sl:17
+Warning: &substr: illegal substring('test', 8 -> 0, 20 -> 0) indices at injar.sl:17
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
 Warning: scripts/errors1.sl: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24

Added: sleep/tests/output/strmods.sl
===================================================================
--- sleep/tests/output/strmods.sl	2007-03-10 00:36:35 UTC (rev 207)
+++ sleep/tests/output/strmods.sl	2007-03-10 01:44:42 UTC (rev 208)
@@ -0,0 +1,37 @@
+test
+this
+is a test
+this is a
+this is uNF test
+a
+this is a testthis is a testthis is a testthis is a testthis is a testthis is a 
+t a si sihttset a si sihttset a si sihttset a si sihttset a si sihttset a si siht
+--): gnirts elbisrever a si siht++
+string
+string
+Warning: &mid: illegal substring('++this is a reversible string :)--', -11 -> 23, 89 -> 19) indices at strmods.sl:42
+2
+2
+2
+5
+5
+5
+-1
+-1
+-1
+-1
+-1
+-1
+-1
+-1
+2
+2
+2
+5
+5
+5
+-1
+-1
+-1
+-1
+-1

Added: sleep/tests/strmods.sl
===================================================================
--- sleep/tests/strmods.sl	2007-03-10 00:36:35 UTC (rev 207)
+++ sleep/tests/strmods.sl	2007-03-10 01:44:42 UTC (rev 208)
@@ -0,0 +1,47 @@
+#
+# test of string functions...
+#
+
+println(right("this is a test", 4));  # the right most 4 chars
+println(left("this is a test", 4));   # the left most 4 chars
+
+println(right("this is a test", -5)); # all right chars except the left 5
+println(left("this is a test", -5));  # all left chars except the right 5
+
+println(replaceAt("this is a test", "uNF", -6, 1));
+
+println(charAt("this is a test", -6));
+
+for ($x = 0; $x < 80; $x++)
+{
+   print(charAt("this is a test", $x));
+}
+
+println();
+
+for ($x = 80; $x >= 0; $x--)
+{
+   print(charAt("this is a test", $x));
+}
+
+println();
+
+# reverse a string quickly with the negative indice bits...
+$str = "++this is a reversible string :)--";
+for ($x = strlen($str) - 1; $x >= 0; $x--)
+{
+   print(charAt($str, $x));
+}
+
+println();
+
+println(substr($str, -11, -5));
+
+println(mid($str, -11, 6));
+
+[{ println(mid($str, -11, 100)); }];
+
+for ($x = 0; $x < 25; $x++)
+{
+   println(indexOf("this is a test", "i", $x));
+}

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-10 00:36:35 UTC (rev 207)
+++ sleep/whatsnew.txt	2007-03-10 01:44:42 UTC (rev 208)
@@ -18,6 +18,10 @@
 - Added a -e|--eval and -x|--expr command line options to sleep.jar; these
   options allow whole scripts/expressions to be specified on the command 
   line for evaluation.
+- Updated &indexOf to accept an optional start parameter.
+- Updated numerous string functions to allow negative indice parameters.
+  &left, &right, &mid, &replaceAt, &strrep, &charAt, &substr, &indexOf
+  
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 10 02:59:43 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 10 Mar 2007 02:59:43 +0100
Subject: [Sleep-svn] r209 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200703100159.l2A1xhPC016538@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-10 02:59:42 +0100 (Sat, 10 Mar 2007)
New Revision: 209

Modified:
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/tests/output/include.sl
   sleep/tests/output/strmods.sl
   sleep/tests/strmods.sl
   sleep/whatsnew.txt
Log:
More fixes to string shit...



Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2007-03-10 01:44:42 UTC (rev 208)
+++ sleep/src/sleep/bridges/BasicStrings.java	2007-03-10 01:59:42 UTC (rev 209)
@@ -636,9 +636,9 @@
       int length = str.length();
       int start, end;
 
-
       start = (_start < 0 ? _start + length : _start) % length;
-      end   = (_end < 0 ? _end + length : _end) % (length + 1);
+      end   = (_end < 0 ? _end + length : _end);
+      end   = end <= length ? end : length;
 
       if (start >= end)
       {

Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2007-03-10 01:44:42 UTC (rev 208)
+++ sleep/tests/output/include.sl	2007-03-10 01:59:42 UTC (rev 209)
@@ -6,8 +6,8 @@
 Trace: &foo() at injar.sl:9
 Done with injar.sl -- Harf... bish
 Trace: &println('Done with injar.sl -- Harf... bish') at injar.sl:12
-Trace: &substr('test', 8, 20) - FAILED! at injar.sl:17
-Warning: &substr: illegal substring('test', 8 -> 0, 20 -> 0) indices at injar.sl:17
+Trace: &substr('test', 8, 20) = 'test' at injar.sl:17
+Warning: variable '$x' not declared at injar.sl:17
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
 Warning: scripts/errors1.sl: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24

Modified: sleep/tests/output/strmods.sl
===================================================================
--- sleep/tests/output/strmods.sl	2007-03-10 01:44:42 UTC (rev 208)
+++ sleep/tests/output/strmods.sl	2007-03-10 01:59:42 UTC (rev 209)
@@ -9,7 +9,7 @@
 --): gnirts elbisrever a si siht++
 string
 string
-Warning: &mid: illegal substring('++this is a reversible string :)--', -11 -> 23, 89 -> 19) indices at strmods.sl:42
+Warning: &substr: illegal substring('++this is a reversible string :)--', -11 -> 23, -15 -> 19) indices at strmods.sl:42
 2
 2
 2

Modified: sleep/tests/strmods.sl
===================================================================
--- sleep/tests/strmods.sl	2007-03-10 01:44:42 UTC (rev 208)
+++ sleep/tests/strmods.sl	2007-03-10 01:59:42 UTC (rev 209)
@@ -39,7 +39,7 @@
 
 println(mid($str, -11, 6));
 
-[{ println(mid($str, -11, 100)); }];
+[{ println(substr($str, -11, -15)); }];
 
 for ($x = 0; $x < 25; $x++)
 {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-10 01:44:42 UTC (rev 208)
+++ sleep/whatsnew.txt	2007-03-10 01:59:42 UTC (rev 209)
@@ -10,7 +10,6 @@
   the code's origin information.
 - added an &include function for including code from other sleep scripts.
   included code is included as if it is part of the current source file.
-
   include(["/path-to/jar-file.jar"], "directory/filename.sl");
 - SValue atomic step now returns a copy of the scalar literal and not a
   reference to the scalar.  This prevents constants from being "changed"



From rsmudge at mail.berlios.de  Sat Mar 10 23:10:07 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 10 Mar 2007 23:10:07 +0100
Subject: [Sleep-svn] r210 - in sleep: . src/sleep/bridges src/sleep/runtime
	tests tests/output
Message-ID: <200703102210.l2AMA77S017539@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-10 23:10:06 +0100 (Sat, 10 Mar 2007)
New Revision: 210

Added:
   sleep/tests/dataio.sl
   sleep/tests/output/dataio.sl
Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
Fixes to I/O... oooh



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/build.xml	2007-03-10 22:10:06 UTC (rev 210)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-10 22:10:06 UTC (rev 210)
@@ -1042,7 +1042,7 @@
           IOObject        a = chooseSource(l, 2, i);
           String    pattern = BridgeUtilities.getString(l, "");
 
-          return ReadFormatted(pattern, a.getReader(), i.getScriptEnvironment(), a);
+          return a.getReader() != null ? ReadFormatted(pattern, a.getReader(), i.getScriptEnvironment(), a) : SleepUtils.getEmptyScalar();
        }
     }
 
@@ -1165,15 +1165,7 @@
          
           WriteFormatted(pattern, new DataOutputStream(temp), l, null);
 
-          StringBuffer value = new StringBuffer();
-          byte[] data = temp.toByteArray();
-
-          for (int x = 0; x < data.length; x++)
-          {
-             value.append((char)(data[x] & 0x00FF));
-          }
-
-          return SleepUtils.getScalar(value.toString());
+          return SleepUtils.getScalar(temp.toByteArray(), temp.size());
        }
     }
 
@@ -1208,27 +1200,36 @@
        {
           IOObject         a = chooseSource(l, 2, i);
           int             to = BridgeUtilities.getInt(l, 1);
+          int           last = 0;
 
-          byte[] temp = a.getBuffer(to);
+          if (a.getReader() != null)
+          {
+             byte[] temp = a.getBuffer(to);
+   
+             int read = 0;
 
-          int read = 0;
+             try
+             {
+                while (read < to)
+                {
+                   last = a.getReader().read(temp, read, to - read);
 
-          try
-          {
-             while (read < to)
+                   if (last == -1) { break; }
+                   read += last;
+                } 
+             }
+             catch (Exception ex)
              {
-                read += a.getReader().read(temp, read, to - read);
+                a.close();
+                i.getScriptEnvironment().flagError(ex.toString());
+
+                ex.printStackTrace();
              }
-          }
-          catch (Exception ex)
-          {
-             a.close();
-             i.getScriptEnvironment().flagError(ex.toString());
-          }
 
-          if (read > 0)
-          {
-             return SleepUtils.getScalar(temp);
+             if (read > 0)
+             {
+                return SleepUtils.getScalar(temp, read);
+             }
           }
           return SleepUtils.getEmptyScalar();
        }
@@ -1241,34 +1242,42 @@
           IOObject         a = chooseSource(l, 2, i);
           int             to = BridgeUtilities.getInt(l, 1);
           int           size = BridgeUtilities.getInt(l, 1024 * 32); /* 32K buffer anyone */
+          int           last = 0;
 
-          byte[] temp = a.getBuffer(size);
-
-          int read = 0;
-
-          try
+          if (a.getReader() != null)
           {
-             while (read < to)
+             byte[] temp = a.getBuffer(size);
+  
+             int read = 0;
+ 
+             try
              {
-                if ((to - read) < size)
+                while (read < to)
                 {
-                   read += a.getReader().read(temp, 0, to - read);
+                   if ((to - read) < size)
+                   {
+                      last = a.getReader().read(temp, 0, to - read);
+                   }
+                   else
+                   {
+                      last = a.getReader().read(temp, 0, size);
+                   }
+
+                   if (last == -1) { break; }
+
+                   read += last;
                 }
-                else
-                {
-                   read += a.getReader().read(temp, 0, size);
-                }
              }
-          }
-          catch (Exception ex)
-          {
-             a.close();
-             i.getScriptEnvironment().flagError(ex.toString());
-          }
+             catch (Exception ex)
+             {
+                a.close();
+                i.getScriptEnvironment().flagError(ex.toString());
+             }
 
-          if (read > 0)
-          {
-             return SleepUtils.getScalar(read);
+             if (read > 0)
+             {
+                return SleepUtils.getScalar(read);
+             }
           }
           return SleepUtils.getEmptyScalar();
        }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/src/sleep/runtime/SleepUtils.java	2007-03-10 22:10:06 UTC (rev 210)
@@ -503,9 +503,15 @@
    /** constructs a string scalar with value x interpreted as an array of unsigned bytes */
    public static Scalar getScalar(byte[] x)
    {
+      return getScalar(x, x.length);
+   }
+
+   /** constructs a string scalar with value x interpreted as an array of unsigned bytes */
+   public static Scalar getScalar(byte[] x, int length)
+   {
       Scalar temp = new Scalar();
-      StringBuffer buff = new StringBuffer(x.length);
-      for (int y = 0; y < x.length; y++)
+      StringBuffer buff = new StringBuffer(length);
+      for (int y = 0; y < length; y++)
       {
          char append = (char)(x[y] & 0xFF);
          buff.append(append);

Added: sleep/tests/dataio.sl
===================================================================
--- sleep/tests/dataio.sl	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/tests/dataio.sl	2007-03-10 22:10:06 UTC (rev 210)
@@ -0,0 +1,49 @@
+#
+# test doing a generic read with an assignment loop to suck down byte data
+#
+
+debug(7);
+
+global('$src');
+
+$src = fork({
+  local('$str $server $x');
+
+#  $server = listen(8888, 0);
+  $server = $source;
+
+  for ($x = 0; $x < (1024 * 10); $x++)
+  {
+     $str .= chr(rand(0, 255));
+
+     if (($x % 1024) == 0)
+     {
+        print(".");
+     }
+  }
+
+  println();
+  println("Writing a massive amount of crap");
+
+  print($server, $str);
+  closef($server);
+});
+
+sleep(2000);
+
+fork({
+  local('$data $z');
+
+#  $handle = connect("127.0.0.1", 8888);
+#  $handle = $source; 
+  
+  while $data (readb($handle, 603))
+  {
+     println("Read: " . strlen($data) . " bytes");
+     $z += strlen($data);
+  }
+
+  println("Read in $z bytes");
+
+  closef($handle);
+}, $handle => $src);

Added: sleep/tests/output/dataio.sl
===================================================================
--- sleep/tests/output/dataio.sl	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/tests/output/dataio.sl	2007-03-10 22:10:06 UTC (rev 210)
@@ -0,0 +1,20 @@
+..........
+Writing a massive amount of crap
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 592 bytes
+Read in 10240 bytes

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-10 01:59:42 UTC (rev 209)
+++ sleep/whatsnew.txt	2007-03-10 22:10:06 UTC (rev 210)
@@ -20,7 +20,10 @@
 - Updated &indexOf to accept an optional start parameter.
 - Updated numerous string functions to allow negative indice parameters.
   &left, &right, &mid, &replaceAt, &strrep, &charAt, &substr, &indexOf
-  
+- added a check to &readb to see if the handle is closed prior to attempting
+  a read.  If the handle is closed $null is returned.
+- fixed bugs in &readb that come about when reading in the last chunk of 
+  data that is usually smaller than the total buffer size.  
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Sun Mar 11 16:40:13 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sun, 11 Mar 2007 16:40:13 +0100
Subject: [Sleep-svn] r211 - in sleep: . src/sleep/bridges
	src/sleep/bridges/io tests tests/output
Message-ID: <200703111540.l2BFeDdt016880@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-11 16:40:12 +0100 (Sun, 11 Mar 2007)
New Revision: 211

Added:
   sleep/src/sleep/bridges/io/BufferObject.java
   sleep/tests/buffer.sl
   sleep/tests/megaio.sl
   sleep/tests/output/buffer.sl
   sleep/tests/output/megaio.sl
Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/whatsnew.txt
Log:
added writeable buffer I/O handle type thingie...



Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-11 15:40:12 UTC (rev 211)
@@ -62,6 +62,8 @@
         temp.put("&listen",     f);
         temp.put("&exec",       new exec());
         temp.put("&fork",       new fork());
+        temp.put("&allocate",   this);
+
         temp.put("&sleep",      new sleep());
 
         temp.put("&closef",     new closef());
@@ -175,6 +177,13 @@
              a.close();
           }
        }
+       else if (n.equals("&allocate"))
+       {
+          int capacity = BridgeUtilities.getInt(l, 1024 * 32); // 32K initial buffer by default
+          BufferObject temp = new BufferObject();
+          temp.allocate(capacity);
+          return SleepUtils.getScalar(temp);
+       }
        else if (n.equals("&digest"))
        {
           Scalar   s = BridgeUtilities.getScalar(l);

Added: sleep/src/sleep/bridges/io/BufferObject.java
===================================================================
--- sleep/src/sleep/bridges/io/BufferObject.java	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/src/sleep/bridges/io/BufferObject.java	2007-03-11 15:40:12 UTC (rev 211)
@@ -0,0 +1,49 @@
+package sleep.bridges.io;
+
+import java.io.*;
+import sleep.bridges.BridgeUtilities;
+import sleep.runtime.ScriptEnvironment;
+
+/** The buffer works as follows.  Once allocated it is open for writing.  When the scripter chooses to
+    close the buffer it is then available for reading.  The second time it is closed all of its resources
+    are deallocated. */
+public class BufferObject extends IOObject
+{
+   /** The writeable source for this IO object */
+   protected ByteArrayOutputStream source;
+
+   /** The readable source for this IO object */
+   protected ByteArrayInputStream  readme;
+
+   /** returns the stream referenced by this IOObject */
+   public Object getSource()
+   {
+      return source;
+   }
+
+   /** handles our closing semantices i.e. first time it is called the writeable portion is opened
+       up for reading and the second time all resources are deallocated */
+   public void close()
+   {   
+      super.close();
+
+      if (readme != null)
+      {
+         readme = null;
+      }
+
+      if (source != null)
+      {
+         readme = new ByteArrayInputStream(source.toByteArray());
+         openRead(readme);
+         source = null;
+      }
+   }
+
+   /** allocates a writeable buffer with the specified initial capacity */
+   public void allocate(int initialSize)
+   {
+      source = new ByteArrayOutputStream(initialSize);
+      openWrite(source);
+   }
+}

Added: sleep/tests/buffer.sl
===================================================================
--- sleep/tests/buffer.sl	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/tests/buffer.sl	2007-03-11 15:40:12 UTC (rev 211)
@@ -0,0 +1,49 @@
+#
+# more tests of the ever loveable buffer..
+#
+
+debug(7);
+
+global('$handle');
+
+$handle = allocate(1024 * 1024); # 1K buffer...
+
+println($handle, "this is a test");
+println("Number of bytes available to read? " . available($handle));
+
+println($handle, "this is another test :)");
+
+println("Trying a read: " . readln($handle)); # should fail!
+
+closef($handle); # the buffer is now readable...
+
+println("Bytes avail: " . available($handle));
+
+mark($handle, 1024);
+
+println(strrep(readb($handle, available($handle)), "\n", '\n'));
+println("Bytes avail (post read): " . available($handle));
+
+println("--- Reading the two sentences ---");
+reset($handle);
+mark($handle);
+
+println("Reading a single byte: " . readb($handle, 1));
+
+println("Bytes avail: " . available($handle));
+println(readln($handle)); 
+
+println("Bytes avail: " . available($handle)); # this is 0 for some reason and I'm not sure why...
+                                               # seems readln and friends disturb the force?
+ 
+                                               # now I know why!! it appears that ops to read unicode
+                                               # chars will suck up some of the buffer contents to
+                                               # make things more "efficient". 
+
+println(readln($handle)); 
+println("Bytes avail: " . available($handle));
+
+println("--- Final Read Step ---");
+reset($handle);
+println("Bytes avail: " . available($handle));
+printAll(readAll($handle));

Added: sleep/tests/megaio.sl
===================================================================
--- sleep/tests/megaio.sl	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/tests/megaio.sl	2007-03-11 15:40:12 UTC (rev 211)
@@ -0,0 +1,52 @@
+#
+# this script is similar to dataio.sl except it uses buffers to handle a larger amount of data (faster!)
+# handles 10x as much data as dataio.sl in about the same amount of time.
+#
+
+debug(7);
+
+global('$src');
+
+$src = fork({
+  local('$str $server $x');
+
+  $server = $source;
+
+  $str = allocate(1024 * 100);
+
+  for ($x = 0; $x < (1024 * 100); $x++)
+  {
+     writeb($str, chr(rand(0, 255)));
+
+     if (($x % 1024) == 0)
+     {
+        print(".");
+     }
+  }
+
+  println();
+  println("Writing a massive amount of crap");
+
+  println("Pre-Close: Avail for reading from str: " . available($str));
+  closef($str);
+  println("Post-Close: Avail for reading from str: " . available($str));
+
+  print($server, readb($str, available($str)));
+  closef($server);
+});
+
+sleep(2000);
+
+fork({
+  local('$data $z');
+
+  while $data (readb($handle, 603))
+  {
+     println("Read: " . strlen($data) . " bytes");
+     $z += strlen($data);
+  }
+
+  println("Read in $z bytes");
+
+  closef($handle);
+}, $handle => $src);

Added: sleep/tests/output/buffer.sl
===================================================================
--- sleep/tests/output/buffer.sl	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/tests/output/buffer.sl	2007-03-11 15:40:12 UTC (rev 211)
@@ -0,0 +1,16 @@
+Number of bytes available to read? 
+Trying a read: 
+Bytes avail: 39
+this is a test\nthis is another test :)\n
+Bytes avail (post read): 0
+--- Reading the two sentences ---
+Reading a single byte: t
+Bytes avail: 38
+his is a test
+Bytes avail: 0
+this is another test :)
+Bytes avail: 0
+--- Final Read Step ---
+Bytes avail: 39
+this is a test
+this is another test :)

Added: sleep/tests/output/megaio.sl
===================================================================
--- sleep/tests/output/megaio.sl	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/tests/output/megaio.sl	2007-03-11 15:40:12 UTC (rev 211)
@@ -0,0 +1,175 @@
+....................................................................................................
+Writing a massive amount of crap
+Pre-Close: Avail for reading from str: 
+Post-Close: Avail for reading from str: 102400
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 603 bytes
+Read: 493 bytes
+Read in 102400 bytes

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-10 22:10:06 UTC (rev 210)
+++ sleep/whatsnew.txt	2007-03-11 15:40:12 UTC (rev 211)
@@ -24,6 +24,11 @@
   a read.  If the handle is closed $null is returned.
 - fixed bugs in &readb that come about when reading in the last chunk of 
   data that is usually smaller than the total buffer size.  
+- added a new I/O handle type: the buffer.  this can be used to construct
+  and manipulate very large strings of data in memory.  use &allocate()
+  to allocate a writeable buffer.  the first time &closef is called the
+  buffer will flip to a readable buffer.  the second time all the resources
+  will be cleared.
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Sun Mar 11 17:29:29 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sun, 11 Mar 2007 17:29:29 +0100
Subject: [Sleep-svn] r212 - in sleep: . src/sleep/bridges
	src/sleep/bridges/io tests tests/output
Message-ID: <200703111629.l2BGTTf4019814@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-11 17:29:29 +0100 (Sun, 11 Mar 2007)
New Revision: 212

Added:
   sleep/tests/oopack.sl
   sleep/tests/output/oopack.sl
Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/io/DataPattern.java
   sleep/src/sleep/bridges/io/ProcessObject.java
   sleep/whatsnew.txt
Log:
A few changes, pack/unpack can handle objects and an updated exec function



Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-11 16:29:29 UTC (rev 212)
@@ -335,10 +335,21 @@
     {
        public Scalar evaluate(String n, ScriptInstance i, Stack l)
        {
-          String   command  = BridgeUtilities.getString(l, null);
-          String[] envp     = null;
-          File     start    = null;
+          Scalar   cmd      = l.isEmpty() ? SleepUtils.getEmptyScalar() : (Scalar)l.pop();
+          String   command[];
 
+          if (cmd.getArray() != null)
+          {
+             command = (String[])(SleepUtils.getListFromArray(cmd.getArray()).toArray(new String[0])); 
+          }
+          else
+          {
+             command = cmd.toString().split("\\s");
+          }
+
+          String[] envp      = null;
+          File     start     = null;
+
           if (!l.isEmpty())
           {
              if (SleepUtils.isEmptyScalar((Scalar)l.peek()))
@@ -828,8 +839,14 @@
 
                         value = SleepUtils.getScalar(buffer.getLong(0)); // turns the byte into an int
                         break;
+
+                      case 'o':
+                        ObjectInputStream ois = new ObjectInputStream(in);
+                        value = (Scalar)ois.readObject();
+                        break;
+
                       default:
-                        env.getScriptInstance().fireWarning("Erroneous file pattern character: " + pattern.value, -1);
+                        env.flagError("unknown file pattern character: " + pattern.value);
                    }
                 }
                 catch (Exception ex) 
@@ -1023,6 +1040,9 @@
                         buffer.putLong(0, temp.longValue());
                         out.write(bdata, 0, 8);
                         break;
+                      case 'o':
+                        ObjectOutputStream oos = new ObjectOutputStream(out);
+                        oos.writeObject(temp);
                       default:
                    }
                 }

Modified: sleep/src/sleep/bridges/io/DataPattern.java
===================================================================
--- sleep/src/sleep/bridges/io/DataPattern.java	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/src/sleep/bridges/io/DataPattern.java	2007-03-11 16:29:29 UTC (rev 212)
@@ -69,6 +69,7 @@
                case 'h':
                case 'H':
                case 'x':
+               case 'o':
                  temp.size = 1;
                  break;
                case 'u':

Modified: sleep/src/sleep/bridges/io/ProcessObject.java
===================================================================
--- sleep/src/sleep/bridges/io/ProcessObject.java	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/src/sleep/bridges/io/ProcessObject.java	2007-03-11 16:29:29 UTC (rev 212)
@@ -13,16 +13,14 @@
       return process;
    }
 
-   public void open(String command, String[] environment, File startDir, ScriptEnvironment env)
+   public void open(String command[], String[] environment, File startDir, ScriptEnvironment env)
    {
       try
       {
-         if (command.indexOf(' ') > -1)
+         if (command.length > 0)
          {
             String args;
-            args    = command.substring(command.indexOf(' '), command.length());
-            command = command.substring(0, command.indexOf(' ')).replace('/', File.separatorChar);
-            command = command + args;
+            command[0] = command[0].replace('/', File.separatorChar);
          }
 
          process = Runtime.getRuntime().exec(command, environment, startDir);

Added: sleep/tests/oopack.sl
===================================================================
--- sleep/tests/oopack.sl	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/tests/oopack.sl	2007-03-11 16:29:29 UTC (rev 212)
@@ -0,0 +1,19 @@
+global('$str $num $func $x');
+
+debug(7);
+
+#
+# test of pack/unpack with sleep objects
+#
+
+$x = pack("o3", "this is a test", 3, { println("doit!"); });
+
+println(strlen($x));
+
+($str, $num, $func) = unpack("o*", $x);
+
+[$func];
+
+if (-isnumber $num) { println("It is a number: $num"); }
+
+println($str);

Added: sleep/tests/output/oopack.sl
===================================================================
--- sleep/tests/output/oopack.sl	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/tests/output/oopack.sl	2007-03-11 16:29:29 UTC (rev 212)
@@ -0,0 +1,4 @@
+1962
+doit!
+It is a number: 3
+this is a test

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-11 15:40:12 UTC (rev 211)
+++ sleep/whatsnew.txt	2007-03-11 16:29:29 UTC (rev 212)
@@ -29,6 +29,10 @@
   to allocate a writeable buffer.  the first time &closef is called the
   buffer will flip to a readable buffer.  the second time all the resources
   will be cleared.
+- pack/unpack/bwrite/bread can now parse sleep scalars with the 'o' format
+- added another form of &exec that allows the command/arguments to be
+  specified as an array.  useful for including arguments with spaces in
+  them.
 
 2.1-beta 11  (3 Dec 06)
 ===========



From rsmudge at mail.berlios.de  Mon Mar 12 01:22:22 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 12 Mar 2007 01:22:22 +0100
Subject: [Sleep-svn] r214 - sleep/src/sleep/parser
Message-ID: <200703120022.l2C0MMeZ010856@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-12 01:22:22 +0100 (Mon, 12 Mar 2007)
New Revision: 214

Modified:
   sleep/src/sleep/parser/CodeGenerator.java
Log:
one little change :)



Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2007-03-12 00:11:53 UTC (rev 213)
+++ sleep/src/sleep/parser/CodeGenerator.java	2007-03-12 00:22:22 UTC (rev 214)
@@ -622,7 +622,7 @@
 
                      if (count != 0)
                      {
-                        parser.reportErrorWithMarker("missing close brace for variable alignment", si.getErrorToken());
+                        parser.reportError("missing close brace for variable alignment", new Token(d.toString(), si.getLineNumber()));
                         isVar = false;
                      }
                      else if (!si.hasNext() || Checkers.isEndOfVar(si.peek()))



From rsmudge at mail.berlios.de  Mon Mar 12 01:24:58 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 12 Mar 2007 01:24:58 +0100
Subject: [Sleep-svn] r215 - sleep
Message-ID: <200703120024.l2C0Ow7c011200@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-12 01:24:58 +0100 (Mon, 12 Mar 2007)
New Revision: 215

Modified:
   sleep/build.xml
Log:
oops pre-dist ritual


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-12 00:22:22 UTC (rev 214)
+++ sleep/build.xml	2007-03-12 00:24:58 UTC (rev 215)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"



From rsmudge at mail.berlios.de  Mon Mar 12 01:38:57 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Mon, 12 Mar 2007 01:38:57 +0100
Subject: [Sleep-svn] r216 - in sleep/tests: . output
Message-ID: <200703120038.l2C0cv7e011708@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-12 01:38:57 +0100 (Mon, 12 Mar 2007)
New Revision: 216

Modified:
   sleep/tests/oopack.sl
   sleep/tests/output/oopack.sl
Log:
fixing a test that is guaranteed to keep failing


Modified: sleep/tests/oopack.sl
===================================================================
--- sleep/tests/oopack.sl	2007-03-12 00:24:58 UTC (rev 215)
+++ sleep/tests/oopack.sl	2007-03-12 00:38:57 UTC (rev 216)
@@ -8,7 +8,7 @@
 
 $x = pack("o3", "this is a test", 3, { println("doit!"); });
 
-println(strlen($x));
+# println(strlen($x));
 
 ($str, $num, $func) = unpack("o*", $x);
 

Modified: sleep/tests/output/oopack.sl
===================================================================
--- sleep/tests/output/oopack.sl	2007-03-12 00:24:58 UTC (rev 215)
+++ sleep/tests/output/oopack.sl	2007-03-12 00:38:57 UTC (rev 216)
@@ -1,4 +1,3 @@
-1945
 doit!
 It is a number: 3
 this is a test



From rsmudge at mail.berlios.de  Fri Mar 16 03:01:38 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Fri, 16 Mar 2007 03:01:38 +0100
Subject: [Sleep-svn] r217 - in sleep: . src/sleep/bridges src/sleep/engine
	src/sleep/engine/atoms src/sleep/parser src/sleep/runtime
	tests tests/output
Message-ID: <200703160201.l2G21cc7009646@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-16 03:01:34 +0100 (Fri, 16 Mar 2007)
New Revision: 217

Added:
   sleep/src/sleep/engine/atoms/PopTry.java
   sleep/src/sleep/engine/atoms/Try.java
   sleep/tests/output/tcatch.sl
   sleep/tests/output/tcatch2.sl
   sleep/tests/tcatch.sl
   sleep/tests/tcatch2.sl
Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/GeneratedSteps.java
   sleep/src/sleep/engine/Step.java
   sleep/src/sleep/engine/atoms/Call.java
   sleep/src/sleep/engine/atoms/ObjectAccess.java
   sleep/src/sleep/engine/atoms/ObjectNew.java
   sleep/src/sleep/engine/atoms/PLiteral.java
   sleep/src/sleep/parser/Checkers.java
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/src/sleep/parser/ParserConstants.java
   sleep/src/sleep/parser/TokenParser.java
   sleep/src/sleep/runtime/ScriptEnvironment.java
   sleep/src/sleep/runtime/ScriptInstance.java
   sleep/tests/output/forker.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/wrong.sl
   sleep/tests/sync.sl
   sleep/whatsnew.txt
Log:
halfway to having exception handling in Sleep... dun dun dun.



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/build.xml	2007-03-16 02:01:34 UTC (rev 217)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -104,6 +104,7 @@
 
         temp.put("&debug", this);
         temp.put("&profile", this);
+        temp.put("&getStackTrace", this);
 
         temp.put("&reverse",  new reverse());      // @array2 = &reverse(@array) 
         temp.put("&removeAt", new removeAt());   // not safe within foreach loops yada yada yada...
@@ -801,6 +802,10 @@
        {
           return SleepUtils.getArrayWrapper(i.getProfilerStatistics());
        }
+       else if (n.equals("&getStackTrace"))
+       {
+          return SleepUtils.getArrayWrapper(i.getStackTrace());
+       }
        else if (n.equals("&debug"))
        {
           /* allow the script to programatically set the debug level */

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/Block.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -176,6 +176,16 @@
         return evaluate(environment, first);
     }
 
+    /** handle an exception raised by a script / java object */
+    private void handleException(ScriptEnvironment environment)
+    {
+        if (environment.isResponsible(this))
+        {
+           Block doit = environment.getExceptionHandler();
+           doit.evaluate(environment);
+        }
+    }
+
     /** evaluates this block of code.  please note that if the block has a return statement and the method clearReturn() is not 
         called on the corresponding script environment chaos will ensue.  use SleepUtils.runCode() to safely execute a block of
         code.  don't call this method yourself.  okay? */
@@ -183,6 +193,13 @@
     {
         if (environment.isReturn())
         {
+           if (environment.isThrownValue())
+           {
+              environment.pushSource(source); /* may not be necessary, but then again, maybe they are... used for stack traces */
+              handleException(environment);
+              environment.popSource();
+           }
+
            return environment.getReturnValue();
         }
 
@@ -245,6 +262,13 @@
                  environment.getScriptInstance().fireWarning(environment.getDebugString(), temp.getLineNumber());
                  /** get debug string clears the debug interrupt! */
               }
+              else if (environment.isThrownValue())
+              {
+                 handleException(environment);
+                 environment.popSource();
+                 return environment.getReturnValue(); /* we do this because the exception will get cleared and after that
+                                                         there may be a return value */
+              }
               else
               {
                  environment.popSource();

Modified: sleep/src/sleep/engine/GeneratedSteps.java
===================================================================
--- sleep/src/sleep/engine/GeneratedSteps.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/GeneratedSteps.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -28,6 +28,18 @@
 /** A class providing static methods for constructing an atomic step of a specific type */
 public class GeneratedSteps
 {
+    public static Step PopTry()
+    {
+       Step temp = new PopTry();
+       return temp;
+    }
+ 
+    public static Step Try(Block owner, Block handler, String var)
+    {
+       Step temp = new Try(owner, handler, var);
+       return temp;
+    }
+
     public static Step Operate(String oper)
     {
        Step temp = new Operate(oper);
@@ -46,12 +58,6 @@
        return temp;
     }
 
-    public static Step NullOperation()
-    {
-       Step temp = new Step();
-       return temp;
-    }
-
     public static Step IteratorCreate(String key, String value)
     {
        return new Iterate(key, value, Iterate.ITERATOR_CREATE);

Modified: sleep/src/sleep/engine/Step.java
===================================================================
--- sleep/src/sleep/engine/Step.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/Step.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -30,7 +30,7 @@
 </pre> */
 
 
-public class Step implements Serializable
+public abstract class Step implements Serializable
 {
    /** the script line number that this step was generated from */
    protected int  line;
@@ -43,7 +43,7 @@
    {
       return prefix+toString();
    }
-
+ 
    /** convience method for the code generator to set the line number. */
    public void setInfo(int _line)
    {

Modified: sleep/src/sleep/engine/atoms/Call.java
===================================================================
--- sleep/src/sleep/engine/atoms/Call.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/Call.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -70,6 +70,7 @@
              {
                 String args = SleepUtils.describe(e.getCurrentFrame());
 
+                String message = function + "(" + args + ")";
                 try
                 {
                    long stat = System.currentTimeMillis();
@@ -80,16 +81,17 @@
                 
                    if (SleepUtils.isEmptyScalar(temp))
                    {
-                      e.getScriptInstance().fireWarning(function + "(" + args + ")", getLineNumber(), true);
+                      e.getScriptInstance().fireWarning(message, getLineNumber(), true);
                    }
                    else
                    {
-                      e.getScriptInstance().fireWarning(function + "(" + args + ") = " + SleepUtils.describe(temp), getLineNumber(), true);
+                      e.getScriptInstance().fireWarning(message + " = " + SleepUtils.describe(temp), getLineNumber(), true);
                    }
                 }
                 catch (RuntimeException rex)
                 {
-                   e.getScriptInstance().fireWarning(function + "(" + args + ") - FAILED!", getLineNumber(), true);
+                   // add an e.killFrame() ?!?
+                   e.getScriptInstance().fireWarning(message + " - FAILED!", getLineNumber(), true);
                    throw(rex);
                 }
              }

Modified: sleep/src/sleep/engine/atoms/ObjectAccess.java
===================================================================
--- sleep/src/sleep/engine/atoms/ObjectAccess.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/ObjectAccess.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -142,6 +142,7 @@
                }
                catch (RuntimeException rex)
                {
+                  /** execute a kill frame here?!? */
                   trace.append(" - FAILED!");
                   e.getScriptInstance().fireWarning(trace.toString(), getLineNumber(), true); 
                   throw(rex);
@@ -207,8 +208,6 @@
 
                   parameters = ObjectUtilities.buildArgumentArray(theMethod.getParameterTypes(), e.getCurrentFrame(), e.getScriptInstance());
 
-                  long stat = System.currentTimeMillis();
-
                   /* construct the actual trace message */
 
                   StringBuffer trace = new StringBuffer("[");
@@ -224,8 +223,8 @@
 
                   try
                   {
+                     long stat = System.currentTimeMillis();
                      result = ObjectUtilities.BuildScalar(true, theMethod.invoke(accessMe, parameters));
-
                      stat = System.currentTimeMillis() - stat;
                      e.getScriptInstance().collect(theMethod.toString(), getLineNumber(), stat);
 

Modified: sleep/src/sleep/engine/atoms/ObjectNew.java
===================================================================
--- sleep/src/sleep/engine/atoms/ObjectNew.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/ObjectNew.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -87,8 +87,6 @@
                else
                {
                   String args = SleepUtils.describe(e.getCurrentFrame());
-
-                  long stat = System.currentTimeMillis();
                   parameters = ObjectUtilities.buildArgumentArray(theConstructor.getParameterTypes(), e.getCurrentFrame(), e.getScriptInstance());
  
                   StringBuffer trace = new StringBuffer("[new " + name.getName());
@@ -102,6 +100,7 @@
 
                   try
                   {
+                     long stat = System.currentTimeMillis();
                      result = ObjectUtilities.BuildScalar(false, theConstructor.newInstance(parameters));
 
                      stat = System.currentTimeMillis() - stat;

Modified: sleep/src/sleep/engine/atoms/PLiteral.java
===================================================================
--- sleep/src/sleep/engine/atoms/PLiteral.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/PLiteral.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -26,14 +26,14 @@
          switch (f.type)
          {
             case STRING_FRAGMENT:
-              temp.append("   [Element]: " + f.element + "\n");
+              temp.append(prefix + "   [Element]: " + f.element + "\n");
               break;
             case ALIGN_FRAGMENT:
-              temp.append("   [Align Next Value]\n");
+              temp.append(prefix + "   [Align Next Value]\n");
               temp.append(((Block)f.element).toString(prefix+"      ")); 
               break;
             case VAR_FRAGMENT:
-              temp.append("   [Access Variable]\n");
+              temp.append(prefix + "   [Access Variable]\n");
               temp.append(((Block)f.element).toString(prefix+"      ")); 
               break;
          }

Added: sleep/src/sleep/engine/atoms/PopTry.java
===================================================================
--- sleep/src/sleep/engine/atoms/PopTry.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/PopTry.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,27 @@
+package sleep.engine.atoms;
+
+import java.util.*;
+import sleep.interfaces.*;
+import sleep.engine.*;
+import sleep.runtime.*;
+
+public class PopTry extends Step
+{
+   public PopTry ()
+   {
+   }
+
+   public String toString(String prefix)
+   {
+      return prefix + "[Pop Try]\n";
+   }
+
+   public Scalar evaluate(ScriptEnvironment e)
+   {
+      e.popExceptionContext();
+      return null;
+   }
+}
+
+
+

Added: sleep/src/sleep/engine/atoms/Try.java
===================================================================
--- sleep/src/sleep/engine/atoms/Try.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/engine/atoms/Try.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,40 @@
+package sleep.engine.atoms;
+
+import java.util.*;
+import sleep.interfaces.*;
+import sleep.engine.*;
+import sleep.runtime.*;
+
+public class Try extends Step
+{
+   Block owner, handler;
+   String var;
+
+   public Try (Block _owner, Block _handler, String _var)
+   {
+      owner   = _owner;
+      handler = _handler;
+      var     = _var;
+   }
+
+   public String toString(String prefix)
+   {
+      StringBuffer buffer = new StringBuffer();
+      buffer.append(prefix);
+      buffer.append("[Try]\n");
+      buffer.append(owner.toString(prefix + "   "));
+      buffer.append(prefix);
+      buffer.append("[Catch]: " + var + "\n");
+      buffer.append(handler.toString(prefix + "   "));
+      return buffer.toString();
+   }
+
+   public Scalar evaluate(ScriptEnvironment e)
+   {
+      e.installExceptionHandler(owner, handler, var);
+      return owner.evaluate(e);
+   }
+}
+
+
+

Modified: sleep/src/sleep/parser/Checkers.java
===================================================================
--- sleep/src/sleep/parser/Checkers.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/parser/Checkers.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -57,6 +57,9 @@
       keywords.put("break",    Boolean.TRUE);
       keywords.put("continue", Boolean.TRUE);
       keywords.put("yield",    Boolean.TRUE);
+      keywords.put("throw",    Boolean.TRUE);
+      keywords.put("try",      Boolean.TRUE);
+      keywords.put("catch",    Boolean.TRUE);
    }
 
    public static boolean isIfStatement(String a, String b, String c)
@@ -226,6 +229,11 @@
        return (a.equals("for") && isExpression(b) && isBlock(c));
    }
 
+   public static final boolean isTryCatch (String a, String b, String c, String d, String e)
+   {
+       return a.equals("try") && c.equals("catch") && isBlock(b) && isBlock(e) && isScalar(d);
+   }
+  
    public static final boolean isForeach (String a, String b, String c, String d)
    {
        return (a.equals("foreach") && isVariable(b) && isExpression(c) && isBlock(d));
@@ -240,7 +248,7 @@
    {
        // halt and done are kind of jIRC related... when you write the scripting language you
        // can do whatever you want...
-       return  (temp.equals("return") || temp.equals("done") || temp.equals("halt") || temp.equals("break") || temp.equals("yield") || temp.equals("continue"));
+       return  (temp.equals("return") || temp.equals("done") || temp.equals("halt") || temp.equals("break") || temp.equals("yield") || temp.equals("continue") || temp.equals("throw"));
    }
 
    public static final boolean isString (String item)

Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/parser/CodeGenerator.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -697,6 +697,39 @@
            atom = GeneratedSteps.Bind(strings[0], nameBlock, restore());
            add(atom, tokens[0]);
            break; 
+         case EXPR_TRYCATCH: 
+           //
+           // [TRYCATCH]: try | BLOCK | catch | VAR | BLOCK
+           // 
+
+           // now parse the code we want to try as if nothing special ever occured.
+           backup();
+
+              /* do the normal version of this, the code we want to "try" */
+           parseBlock(ParserUtilities.extract(tokens[1]));
+
+              /* pop the handler */
+           atom = GeneratedSteps.PopTry();
+           add(atom, tokens[4]);
+
+           a = restore();
+
+           // setup the thrown value handler and the stuff to install it...
+           backup();
+
+              /* pop the handler [ensure this happens first thing in our handler block] */
+           atom = GeneratedSteps.PopTry();
+           add(atom, tokens[4]);
+
+              /* parse the handler */
+           parseBlock(ParserUtilities.extract(tokens[4]));
+
+           b = restore();
+
+           // add this try/catch bits to the current block
+           atom = GeneratedSteps.Try(a, b, strings[3]);
+           add(atom, tokens[0]);
+           break;
          case EXPR_BLOCK:  // implemented
            parseBlock(ParserUtilities.extract(tokens[0]));
            break;
@@ -1073,6 +1106,11 @@
               atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_CONTINUE);
               add(atom, tokens[0]);
            }
+           else if (strings[0].equals("throw"))
+           {
+              atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_THROW);
+              add(atom, tokens[0]);
+           }
            else if (strings[0].equals("yield"))
            {
               atom = GeneratedSteps.Return(ScriptEnvironment.FLOW_CONTROL_YIELD);

Modified: sleep/src/sleep/parser/ParserConstants.java
===================================================================
--- sleep/src/sleep/parser/ParserConstants.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/parser/ParserConstants.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -14,13 +14,13 @@
    public static final int EXPR_FOREACH         = 400;
    public static final int EXPR_FOR             = 401;
    public static final int EXPR_FOREACH_SPECIAL = 402;
+   public static final int EXPR_TRYCATCH	= 403;
    public static final int EXPR_RETURN          = 500;
    public static final int EXPR_BREAK           = 501;
    public static final int EXPR_BIND            = 502;
    public static final int EXPR_ESCAPE          = 503;
    public static final int EXPR_BIND_PRED       = 504;
    public static final int EXPR_BIND_FILTER     = 505;
-
    public static final int EXPR_EVAL_STRING     = 506; // used for `backtick` strings that do something cool :)
  
    public static final int IDEA_EXPR            = 601;

Modified: sleep/src/sleep/parser/TokenParser.java
===================================================================
--- sleep/src/sleep/parser/TokenParser.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/parser/TokenParser.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -468,7 +468,6 @@
       Statement myToken;
       int check;
 
-
       for (int x = 0; x < tokens.length; x++)
       {
     	 myToken = new Statement();
@@ -485,6 +484,16 @@
             myToken.add(tokens[x+5]);
             x += 5;
          }
+         else if ((x + 4) < tokens.length && Checkers.isTryCatch(strings[x], strings[x+1], strings[x+2], strings[x+3], strings[x+4]))
+         {
+            myToken.setType(EXPR_TRYCATCH);
+            myToken.add(tokens[x]); 
+            myToken.add(tokens[x+1]);
+            myToken.add(tokens[x+2]);
+            myToken.add(tokens[x+3]);
+            myToken.add(tokens[x+4]);
+            x += 4;
+         }
          else if ((x + 3) < tokens.length && Checkers.isSpecialWhile(strings[x], strings[x+1], strings[x+2], strings[x+3]))
          {
             myToken.setType(EXPR_WHILE_SPECIAL);
@@ -627,6 +636,10 @@
             myToken.setType(IDEA_EXPR_I);
             myToken.add(tokens[x]);
          }
+         else if (strings[x].equals("EOT")) /* do this before the binding stuff to prevent problems, k */
+         {
+            // do nothing.
+         }
          // a bind predicate structure
          else if ((x + 2) < tokens.length && Checkers.isBindPredicate(strings[x], strings[x+1], strings[x+2]))
          {
@@ -675,10 +688,6 @@
             myToken.setType(IDEA_FUNC);
             myToken.add(tokens[x]);
          }
-         else if (strings[x].equals("EOT"))
-         {
-            // do nothing.
-         }
          // a bind filter structure
          else if ((x + 3) < tokens.length && Checkers.isBindFilter(strings[x], strings[x+1], strings[x+2], strings[x+3]))
          {

Modified: sleep/src/sleep/runtime/ScriptEnvironment.java
===================================================================
--- sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -216,8 +216,9 @@
     
     protected static class Context implements Serializable
     {
-       public Block block;
-       public Step  last;       
+       public Block            block;
+       public Step             last;       
+       public ExceptionContext handler;
     }
 
     protected Stack    context      = new Stack();
@@ -273,6 +274,12 @@
        Context temp = new Context();
        temp.block = b;
        temp.last  = s;
+
+       if (isResponsible(b))
+       {
+          temp.handler = popExceptionContext();
+       }
+
        context.add(temp);
     }
 
@@ -287,6 +294,10 @@
        while (i.hasNext())
        {
           Context temp = (Context)i.next();
+
+          if (temp.handler != null)
+              installExceptionHandler(temp.handler);
+
           rv = temp.block.evaluate(this, temp.last);
 
           if (isReturn() && getFlowControlRequest() == FLOW_CONTROL_YIELD)
@@ -310,12 +321,89 @@
 
        return cstack;
     }
+ 
+    //
+    // ******** Exception Management **********
+    //
 
+    protected static class ExceptionContext implements Serializable
+    {
+       public Block  owner;
+       public String varname;
+       public Block  handler;
+    }
+
+    protected ExceptionContext currentHandler = null;
+    protected Stack            exhandlers     = new Stack(); /* exception handlers */
+
+    public boolean isExceptionHandlerInstalled()
+    {
+       return currentHandler != null;
+    }
+
+    public boolean isResponsible(Block block)
+    {
+       return currentHandler != null && currentHandler.owner == block;
+    }
+
+    public void installExceptionHandler(ExceptionContext exc)
+    {
+       if (currentHandler != null)
+          exhandlers.push(currentHandler);
+
+       currentHandler = exc;
+    }
+
+    public void installExceptionHandler(Block owner, Block handler, String varname)
+    {
+       ExceptionContext c = new ExceptionContext();
+       c.owner   = owner;
+       c.handler = handler;
+       c.varname = varname;
+
+       installExceptionHandler(c);
+    }
+
+    /** if there is no handler, we'll just get the message which will clear the thrown message as well */
+    public Scalar getExceptionMessage()
+    {
+       request     &= ~FLOW_CONTROL_THROW;       
+       Scalar temp  = rv;
+       rv           = null;
+       return temp;
+    }
+
+    /** preps and returns the current exception handler... */
+    public Block getExceptionHandler()
+    {
+       request     &= ~FLOW_CONTROL_THROW;       
+       Block  doit  = currentHandler.handler;
+       putScalar(currentHandler.varname, rv);
+       rv           = null;
+       return doit;
+    }
+
+    public ExceptionContext popExceptionContext()
+    {
+       ExceptionContext old = currentHandler;
+
+       if (exhandlers.isEmpty())
+       {
+          currentHandler = null;
+       }
+       else
+       {
+          currentHandler = (ExceptionContext)exhandlers.pop();
+       }
+
+       return old;
+    }
+
     //
     // ******** Flow Control **********
     //
 
-    /** currently no flow contrl change has been requested */
+    /** currently no flow control change has been requested */
     public static final int FLOW_CONTROL_NONE     = 0;
 
     /** request a return from the current function */
@@ -325,19 +413,29 @@
     public static final int FLOW_CONTROL_BREAK    = 2;
 
     /** adding a continue keyword as people keep demanding it */
-    public static final int FLOW_CONTROL_CONTINUE = 3;
+    public static final int FLOW_CONTROL_CONTINUE = 4;
 
     /** adding a yield keyword */
-    public static final int FLOW_CONTROL_YIELD    = 4;
+    public static final int FLOW_CONTROL_YIELD    = 8;
 
-    protected boolean isDebugInterrupt  = false;
+    /** adding a throw keyword -- sleep is now useable :) */
+    public static final int FLOW_CONTROL_THROW    = 16;
+
+    /** a special case for debugs and such */ 
+    public static final int FLOW_CONTROL_DEBUG    = 32;
+ 
     protected String  debugString       = "";
     protected Scalar rv      = null;
     protected int    request = 0;
 
+    public boolean isThrownValue()
+    {
+       return (request & FLOW_CONTROL_THROW) == FLOW_CONTROL_THROW;
+    }
+
     public boolean isDebugInterrupt()
     {
-       return isDebugInterrupt;
+       return (request & FLOW_CONTROL_DEBUG) == FLOW_CONTROL_DEBUG;
     }
 
     public Scalar getReturnValue()
@@ -347,7 +445,7 @@
 
     public boolean isReturn()
     {
-       return request != FLOW_CONTROL_NONE || isDebugInterrupt;
+       return request != FLOW_CONTROL_NONE;
     }
 
     public int getFlowControlRequest()
@@ -357,14 +455,14 @@
 
     public String getDebugString()
     {
-       isDebugInterrupt = false;
+       request &= ~FLOW_CONTROL_DEBUG;
        return debugString;
     }
 
     /** fires this debug message via a runtime warning complete with line number of current step */
     public void showDebugMessage(String message)
     {
-       isDebugInterrupt = true;
+       request |= FLOW_CONTROL_DEBUG;
        debugString = message;
     }
 
@@ -377,8 +475,10 @@
 
     public void clearReturn()
     {
-       request = FLOW_CONTROL_NONE;
-       rv      = null;
+       request = FLOW_CONTROL_NONE | (request & (FLOW_CONTROL_THROW | FLOW_CONTROL_DEBUG));
+
+       if (!isThrownValue())
+           rv      = null;
     }
 
     /** how many stacks does this damned class include? */

Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2007-03-16 02:01:34 UTC (rev 217)
@@ -84,8 +84,12 @@
 
     /** forces function call tracing to occur (for the sake of profiling a script) but supresses
         all runtime warnings as a result of the tracing */
-    public static final int DEBUG_TRACE_PROFILE_ONLY  = 8 | 16;
+    public static final int DEBUG_TRACE_PROFILE_ONLY = 8 | 16;
 
+    /** users shouldn't need to flag this, it is just a general method of saying we're suppressing
+        trace messages... */
+    protected static final int DEBUG_TRACE_SUPPRESS = 16;
+
     /** track all of the flagged debug options for this script (set to DEBUG_SHOW_ERRORS by default) */
     protected int debug = DEBUG_SHOW_ERRORS;
 
@@ -185,8 +189,64 @@
         return temp;
     }
  
+    /** A container for Sleep strack trace elements. */
+    public static class SleepStackElement implements Serializable
+    {
+        public String sourcefile;
+        public String description;
+        public int    lineNumber;
+
+        public String toString()
+        {
+           return "   " + (new File(sourcefile).getName()) + ":" + lineNumber + " " + description;
+        }
+    }
+ 
+    /** Records a stack frame into this environments stack trace tracker thingie. */
+    public void recordStackFrame(String description, int lineNumber)
+    {
+       if (description == null) return;
+
+       List strace = (List)getScriptEnvironment().getEnvironment().get("%strace%");
+
+       if (strace == null) 
+       {
+          strace = new LinkedList();
+          getScriptEnvironment().getEnvironment().put("%strace%", strace);
+       }
+
+       SleepStackElement stat = new SleepStackElement();
+       stat.sourcefile  = getScriptEnvironment().getCurrentSource();
+       stat.description = description;
+       stat.lineNumber  = lineNumber;
+
+       strace.add(0, stat);
+    }
+
+    /** Removes the top element of the stack trace */
+    public void popStackFrame()
+    {
+       List strace = (List)getScriptEnvironment().getEnvironment().get("%strace%");
+       if (strace != null) 
+       {
+          strace.clear();
+       }
+    }
+
+    /** Returns the last stack trace.  Each element of the list is a ScriptInstance.SleepStackElement object.  
+        First element is the top of the trace, last element is the origin of the trace. */
+    public List getStackTrace()
+    {
+       List strace = (List)getScriptEnvironment().getEnvironment().get("%strace%");
+       if (strace == null)
+       {
+          strace = new LinkedList();
+       }
+       return strace;
+    }
+
     /** A container for a profile statistic about a sleep function */
-    public static class ProfilerStatistic implements Comparable
+    public static class ProfilerStatistic implements Comparable, Serializable
     {
         /** the name of the function call */
         public String functionName;
@@ -363,7 +423,7 @@
     /** Fire a runtime script warning */
     public void fireWarning(String message, int line, boolean isTrace)
     {
-       if (debug != DEBUG_NONE && (!isTrace || (getDebugFlags() & DEBUG_TRACE_PROFILE_ONLY) != DEBUG_TRACE_PROFILE_ONLY))
+       if (debug != DEBUG_NONE && (!isTrace || (getDebugFlags() & DEBUG_TRACE_SUPPRESS) != DEBUG_TRACE_SUPPRESS))
        {
           ScriptWarning temp = new ScriptWarning(this, message, line, isTrace);
 

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/output/forker.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -1,3 +1,3 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 8b8914 at forker.sl:8
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 608760 at forker.sl:8
 Trace: &check('outside of fork') at forker.sl:12

Added: sleep/tests/output/tcatch.sl
===================================================================
--- sleep/tests/output/tcatch.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/output/tcatch.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,5 @@
+uNF... basic cas3 baby!@%
+nothing wrong here, I promise!@#
+In the sluts() function...
+An exception was thrown... hehe... from bar baby!@#$
+The beat does go on...

Added: sleep/tests/output/tcatch2.sl
===================================================================
--- sleep/tests/output/tcatch2.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/output/tcatch2.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,18 @@
+Outside of try block.
+foo(): $c is &closure[tcatch2.sl:8]#3
+1. Caught: this is being thrown because I can!!! - locals are visible (as they should be)
+Post try block
+Outside of try block.
+foo(): $c is &closure[tcatch2.sl:8]#5
+1. Caught: this is being thrown because I can!!! - locals are visible (as they should be)
+0. Caught: this is being thrown because I can!!!
+Outside of try block.
+--- a. checkpoint 1
+--- b. pre foo
+foo(): $c is &closure[tcatch2.sl:8]#7
+....
+--- d. in exception block: this is being thrown because I can!!!
+1. Caught: this is being thrown because I can!!! - 
+--- e. pre throw :)
+--- g. outermost catch block
+0. Caught: this is being thrown because I can!!!

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/output/trace.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at a23610 println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 9ea96 println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at a23610 println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 9ea96 println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at a23610 println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 9ea96 println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/output/wrong.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at 8e8541 println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at 6a3960 println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at 8e8541 println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at 6a3960 println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at 8e8541 println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at 6a3960 println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at 8e8541 println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at 6a3960 println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at 8e8541 println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at 6a3960 println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at 8e8541 println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at 6a3960 println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at 8e8541 println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at 6a3960 println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at 8e8541 println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at 6a3960 println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at 8e8541 println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at 6a3960 println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at 8e8541 println: test] at wrong.sl:31
-Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at cc5069 at wrong.sl:34
+Trace: [java.io.PrintStream at 6a3960 println: test] at wrong.sl:31
+Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 502819 at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at 8e8541 println: [C at cc5069] at wrong.sl:34
+Trace: [java.io.PrintStream at 6a3960 println: [C at 502819] at wrong.sl:34

Modified: sleep/tests/sync.sl
===================================================================
--- sleep/tests/sync.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/sync.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -4,9 +4,11 @@
 
 $mutex = semaphore();
 
+acquire($mutex);
+
 $handle = fork({
+  [Thread yield];
 
-  acquire($mutex);
   for ($x = 0; $x < 10; $x++)
   {
      println("fork: $x");

Added: sleep/tests/tcatch.sl
===================================================================
--- sleep/tests/tcatch.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/tcatch.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,39 @@
+#
+#
+#
+debug(24);
+println("uNF... basic cas3 baby!@%");
+
+sub foo
+{
+   $x = 1 + 2;
+   println("In the sluts() function...");
+   if ($x == 3)
+   {
+      bar();
+   }
+   println("more stuff...");
+}
+
+sub bar
+{
+   $x = 3 + 4;
+   throw "hehe... from bar baby!@#$";
+   println("Bar stuff wheee...");
+}
+
+try
+{
+   $xyz = "nothing wrong here, I promise!@#";
+   println($xyz);
+   $mmm = { foo(); };
+   [$mmm test: "this is a HOES call"];
+   println("More after foo");
+}
+catch $exception
+{
+   println("An exception was thrown... $exception");
+   printAll(getStackTrace()); # will return something...
+}
+
+println("The beat does go on...");

Added: sleep/tests/tcatch2.sl
===================================================================
--- sleep/tests/tcatch2.sl	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/tests/tcatch2.sl	2007-03-16 02:01:34 UTC (rev 217)
@@ -0,0 +1,117 @@
+#
+# some cases with try/catch, its fun, I promise...
+#
+sub foo
+{
+   local('$c');
+   $c = {
+      throw "this is being thrown because I can!!!";
+   };
+   println("foo(): \$c is $c");
+   [$c];
+   println("Never reached (in theory)");
+}
+
+#
+# test normal case, please...
+#
+sub bar
+{
+   local('$lvar');
+   $lvar = "locals are visible (as they should be)";
+
+   try
+   {
+      println("Outside of try block.");
+
+      try
+      {
+         foo(); 
+      }
+      catch $ex1
+      {
+         println("1. Caught: $ex1 - $lvar");
+      }
+
+      println("Post try block");
+   }
+   catch $exception
+   {
+      println("0. Caught: $exception");
+   }
+}
+
+bar();
+
+#
+# test the rethrowing of an exception...
+#
+sub fee
+{
+   local('$lvar');
+   $lvar = "locals are visible (as they should be)";
+
+   try
+   {
+      println("Outside of try block.");
+
+      try
+      {
+         foo(); 
+      }
+      catch $ex1
+      {
+         println("1. Caught: $ex1 - $lvar");
+         throw $ex1;
+      }
+
+      println("Post try block");
+   }
+   catch $exception
+   {
+      println("0. Caught: $exception");
+   }
+}
+
+fee();
+
+#
+# test coroutines and exceptions
+#
+sub bee
+{
+   try
+   {
+      println("Outside of try block.");
+
+      yield "a. checkpoint 1";
+
+      try
+      {
+         yield "b. pre foo";
+         foo(); 
+         yield "c. post foo";
+      }
+      catch $ex1
+      {
+         println("....");
+         yield "d. in exception block: $ex1";
+         println("1. Caught: $ex1 - $lvar");
+         yield "e. pre throw :)";
+         throw $ex1;
+      }
+
+      yield "f. post catch block";
+      println("Post try block");
+   }
+   catch $exception
+   {
+      yield "g. outermost catch block";
+      println("0. Caught: $exception");
+   }
+}
+
+while $test (bee())
+{
+   println("--- $test");
+}

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-12 00:38:57 UTC (rev 216)
+++ sleep/whatsnew.txt	2007-03-16 02:01:34 UTC (rev 217)
@@ -1,3 +1,6 @@
+2.1-beta 13
+===========
+
 2.1-beta 12  (11 Mar 07)
 ===========
 - fixed yet another flurry of line number skew issues.  argh, make it stop!



From rsmudge at mail.berlios.de  Sat Mar 17 05:40:01 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 05:40:01 +0100
Subject: [Sleep-svn] r219 - in sleep: . src/sleep/bridges src/sleep/engine
	src/sleep/engine/atoms src/sleep/runtime tests tests/output
Message-ID: <200703170440.l2H4e1CS014002@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 05:40:00 +0100 (Sat, 17 Mar 2007)
New Revision: 219

Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/Block.java
   sleep/src/sleep/engine/atoms/Return.java
   sleep/src/sleep/runtime/ScriptEnvironment.java
   sleep/src/sleep/runtime/ScriptInstance.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/tcatch2.sl
   sleep/tests/tcatch2.sl
   sleep/whatsnew.txt
Log:
its a hack but now the try/catch stuff should work with coroutines without a problem.



Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -1224,7 +1224,7 @@
           catch (Exception ex)
           {
              a.close();
-             i.getScriptEnvironment().flagError(ex.toString());
+             i.getScriptEnvironment().flagError(ex);
           }
 
           return SleepUtils.getEmptyScalar();
@@ -1258,7 +1258,7 @@
              catch (Exception ex)
              {
                 a.close();
-                i.getScriptEnvironment().flagError(ex.toString());
+                i.getScriptEnvironment().flagError(ex);
 
                 ex.printStackTrace();
              }
@@ -1308,7 +1308,7 @@
              catch (Exception ex)
              {
                 a.close();
-                i.getScriptEnvironment().flagError(ex.toString());
+                i.getScriptEnvironment().flagError(ex);
              }
 
              if (read > 0)
@@ -1406,7 +1406,7 @@
                 }
 
                 source.close();
-                script.getScriptEnvironment().flagError(ex.toString());
+                script.getScriptEnvironment().flagError(ex);
              }
           }
        }

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -95,6 +95,8 @@
         temp.put("-ishash",  this); 
         temp.put("-isfunction", this);
         temp.put("&setField", this);
+
+        temp.put("&exit", this);
      
         SetScope scopeFunctions = new SetScope();
 
@@ -665,7 +667,7 @@
           }
           catch (YourCodeSucksException ex)
           {
-             i.getScriptEnvironment().flagError(ex.getMessage());
+             i.getScriptEnvironment().flagError(ex);
              return SleepUtils.getEmptyScalar();
           }
        }
@@ -694,7 +696,7 @@
           }
           catch (YourCodeSucksException ex)
           {
-             i.getScriptEnvironment().flagError(ex.getMessage());
+             i.getScriptEnvironment().flagError(ex);
              return SleepUtils.getEmptyScalar();
           }
        }
@@ -713,7 +715,7 @@
           }
           catch (YourCodeSucksException ex)
           {
-             i.getScriptEnvironment().flagError(ex.getMessage());
+             i.getScriptEnvironment().flagError(ex);
              return SleepUtils.getEmptyScalar();
           }
        }
@@ -1045,6 +1047,10 @@
              return temp;
           }
        }
+       else if (n.equals("&exit"))
+       {
+          i.getScriptEnvironment().flagReturn(null, ScriptEnvironment.FLOW_CONTROL_THROW); /* a null throw will exit the interpreter */
+       }
        else if (n.equals("&setField"))
        {
           // setField(class/object, "field", "value")

Modified: sleep/src/sleep/engine/Block.java
===================================================================
--- sleep/src/sleep/engine/Block.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/engine/Block.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -270,9 +270,13 @@
                     /* if no handler is installed we will fire a warning and then flag a return of $null so at least the
                        current function fails for not installing a handler */
 
-                    environment.getScriptInstance().fireWarning("Uncaught exception: " + environment.getExceptionMessage(), temp.getLineNumber());
-                    environment.getScriptInstance().clearStackTrace();
-                    environment.flagReturn(null, ScriptEnvironment.FLOW_CONTROL_RETURN); 
+                    if (!SleepUtils.isEmptyScalar(environment.getReturnValue()))
+                    {
+                       environment.getScriptInstance().fireWarning("Uncaught exception: " + environment.getExceptionMessage(), temp.getLineNumber());
+
+                       /* the empty throw will cause the current script environment to essentially "exit" */
+                       environment.flagReturn(null, ScriptEnvironment.FLOW_CONTROL_THROW);
+                    }
                  }
                  else
                  {

Modified: sleep/src/sleep/engine/atoms/Return.java
===================================================================
--- sleep/src/sleep/engine/atoms/Return.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/engine/atoms/Return.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -46,8 +46,13 @@
    {
       if (return_type == ScriptEnvironment.FLOW_CONTROL_THROW)
       {
-         e.getScriptInstance().recordStackFrame("<origin of exception>", getLineNumber());
-         e.flagReturn((Scalar)e.getCurrentFrame().pop(), ScriptEnvironment.FLOW_CONTROL_THROW);
+         Scalar temp = (Scalar)e.getCurrentFrame().pop();
+         if (!SleepUtils.isEmptyScalar(temp))
+         {
+            e.getScriptInstance().clearStackTrace();
+            e.getScriptInstance().recordStackFrame("<origin of exception>", getLineNumber());
+            e.flagReturn(temp, ScriptEnvironment.FLOW_CONTROL_THROW);
+         }
       }
       else if (return_type == ScriptEnvironment.FLOW_CONTROL_BREAK)
       {

Modified: sleep/src/sleep/runtime/ScriptEnvironment.java
===================================================================
--- sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -226,6 +226,7 @@
        public Block            block;
        public Step             last;       
        public ExceptionContext handler;
+       public boolean          moreHandlers;
     }
 
     protected Stack    context      = new Stack();
@@ -285,7 +286,18 @@
        if (isResponsible(b))
        {
           temp.handler = popExceptionContext();
+          Iterator i = context.iterator();
+          while (i.hasNext())
+          {  /* semi inefficient but there should be so few handlers per context this shouldn't be much of an issue */
+             Context c = (Context)i.next();
+             c.moreHandlers = true;
+          }
        }
+       else
+       {
+          temp.moreHandlers = moreHandlers; /* if a context is already executing then it will know better than we do
+                                               wether there are more handlers in the current context or not */
+       }
 
        context.add(temp);
     }
@@ -305,6 +317,8 @@
           if (temp.handler != null)
               installExceptionHandler(temp.handler);
 
+          moreHandlers = temp.moreHandlers;
+
           rv = temp.block.evaluate(this, temp.last);
 
           if (isReturn() && getFlowControlRequest() == FLOW_CONTROL_YIELD)
@@ -316,6 +330,7 @@
           }
        }
 
+       moreHandlers = false;
        return rv;
     }
 
@@ -342,10 +357,11 @@
 
     protected ExceptionContext currentHandler = null;
     protected Stack            exhandlers     = new Stack(); /* exception handlers */
+    protected boolean          moreHandlers   = false;
 
     public boolean isExceptionHandlerInstalled()
     {
-       return currentHandler != null;
+       return currentHandler != null || moreHandlers;
     }
 
     public boolean isResponsible(Block block)
@@ -480,6 +496,16 @@
        request = type_of_flow;
     }
 
+    /** Resets the script environment to include clearing the return of all flags (including thrown exceptions) */
+    public void resetEnvironment()
+    {
+       errorMessage = null;
+       request = FLOW_CONTROL_NONE;
+       rv      = null;
+       getScriptInstance().clearStackTrace(); /* no one else is going to use it, right?!? */
+    }
+
+    /** Clears the return value from the last executed function. */
     public void clearReturn()
     {
        request = FLOW_CONTROL_NONE | (request & (FLOW_CONTROL_THROW | FLOW_CONTROL_DEBUG));

Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -235,10 +235,12 @@
     }
 
     /** Returns the last stack trace.  Each element of the list is a ScriptInstance.SleepStackElement object.  
-        First element is the top of the trace, last element is the origin of the trace. */
+        First element is the top of the trace, last element is the origin of the trace.  This function also
+        clears the stack trace. */
     public List getStackTrace()
     {
        List strace = (List)getScriptEnvironment().getEnvironment().get("%strace%");
+       clearStackTrace(); /* clear the old stack trace */
        if (strace == null)
        {
           strace = new LinkedList();
@@ -373,7 +375,7 @@
         return script;
     }
 
-    /** Calls a subroutine/built-in function using this scripts */
+    /** Calls a subroutine/built-in function using this script. */
     public Scalar callFunction(String funcName, Stack parameters)
     {
        Function myfunction = getScriptEnvironment().getFunction(funcName);
@@ -384,7 +386,7 @@
        }
 
        Scalar evil = myfunction.evaluate(funcName, this, parameters);
-       getScriptEnvironment().clearReturn();
+       getScriptEnvironment().resetEnvironment();
 
        return evil;
     }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/src/sleep/runtime/SleepUtils.java	2007-03-17 04:40:00 UTC (rev 219)
@@ -1,26 +1,3 @@
-/*
-   SLEEP - Simple Language for Environment Extension Purposes
- .----------------------------.
- | sleep.runtime.SleepUtils   |_______________________________________________
- |                                                                            |
-   Author: Raphael Mudge (rsmudge at mtu.edu)
-           http://www.csl.mtu.edu/~rsmudge/
-
-   Description: 
-     Provides utility functions for the following:
-     1. loading a script and retreiving a ScriptInstance object
-     2. calling a function on a given ScriptInstance object
-     3. creating a sleep Scalar object based on a normal java object
-
-   Documentation:
-
-   Changelog:
-
-   * This software is distributed under the artistic license, see license.txt
-     for more information. *
-
- |____________________________________________________________________________|
- */
 package sleep.runtime;
  
 import java.util.*;
@@ -80,7 +57,7 @@
    public static Scalar runCode(Block code, ScriptEnvironment env)
    {
        Scalar temp = code.evaluate(env);
-       env.clearReturn();                 /* if we're going to call a function that returns
+       env.resetEnvironment();             /* if we're going to call a function that returns
                                              something then we are obligated to clear its return
                                              value when its done running... */
        return temp;
@@ -98,9 +75,9 @@
    public static Scalar runCode(Function func, String name, ScriptInstance script, Stack locals)
    {
        Scalar temp = func.evaluate(name, script, locals);
-       script.getScriptEnvironment().clearReturn();  /* if we're going to call a function that returns
-                                                        something then we are obligated to clear its return
-                                                        value when its done running... */
+       script.getScriptEnvironment().resetEnvironment(); /* if we're going to call a function that returns
+                                                            something then we are obligated to clear its return
+                                                            value when its done running... */
        if (temp == null)
           return SleepUtils.getEmptyScalar();
 

Modified: sleep/tests/output/tcatch2.sl
===================================================================
--- sleep/tests/output/tcatch2.sl	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/tests/output/tcatch2.sl	2007-03-17 04:40:00 UTC (rev 219)
@@ -16,3 +16,4 @@
 --- e. pre throw :)
 --- g. outermost catch block
 0. Caught: this is being thrown because I can!!!
+this outermost block isn't hosed, is it?

Modified: sleep/tests/tcatch2.sl
===================================================================
--- sleep/tests/tcatch2.sl	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/tests/tcatch2.sl	2007-03-17 04:40:00 UTC (rev 219)
@@ -109,6 +109,8 @@
       yield "g. outermost catch block";
       println("0. Caught: $exception");
    }
+
+   println("this outermost block isn't hosed, is it?");
 }
 
 while $test (bee())

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 03:00:59 UTC (rev 218)
+++ sleep/whatsnew.txt	2007-03-17 04:40:00 UTC (rev 219)
@@ -28,8 +28,9 @@
   compatability with older scripts that rely on the checkError() scheme. 
   With this option scripters can choose to use try/catch blocks for all run
   of the mill error handling.  (see how it all fits together now?)
+- added an &exit() function to force Sleep to stop processing within the
+  current script environment.
 
-
 2.1-beta 12  (11 Mar 07)
 ===========
 - fixed yet another flurry of line number skew issues.  argh, make it stop!



From rsmudge at mail.berlios.de  Sat Mar 17 05:46:23 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 05:46:23 +0100
Subject: [Sleep-svn] r220 - in sleep/tests: . output
Message-ID: <200703170446.l2H4kNVo014193@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 05:46:23 +0100 (Sat, 17 Mar 2007)
New Revision: 220

Added:
   sleep/tests/output/tcatch6.sl
   sleep/tests/tcatch6.sl
Modified:
   sleep/tests/output/debugce.sl
   sleep/tests/output/squote.sl
   sleep/tests/output/unicodeseq.sl
Log:
some updates to the test cases.



Modified: sleep/tests/output/debugce.sl
===================================================================
--- sleep/tests/output/debugce.sl	2007-03-17 04:40:00 UTC (rev 219)
+++ sleep/tests/output/debugce.sl	2007-03-17 04:46:23 UTC (rev 220)
@@ -1,3 +1,3 @@
-Warning: checkError(): 2 error(s): Mismatched Parentheses - missing close paren at 1; Runaway string at 1 at debugce.sl:5
+Warning: checkError(): YourCodeSucksException: 2 error(s): Mismatched Parentheses - missing close paren at 1; Runaway string at 1 at debugce.sl:5
 Warning: checkError(): java.io.FileNotFoundException: fjasjkfajskfjasfjksakjfsjkfjksafjk.txt (No such file or directory) at debugce.sl:9
 I should be doing more stuff here...

Modified: sleep/tests/output/squote.sl
===================================================================
--- sleep/tests/output/squote.sl	2007-03-17 04:40:00 UTC (rev 219)
+++ sleep/tests/output/squote.sl	2007-03-17 04:46:23 UTC (rev 220)
@@ -3,4 +3,4 @@
 \'\
 \\\\\\\\
 \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
-Error running eval'd code: 2 error(s): Mismatched Parentheses - missing close paren at 1; Runaway string at 1
+Error running eval'd code: YourCodeSucksException: 2 error(s): Mismatched Parentheses - missing close paren at 1; Runaway string at 1

Added: sleep/tests/output/tcatch6.sl
===================================================================
--- sleep/tests/output/tcatch6.sl	2007-03-17 04:40:00 UTC (rev 219)
+++ sleep/tests/output/tcatch6.sl	2007-03-17 04:46:23 UTC (rev 220)
@@ -0,0 +1,4 @@
+uNF... basic cas3 baby!@%
+nothing wrong here, I promise!@#
+In the sluts() function...
+Warning: Uncaught exception: hehe... from bar baby!@#$ at tcatch6.sl:20

Modified: sleep/tests/output/unicodeseq.sl
===================================================================
--- sleep/tests/output/unicodeseq.sl	2007-03-17 04:40:00 UTC (rev 219)
+++ sleep/tests/output/unicodeseq.sl	2007-03-17 04:46:23 UTC (rev 220)
@@ -1,10 +1,10 @@
 this is A test :)
 this is A test :)AAAAAXA
-Warning: checkError(): 1 error(s): invalid unicode escape \u004  - must be hex digits at 1 at unicodeseq.sl:13
-Warning: checkError(): 2 error(s): invalid unicode escape \u004  - must be hex digits at 1; not enough remaining characters for \uXXXX at 1 at unicodeseq.sl:17
-Warning: checkError(): 2 error(s): invalid unicode escape \uAZBC - must be hex digits at 1; not enough remaining characters for \uXXXX at 1 at unicodeseq.sl:21
+Warning: checkError(): YourCodeSucksException: 1 error(s): invalid unicode escape \u004  - must be hex digits at 1 at unicodeseq.sl:13
+Warning: checkError(): YourCodeSucksException: 2 error(s): invalid unicode escape \u004  - must be hex digits at 1; not enough remaining characters for \uXXXX at 1 at unicodeseq.sl:17
+Warning: checkError(): YourCodeSucksException: 2 error(s): invalid unicode escape \uAZBC - must be hex digits at 1; not enough remaining characters for \uXXXX at 1 at unicodeseq.sl:21
 this is A test :)
 this is A test :)AAAAAXA
-Warning: checkError(): 1 error(s): invalid unicode escape \x4  - must be hex digits at 1 at unicodeseq.sl:35
-Warning: checkError(): 2 error(s): invalid unicode escape \x4  - must be hex digits at 1; not enough remaining characters for \xXX at 1 at unicodeseq.sl:39
-Warning: checkError(): 2 error(s): invalid unicode escape \xAZ - must be hex digits at 1; not enough remaining characters for \xXX at 1 at unicodeseq.sl:43
+Warning: checkError(): YourCodeSucksException: 1 error(s): invalid unicode escape \x4  - must be hex digits at 1 at unicodeseq.sl:35
+Warning: checkError(): YourCodeSucksException: 2 error(s): invalid unicode escape \x4  - must be hex digits at 1; not enough remaining characters for \xXX at 1 at unicodeseq.sl:39
+Warning: checkError(): YourCodeSucksException: 2 error(s): invalid unicode escape \xAZ - must be hex digits at 1; not enough remaining characters for \xXX at 1 at unicodeseq.sl:43

Added: sleep/tests/tcatch6.sl
===================================================================
--- sleep/tests/tcatch6.sl	2007-03-17 04:40:00 UTC (rev 219)
+++ sleep/tests/tcatch6.sl	2007-03-17 04:46:23 UTC (rev 220)
@@ -0,0 +1,29 @@
+#
+#
+#
+println("uNF... basic cas3 baby!@%");
+
+sub foo
+{
+   $x = 1 + 2;
+   println("In the sluts() function...");
+   if ($x == 3)
+   {
+      bar();
+   }
+   println("more stuff...");
+}
+
+sub bar
+{
+   $x = 3 + 4;
+   throw "hehe... from bar baby!@#$";
+   println("Bar stuff wheee...");
+}
+
+$xyz = "nothing wrong here, I promise!@#";
+println($xyz);
+$mmm = { foo(); };
+[$mmm test: "this is a HOES call"];
+println("More after foo");
+println("The beat does go on...");



From rsmudge at mail.berlios.de  Sat Mar 17 06:16:28 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 06:16:28 +0100
Subject: [Sleep-svn] r221 - in sleep: . src/sleep/bridges
	src/sleep/bridges/io src/sleep/engine/atoms tests tests/output
Message-ID: <200703170516.l2H5GSVi015032@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 06:16:27 +0100 (Sat, 17 Mar 2007)
New Revision: 221

Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/FileSystemBridge.java
   sleep/src/sleep/bridges/io/FileObject.java
   sleep/src/sleep/bridges/io/IOObject.java
   sleep/src/sleep/bridges/io/ProcessObject.java
   sleep/src/sleep/bridges/io/SocketObject.java
   sleep/src/sleep/engine/atoms/ObjectNew.java
   sleep/tests/forker.sl
   sleep/tests/output/forker.sl
   sleep/whatsnew.txt
Log:
more changes... (:



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/build.xml	2007-03-17 05:16:27 UTC (rev 221)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -157,7 +157,7 @@
              }
              catch (Exception ex)
              {
-                i.getScriptEnvironment().flagError("&writeObject(" + SleepUtils.describe(SleepUtils.getScalar(a)) + ", " + SleepUtils.describe(b) + "): " + ex.toString());
+                i.getScriptEnvironment().flagError(ex);
                 a.close();
              }
           }
@@ -173,7 +173,7 @@
           }
           catch (Exception ex)
           {
-             i.getScriptEnvironment().flagError("&readObject: " + ex.toString());
+             i.getScriptEnvironment().flagError(ex);
              a.close();
           }
        }
@@ -218,7 +218,7 @@
              }
              catch (NoSuchAlgorithmException ex)
              {
-                i.getScriptEnvironment().flagError("&digest: no such algorithm: " + temp);
+                i.getScriptEnvironment().flagError(ex);
              }
           }
           else if (s.objectValue() != null && s.objectValue() instanceof MessageDigest)
@@ -239,7 +239,7 @@
              }
              catch (NoSuchAlgorithmException ex)
              {
-                i.getScriptEnvironment().flagError("&digest: no such algorithm: " + algo);
+                i.getScriptEnvironment().flagError(ex);
              }
           }
 
@@ -453,7 +453,7 @@
           }
           catch (Exception ex)
           {
-             i.getScriptEnvironment().flagError(ex.toString());
+             i.getScriptEnvironment().flagError(ex);
           }
 
           return SleepUtils.getScalar(parent_io);
@@ -845,7 +845,7 @@
                         break;
 
                       default:
-                        env.flagError("unknown file pattern character: " + pattern.value);
+                        env.flagError(new Exception("unknown file pattern character: " + pattern.value));
                    }
                 }
                 catch (Exception ex) 
@@ -1047,7 +1047,7 @@
                         }
                         catch (Exception ex)
                         {
-                           env.flagError("Could not serialize " + SleepUtils.describe(temp) + ": " + ex.toString());
+                           env.flagError(ex);
                            if (control != null) control.close();
                            return;
                         }

Modified: sleep/src/sleep/bridges/FileSystemBridge.java
===================================================================
--- sleep/src/sleep/bridges/FileSystemBridge.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/FileSystemBridge.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -62,7 +62,7 @@
                  return SleepUtils.getScalar(1);
               }
            }
-           catch (Exception ex) { i.getScriptEnvironment().flagError(ex.getMessage()); }
+           catch (Exception ex) { i.getScriptEnvironment().flagError(ex); }
         }
         else if (n.equals("&deleteFile"))
         {

Modified: sleep/src/sleep/bridges/io/FileObject.java
===================================================================
--- sleep/src/sleep/bridges/io/FileObject.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/io/FileObject.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -37,7 +37,7 @@
       }
       catch (Exception ex)
       {
-         env.flagError(ex.toString());
+         env.flagError(ex);
       }
    }
 }

Modified: sleep/src/sleep/bridges/io/IOObject.java
===================================================================
--- sleep/src/sleep/bridges/io/IOObject.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/io/IOObject.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -95,13 +95,13 @@
 
             if (getThread().isAlive())
             {
-               env.flagError("wait on object timed out");
+               env.flagError(new IOException("wait on object timed out"));
                return SleepUtils.getEmptyScalar();
             }
          }
          catch (Exception ex)
          {
-            env.flagError("wait on object failed: " + ex.getMessage());
+            env.flagError(ex);
             return SleepUtils.getEmptyScalar();
          }
       }

Modified: sleep/src/sleep/bridges/io/ProcessObject.java
===================================================================
--- sleep/src/sleep/bridges/io/ProcessObject.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/io/ProcessObject.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -30,8 +30,7 @@
       }
       catch (Exception ex)
       {
-         ex.printStackTrace();
-         env.flagError(ex.toString());
+         env.flagError(ex);
       }
    }
 
@@ -49,7 +48,7 @@
       }
       catch (Exception ex)
       {
-         env.flagError("wait for process failed: " + ex);
+         env.flagError(ex);
       }
 
       return SleepUtils.getEmptyScalar();

Modified: sleep/src/sleep/bridges/io/SocketObject.java
===================================================================
--- sleep/src/sleep/bridges/io/SocketObject.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/bridges/io/SocketObject.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -30,7 +30,7 @@
       }
       catch (Exception ex)
       {
-         env.flagError(ex.toString());
+         env.flagError(ex);
       }
    }
 
@@ -108,7 +108,7 @@
       }
       catch (Exception ex)
       {
-         env.flagError(ex.toString());
+         env.flagError(ex);
       }
 
       try

Modified: sleep/src/sleep/engine/atoms/ObjectNew.java
===================================================================
--- sleep/src/sleep/engine/atoms/ObjectNew.java	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/src/sleep/engine/atoms/ObjectNew.java	2007-03-17 05:16:27 UTC (rev 221)
@@ -149,12 +149,10 @@
       }
       catch (InstantiationException iex)
       {
-         e.flagError("unable to instantiate abstract class " + name.getName());
          e.getScriptInstance().fireWarning("unable to instantiate abstract class " + name.getName(), getLineNumber());
       }
       catch (Exception iax)
       {
-         e.flagError(iax.toString());
          e.getScriptInstance().fireWarning(iax.toString(), getLineNumber());
       }
 

Modified: sleep/tests/forker.sl
===================================================================
--- sleep/tests/forker.sl	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/tests/forker.sl	2007-03-17 05:16:27 UTC (rev 221)
@@ -9,4 +9,6 @@
    check("within fork");
 });
 
+sleep(1000);
+
 check("outside of fork");

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/tests/output/forker.sl	2007-03-17 05:16:27 UTC (rev 221)
@@ -1,3 +1,4 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at d0d45b at forker.sl:8
-Trace: &check('outside of fork') at forker.sl:12
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 96f4b5 at forker.sl:8
+Trace: &sleep(1000) at forker.sl:12
+Trace: &check('outside of fork') at forker.sl:14

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 04:46:23 UTC (rev 220)
+++ sleep/whatsnew.txt	2007-03-17 05:16:27 UTC (rev 221)
@@ -30,6 +30,10 @@
   of the mill error handling.  (see how it all fits together now?)
 - added an &exit() function to force Sleep to stop processing within the
   current script environment.
+- updated sleep library to force functions to pass exceptions for consumption
+  by checkError() in lieu of strings.  This means the error messages are
+  somewhat less descriptive but on the other hand you can fully inspect them
+  for whatever additional details you want.
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 17 13:42:39 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 13:42:39 +0100
Subject: [Sleep-svn] r222 - in sleep: . src/sleep/parser tests tests/output
Message-ID: <200703171242.l2HCgdif024370@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 13:42:38 +0100 (Sat, 17 Mar 2007)
New Revision: 222

Added:
   sleep/tests/inchack.sl
   sleep/tests/output/inchack.sl
Modified:
   sleep/src/sleep/parser/TokenParser.java
   sleep/whatsnew.txt
Log:
fixed a bug with inc hack in expression context



Modified: sleep/src/sleep/parser/TokenParser.java
===================================================================
--- sleep/src/sleep/parser/TokenParser.java	2007-03-17 05:16:27 UTC (rev 221)
+++ sleep/src/sleep/parser/TokenParser.java	2007-03-17 12:42:38 UTC (rev 222)
@@ -396,6 +396,19 @@
             myToken.setType(IDEA_FUNC);
             myToken.add(tokens[x]);
          }
+         // increment hack
+         else if (Checkers.isIncrementHack(strings[x]))
+         {
+            myToken.setType(HACK_INC);
+            myToken.add(tokens[x]);
+         }
+         // decrement hack
+         else if (Checkers.isDecrementHack(strings[x]))
+         {
+            myToken.setType(HACK_DEC);
+            myToken.add(tokens[x]);
+         }
+         // a normal block
          else if (Checkers.isVariable(strings[x]))
          {
             myToken.setType(VALUE_SCALAR);

Added: sleep/tests/inchack.sl
===================================================================
--- sleep/tests/inchack.sl	2007-03-17 05:16:27 UTC (rev 221)
+++ sleep/tests/inchack.sl	2007-03-17 12:42:38 UTC (rev 222)
@@ -0,0 +1,9 @@
+#
+#
+#
+
+$x = 0;
+while ($x < 10)
+{
+   println($x++);
+}

Added: sleep/tests/output/inchack.sl
===================================================================
--- sleep/tests/output/inchack.sl	2007-03-17 05:16:27 UTC (rev 221)
+++ sleep/tests/output/inchack.sl	2007-03-17 12:42:38 UTC (rev 222)
@@ -0,0 +1,10 @@
+1
+2
+3
+4
+5
+6
+7
+8
+9
+10

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 05:16:27 UTC (rev 221)
+++ sleep/whatsnew.txt	2007-03-17 12:42:38 UTC (rev 222)
@@ -34,6 +34,7 @@
   by checkError() in lieu of strings.  This means the error messages are
   somewhat less descriptive but on the other hand you can fully inspect them
   for whatever additional details you want.
+- fixed a bug preventing use of increment/decrement ops in expression context
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 17 13:45:44 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 13:45:44 +0100
Subject: [Sleep-svn] r223 - in sleep/tests: . output
Message-ID: <200703171245.l2HCjiQ9024552@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 13:45:44 +0100 (Sat, 17 Mar 2007)
New Revision: 223

Added:
   sleep/tests/output/scope2.sl
   sleep/tests/scope2.sl
Log:
..


Added: sleep/tests/output/scope2.sl
===================================================================
--- sleep/tests/output/scope2.sl	2007-03-17 12:42:38 UTC (rev 222)
+++ sleep/tests/output/scope2.sl	2007-03-17 12:45:44 UTC (rev 223)
@@ -0,0 +1,3 @@
+3
+
+400

Added: sleep/tests/scope2.sl
===================================================================
--- sleep/tests/scope2.sl	2007-03-17 12:42:38 UTC (rev 222)
+++ sleep/tests/scope2.sl	2007-03-17 12:45:44 UTC (rev 223)
@@ -0,0 +1,14 @@
+global('$x');
+$x = 400;
+
+sub blah
+{
+   local('$x');
+   $x = 3;
+   println("$x");
+   $x = $null;    # $x is still in local scope
+   println("$x");
+}
+
+blah();
+println($x);



From rsmudge at mail.berlios.de  Sat Mar 17 13:56:57 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 13:56:57 +0100
Subject: [Sleep-svn] r224 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200703171256.l2HCuvau025162@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 13:56:56 +0100 (Sat, 17 Mar 2007)
New Revision: 224

Added:
   sleep/tests/argarr.sl
   sleep/tests/output/argarr.sl
Modified:
   sleep/src/sleep/bridges/ArgumentArray.java
   sleep/whatsnew.txt
Log:

another bug fix...


Modified: sleep/src/sleep/bridges/ArgumentArray.java
===================================================================
--- sleep/src/sleep/bridges/ArgumentArray.java	2007-03-17 12:45:44 UTC (rev 223)
+++ sleep/src/sleep/bridges/ArgumentArray.java	2007-03-17 12:56:56 UTC (rev 224)
@@ -54,7 +54,7 @@
 
        public Scalar   pop() { check(); return super.pop(); }
        public Scalar   push(Scalar value) { check(); return super.push(value); }
-       public int      size() { return sz; }
+       public int      size() { if (values == null) { return sz; } else { return super.size(); } }
        public Scalar   getAt(int index) { check(); return super.getAt(index); }
        public Iterator scalarIterator() { check(); return super.scalarIterator(); }
        public Scalar   add(Scalar value, int index) { check(); return super.add(value, index); }

Added: sleep/tests/argarr.sl
===================================================================
--- sleep/tests/argarr.sl	2007-03-17 12:45:44 UTC (rev 223)
+++ sleep/tests/argarr.sl	2007-03-17 12:56:56 UTC (rev 224)
@@ -0,0 +1,13 @@
+#
+# argument array breakage...
+#
+
+sub arr
+{
+   while (size(@_) > 0)
+   {
+      println("Another arg: " . shift(@_) . " size: " . size(@_));
+   }
+}
+
+arr("a", "b", "c", "d", "e", "f", "g", "h", "i", "j");

Added: sleep/tests/output/argarr.sl
===================================================================
--- sleep/tests/output/argarr.sl	2007-03-17 12:45:44 UTC (rev 223)
+++ sleep/tests/output/argarr.sl	2007-03-17 12:56:56 UTC (rev 224)
@@ -0,0 +1,10 @@
+Another arg: a size: 10
+Another arg: b size: 9
+Another arg: c size: 8
+Another arg: d size: 7
+Another arg: e size: 6
+Another arg: f size: 5
+Another arg: g size: 4
+Another arg: h size: 3
+Another arg: i size: 2
+Another arg: j size: 1

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 12:45:44 UTC (rev 223)
+++ sleep/whatsnew.txt	2007-03-17 12:56:56 UTC (rev 224)
@@ -35,6 +35,9 @@
   somewhat less descriptive but on the other hand you can fully inspect them
   for whatever additional details you want.
 - fixed a bug preventing use of increment/decrement ops in expression context
+- fixed a bug causing @_ to return the same size value no matter how many
+  modifications had been made to the array (thanks to Ralph Becker for 
+  finding this one).
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 17 14:12:13 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 14:12:13 +0100
Subject: [Sleep-svn] r225 - in sleep: src/sleep/bridges tests tests/output
Message-ID: <200703171312.l2HDCDSJ026174@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 14:12:12 +0100 (Sat, 17 Mar 2007)
New Revision: 225

Modified:
   sleep/src/sleep/bridges/BasicIO.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/tests/output/include.sl
   sleep/tests/output/useerr.sl
   sleep/tests/useerr.sl
Log:
more fixes...



Modified: sleep/src/sleep/bridges/BasicIO.java
===================================================================
--- sleep/src/sleep/bridges/BasicIO.java	2007-03-17 12:56:56 UTC (rev 224)
+++ sleep/src/sleep/bridges/BasicIO.java	2007-03-17 13:12:12 UTC (rev 225)
@@ -845,7 +845,7 @@
                         break;
 
                       default:
-                        env.flagError(new Exception("unknown file pattern character: " + pattern.value));
+                        env.showDebugMessage("unknown file pattern character: " + pattern.value);
                    }
                 }
                 catch (Exception ex) 

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 12:56:56 UTC (rev 224)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 13:12:12 UTC (rev 225)
@@ -229,7 +229,8 @@
 
           if (parent != null && !parent.exists())
           {
-             throw new IllegalArgumentException(n + ": could not locate source '" + parent + "'");
+             si.getScriptEnvironment().flagError(new IllegalArgumentException(n + ": could not locate source '" + parent + "'"));
+             return SleepUtils.getEmptyScalar();
           }
 
           try
@@ -291,11 +292,11 @@
           }
           catch (YourCodeSucksException yex)
           {
-             throw new RuntimeException(className + ": " + yex.getMessage());
+             si.getScriptEnvironment().flagError(yex);             
           }
           catch (Exception ex)
           {
-             throw new RuntimeException(ex.toString());
+             si.getScriptEnvironment().flagError(ex);             
           }
 
           return SleepUtils.getEmptyScalar();

Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2007-03-17 12:56:56 UTC (rev 224)
+++ sleep/tests/output/include.sl	2007-03-17 13:12:12 UTC (rev 225)
@@ -10,5 +10,5 @@
 Warning: variable '$x' not declared at injar.sl:17
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
-Warning: scripts/errors1.sl: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24
-Warning: java.io.IOException: unable to locate scripts/does_not_exist.sl from: data/scripts.jar at include.sl:27
+Warning: checkError(): YourCodeSucksException: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24
+Warning: checkError(): java.io.IOException: unable to locate scripts/does_not_exist.sl from: data/scripts.jar at include.sl:27

Modified: sleep/tests/output/useerr.sl
===================================================================
--- sleep/tests/output/useerr.sl	2007-03-17 12:56:56 UTC (rev 224)
+++ sleep/tests/output/useerr.sl	2007-03-17 13:12:12 UTC (rev 225)
@@ -1,2 +1,2 @@
-Warning: &use: could not locate source '/Users/raffi/jdbc.jar' at eval:0
-Warning: java.lang.ClassNotFoundException: ABCDE at eval:0
+Warning: checkError(): java.lang.IllegalArgumentException: &use: could not locate source '/Users/raffi/jdbc.jar' at eval:0
+Warning: checkError(): java.lang.ClassNotFoundException: ABCDE at eval:0

Modified: sleep/tests/useerr.sl
===================================================================
--- sleep/tests/useerr.sl	2007-03-17 12:56:56 UTC (rev 224)
+++ sleep/tests/useerr.sl	2007-03-17 13:12:12 UTC (rev 225)
@@ -1,2 +1,4 @@
+debug(2);
+
 eval('use("/Users/raffi/jdbc.jar", "JDBC");');
 eval('use("ABCDE");');



From rsmudge at mail.berlios.de  Sat Mar 17 14:16:00 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 14:16:00 +0100
Subject: [Sleep-svn] r226 - in sleep/tests: . output
Message-ID: <200703171316.l2HDG0Jk026564@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 14:15:59 +0100 (Sat, 17 Mar 2007)
New Revision: 226

Added:
   sleep/tests/output/regexc.sl
   sleep/tests/regexc.sl
Log:
important unit test


Added: sleep/tests/output/regexc.sl
===================================================================
--- sleep/tests/output/regexc.sl	2007-03-17 13:12:12 UTC (rev 225)
+++ sleep/tests/output/regexc.sl	2007-03-17 13:15:59 UTC (rev 226)
@@ -0,0 +1,2 @@
+@('raffi', 'hick.org')
+@('rmudge', 'syr.edu')

Added: sleep/tests/regexc.sl
===================================================================
--- sleep/tests/regexc.sl	2007-03-17 13:12:12 UTC (rev 225)
+++ sleep/tests/regexc.sl	2007-03-17 13:15:59 UTC (rev 226)
@@ -0,0 +1,27 @@
+#
+# checking that a regex state travels with a closure / coroutine...
+#
+
+sub func1
+{
+   if ("raffi at hick.org" ismatch '(.*?)\@(.*?)')
+   {
+      yield "the waiting is the hardest part...";
+      println(matched());
+   }
+}
+
+sub func2
+{
+   if ("rmudge at syr.edu" ismatch '(.*?)\@(.*?)')
+   {
+      yield "the waiting is the hardest part...";
+      println(matched());
+   }
+}
+
+func1();
+func2();
+func1();
+func2();
+



From rsmudge at mail.berlios.de  Sat Mar 17 14:49:02 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 14:49:02 +0100
Subject: [Sleep-svn] r227 - in sleep: . src/sleep/engine/types
Message-ID: <200703171349.l2HDn2E8028371@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 14:49:02 +0100 (Sat, 17 Mar 2007)
New Revision: 227

Modified:
   sleep/src/sleep/engine/types/DoubleValue.java
   sleep/src/sleep/engine/types/IntValue.java
   sleep/src/sleep/engine/types/LongValue.java
   sleep/src/sleep/engine/types/StringValue.java
   sleep/whatsnew.txt
Log:
small optimization.. y0



Modified: sleep/src/sleep/engine/types/DoubleValue.java
===================================================================
--- sleep/src/sleep/engine/types/DoubleValue.java	2007-03-17 13:15:59 UTC (rev 226)
+++ sleep/src/sleep/engine/types/DoubleValue.java	2007-03-17 13:49:02 UTC (rev 227)
@@ -13,7 +13,7 @@
 
    public ScalarType copyValue()
    {
-      return new DoubleValue(value);
+      return this;
    }
 
    public int intValue()

Modified: sleep/src/sleep/engine/types/IntValue.java
===================================================================
--- sleep/src/sleep/engine/types/IntValue.java	2007-03-17 13:15:59 UTC (rev 226)
+++ sleep/src/sleep/engine/types/IntValue.java	2007-03-17 13:49:02 UTC (rev 227)
@@ -13,7 +13,7 @@
 
    public ScalarType copyValue()
    {
-      return new IntValue(value);
+      return this;
    }
 
    public int intValue()

Modified: sleep/src/sleep/engine/types/LongValue.java
===================================================================
--- sleep/src/sleep/engine/types/LongValue.java	2007-03-17 13:15:59 UTC (rev 226)
+++ sleep/src/sleep/engine/types/LongValue.java	2007-03-17 13:49:02 UTC (rev 227)
@@ -13,7 +13,7 @@
 
    public ScalarType copyValue()
    {
-      return new LongValue(value);
+      return this;
    }
 
    public int intValue()

Modified: sleep/src/sleep/engine/types/StringValue.java
===================================================================
--- sleep/src/sleep/engine/types/StringValue.java	2007-03-17 13:15:59 UTC (rev 226)
+++ sleep/src/sleep/engine/types/StringValue.java	2007-03-17 13:49:02 UTC (rev 227)
@@ -13,7 +13,7 @@
 
    public ScalarType copyValue()
    {
-      return new StringValue(value);
+      return this;
    }
 
    /** does nothing for now... */

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 13:15:59 UTC (rev 226)
+++ sleep/whatsnew.txt	2007-03-17 13:49:02 UTC (rev 227)
@@ -38,6 +38,8 @@
 - fixed a bug causing @_ to return the same size value no matter how many
   modifications had been made to the array (thanks to Ralph Becker for 
   finding this one).
+- made a small (possibly negligible) performance optimization to Sleep's
+  scalar value transfer code.
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 17 15:22:34 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 15:22:34 +0100
Subject: [Sleep-svn] r228 - in sleep: . src/sleep/bridges
	src/sleep/engine/atoms tests tests/output
Message-ID: <200703171422.l2HEMYoZ030328@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 15:22:33 +0100 (Sat, 17 Mar 2007)
New Revision: 228

Modified:
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/engine/atoms/Call.java
   sleep/src/sleep/engine/atoms/Return.java
   sleep/tests/output/profiler.sl
   sleep/tests/output/useerr.sl
   sleep/tests/profiler.sl
   sleep/whatsnew.txt
Log:
fixed a small memory leak issue.



Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 14:22:33 UTC (rev 228)
@@ -229,8 +229,7 @@
 
           if (parent != null && !parent.exists())
           {
-             si.getScriptEnvironment().flagError(new IllegalArgumentException(n + ": could not locate source '" + parent + "'"));
-             return SleepUtils.getEmptyScalar();
+             throw new IllegalArgumentException(n + ": could not locate source '" + parent + "'");
           }
 
           try

Modified: sleep/src/sleep/engine/atoms/Call.java
===================================================================
--- sleep/src/sleep/engine/atoms/Call.java	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/src/sleep/engine/atoms/Call.java	2007-03-17 14:22:33 UTC (rev 228)
@@ -94,7 +94,7 @@
                 }
                 catch (RuntimeException rex)
                 {
-                   // add an e.killFrame() ?!?
+                   e.KillFrame();
                    e.getScriptInstance().fireWarning(message + " - FAILED!", getLineNumber(), true);
                    throw(rex);
                 }
@@ -102,8 +102,16 @@
          }
          else
          {
-             temp = callme.evaluate(function, e.getScriptInstance(), e.getCurrentFrame());
-             e.clearReturn();
+             try
+             {
+                temp = callme.evaluate(function, e.getScriptInstance(), e.getCurrentFrame());
+                e.clearReturn();
+             }
+             catch (RuntimeException rex)
+             {
+                e.KillFrame();
+                throw(rex);
+             }
          }
 
          if (e.isThrownValue())

Modified: sleep/src/sleep/engine/atoms/Return.java
===================================================================
--- sleep/src/sleep/engine/atoms/Return.java	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/src/sleep/engine/atoms/Return.java	2007-03-17 14:22:33 UTC (rev 228)
@@ -54,7 +54,7 @@
             e.flagReturn(temp, ScriptEnvironment.FLOW_CONTROL_THROW);
          }
       }
-      else if (return_type == ScriptEnvironment.FLOW_CONTROL_BREAK)
+      else if (return_type == ScriptEnvironment.FLOW_CONTROL_BREAK || return_type == ScriptEnvironment.FLOW_CONTROL_CONTINUE)
       {
          e.flagReturn(null, return_type);
       }

Modified: sleep/tests/output/profiler.sl
===================================================================
--- sleep/tests/output/profiler.sl	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/tests/output/profiler.sl	2007-03-17 14:22:33 UTC (rev 228)
@@ -3,6 +3,6 @@
 this is a closure call!: 3628800.0
 10  &closure[profiler.sl:7]
 4   &println
+1   &closure[profiler.sl:16]
+1   &fact
 1   public int java.lang.String.length()
-1   &fact
-1   &closure[profiler.sl:16]

Modified: sleep/tests/output/useerr.sl
===================================================================
--- sleep/tests/output/useerr.sl	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/tests/output/useerr.sl	2007-03-17 14:22:33 UTC (rev 228)
@@ -1,2 +1,2 @@
-Warning: checkError(): java.lang.IllegalArgumentException: &use: could not locate source '/Users/raffi/jdbc.jar' at eval:0
+Warning: &use: could not locate source '/Users/raffi/jdbc.jar' at eval:0
 Warning: checkError(): java.lang.ClassNotFoundException: ABCDE at eval:0

Modified: sleep/tests/profiler.sl
===================================================================
--- sleep/tests/profiler.sl	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/tests/profiler.sl	2007-03-17 14:22:33 UTC (rev 228)
@@ -19,7 +19,7 @@
 
 @stats = reverse(sort({ return [$1 calls] <=> [$2 calls]; }, copy(@stats)));
 
-foreach $var (@stats)
+foreach $var (sort({ return [$2 calls] <=> [$1 calls]; }, sort({ return [$1 functionName] cmp [$2 functionName]; }, @stats)))
 {
    # $var is a ScriptInstance.ProfilerStatistic object, it accepts
    # the following messages:

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 13:49:02 UTC (rev 227)
+++ sleep/whatsnew.txt	2007-03-17 14:22:33 UTC (rev 228)
@@ -40,6 +40,8 @@
   finding this one).
 - made a small (possibly negligible) performance optimization to Sleep's
   scalar value transfer code.
+- fixed frame leaks that can occur when a Java exception interrupts the 
+  calling of a function.
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 17 16:35:31 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 17 Mar 2007 16:35:31 +0100
Subject: [Sleep-svn] r229 - in sleep: . src/sleep/bridges src/sleep/runtime
	tests tests/output
Message-ID: <200703171535.l2HFZV5k001919@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-17 16:35:30 +0100 (Sat, 17 Mar 2007)
New Revision: 229

Added:
   sleep/src/sleep/runtime/WatchScalar.java
   sleep/tests/output/watch.sl
   sleep/tests/watch.sl
Modified:
   sleep/build.xml
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/whatsnew.txt
Log:
added variable watching as well.


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/build.xml	2007-03-17 15:35:30 UTC (rev 229)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="false"
+           debug="true"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-17 15:35:30 UTC (rev 229)
@@ -104,6 +104,8 @@
         temp.put("&this",     scopeFunctions);
         temp.put("&global",     scopeFunctions);
 
+        temp.put("&watch", this);
+
         temp.put("&debug", this);
         temp.put("&profile", this);
         temp.put("&getStackTrace", this);
@@ -740,6 +742,26 @@
          
           return SleepUtils.getEmptyScalar();
        }
+       else if (n.equals("&watch"))
+       {
+          Variable level;
+          String temp = BridgeUtilities.getString(l, "");       
+          String vars[] = temp.split(" "); 
+          for (int x = 0; x < vars.length; x++)
+          {
+             level = i.getScriptVariables().getScalarLevel(vars[x], i);
+             if (level != null)
+             {
+                WatchScalar watch = new WatchScalar(vars[x], i.getScriptEnvironment());
+                watch.setValue(level.getScalar(vars[x]));
+                i.getScriptVariables().setScalarLevel(vars[x], watch, level);
+             }
+             else
+             {
+                throw new IllegalArgumentException(vars[x] + " must already exist in a scope prior to watching");
+             }
+          }
+       }
        else if (n.equals("&invoke")) 
        {
           Map params = BridgeUtilities.extractNamedParameters(l);

Added: sleep/src/sleep/runtime/WatchScalar.java
===================================================================
--- sleep/src/sleep/runtime/WatchScalar.java	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/src/sleep/runtime/WatchScalar.java	2007-03-17 15:35:30 UTC (rev 229)
@@ -0,0 +1,67 @@
+package sleep.runtime;
+
+import java.io.*;
+
+public class WatchScalar extends Scalar
+{
+   protected ScriptEnvironment owner;
+   protected String            name;
+
+   public WatchScalar(String _name, ScriptEnvironment _owner)
+   {
+      name  = _name;
+      owner = _owner;
+   }
+
+   public void flagChange(Scalar valuez)
+   {
+      if (owner != null && (value != null || array != null || hash != null))
+      {
+         owner.showDebugMessage("watch(): " + name + " = " + SleepUtils.describe(valuez));
+      }
+   }
+
+   /** set the value of this scalar container to a scalar value of some type */
+   public void setValue(ScalarType _value)
+   {
+      Scalar blah = new Scalar();
+      blah.setValue(_value);
+      flagChange(blah);
+      
+      super.setValue(_value);
+   }
+
+   /** set the value of this scalar container to a scalar array */
+   public void setValue(ScalarArray _array)
+   {
+      Scalar blah = new Scalar();
+      blah.setValue(_array);
+      flagChange(blah);
+
+      super.setValue(_array);
+   }
+
+   /** set the value of this scalar container to a scalar hash */
+   public void setValue(ScalarHash _hash)
+   {
+      Scalar blah = new Scalar();
+      blah.setValue(_hash);
+      flagChange(blah);
+
+      super.setValue(_hash);
+   }
+
+   private void writeObject(ObjectOutputStream out) throws IOException
+   {
+       out.writeObject(value);
+       out.writeObject(array);
+       out.writeObject(hash);
+   }
+
+   private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
+   {
+       value = (ScalarType)in.readObject();
+       array = (ScalarArray)in.readObject();
+       hash  = (ScalarHash)in.readObject();
+   }
+}

Added: sleep/tests/output/watch.sl
===================================================================
--- sleep/tests/output/watch.sl	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/tests/output/watch.sl	2007-03-17 15:35:30 UTC (rev 229)
@@ -0,0 +1,4 @@
+Warning: watch(): $x = 15 at watch.sl:12
+Warning: watch(): $y = 15 at watch.sl:16
+15
+Warning: watch(): $y = 'this is a string' at watch.sl:18

Added: sleep/tests/watch.sl
===================================================================
--- sleep/tests/watch.sl	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/tests/watch.sl	2007-03-17 15:35:30 UTC (rev 229)
@@ -0,0 +1,18 @@
+#
+# test of the new watch option...
+# 
+global('$x $y');
+
+$x = 3;
+
+watch('$x $y');
+
+sub foo
+{
+   $1 = $1 * 5;
+   return $1;
+}
+
+$y = foo($x);
+println($y);
+$y = "this is a string";

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 14:22:33 UTC (rev 228)
+++ sleep/whatsnew.txt	2007-03-17 15:35:30 UTC (rev 229)
@@ -42,6 +42,9 @@
   scalar value transfer code.
 - fixed frame leaks that can occur when a Java exception interrupts the 
   calling of a function.
+- added yet another option to help with debugging: watch('$x $y $z')
+  this function will ensure a warning is fired every time the scalar
+  container held by the specified variables receives a new value.
 
 2.1-beta 12  (11 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sun Mar 18 17:07:59 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sun, 18 Mar 2007 17:07:59 +0100
Subject: [Sleep-svn] r230 - in sleep: . docs src/sleep/runtime tests/output
Message-ID: <200703181607.l2IG7xe8032268@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-18 17:07:55 +0100 (Sun, 18 Mar 2007)
New Revision: 230

Modified:
   sleep/build.xml
   sleep/docs/sleeplang.html
   sleep/readme.txt
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/forker.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/wrong.sl
   sleep/whatsnew.txt
Log:
beta 13 baby!!!



Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/build.xml	2007-03-18 16:07:55 UTC (rev 230)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"

Modified: sleep/docs/sleeplang.html
===================================================================
--- sleep/docs/sleeplang.html	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/docs/sleeplang.html	2007-03-18 16:07:55 UTC (rev 230)
@@ -622,6 +622,82 @@
 <p>The return command causes the current subroutine to stop executing and return to where it started.  You can specify a scalar 
 with return that will be the value of the function call.</p>
 
+<h3><a name="throw"></a>Throwing Errors</h3>
+
+<p>Sometimes an error or condition occurs that you don't want to handle in your subroutine but expect someone would
+want to handle it higher up in the call stack.  This type of thing is referred to as an exceptional condition and 
+Sleep has ample support for "exception" handling.</p>
+
+<p>To notify Sleep that an exception has occured, use the throw command.  The throw command works similiarly to return
+in that it expects you to specify a scalar that will be passed to an exception handler later on.  It is worth noteing
+that if the thrown value evaluates to <var>$null</var> then it will not be thrown.</p>
+
+<pre>sub multiplyBy3
+{
+   if (!-isnumber $1)
+   {
+      throw "&multipyBy3( $+ $1 $+ ) requires a number!";
+   }
+
+   return $1 * 3;
+}</pre>
+
+<p>The subroutine above checks if its argument is a number or not.  If someone where to call <code>multiplyBy3("hi")</code>
+then this function would throw the string "&multiplyBy3(hi) requires a number!" up the call stack.   This string would
+bubble up through the Sleep call stack.  The first part of the call stack to have a handler to catch the exception will 
+get to handle it.  If there are no error handlers in place then a warning message will be printed: 
+"Warning: Uncaught exception: &amp;multiplyBy3(hi) requires a number! at 5".  An uncaught exception will cause the 
+current script to stop executing.</p>
+
+<p>In general, an uncaught exception will be swallowed by Sleep.  There is one special case where this is not true and 
+that is covered under <a href="#interfaces">Sleep Interfaces</a> later in this manual.</p>
+
+<p>So with all of this in mind, hoes does one catch these exception errors?  The answer is to enclose executing code
+into a try / catch block.</p>
+
+<pre>try
+{
+   multiplyBy3("hi");
+}
+catch $message
+{
+   println("Failed to multiply by 3: $message");
+   printAll(getStackTrace());
+}</pre>
+
+<p>The code above will attempt the multiplyBy3 within the try block.  The catch block immediately following the try
+block will catch any error messages that bubble up while the try block is part of the call stack.  This means that if
+<code>&amp;multiplyBy3</code> calls a function that calls another function that throws an exception - your catch block will still work
+for catching that message.</p>
+
+<p>In the example above <var>$message</var> is specified as the place to dump the exception message to.  When an 
+exception handler is invoked, the variable specified after the catch keyword will be populated with the exception
+message.</p>
+
+<p>The function <code>&getStackTrace()</code> is a special function to describe where in your script the thrown message
+originated from and which other functions were executed before leading to the thrown message.</p>
+
+<h4><a name="choice"></a>Choice in Error Handling</h4>
+
+<p>Sleep does not use this mechanism for flagging and reporting errors.  In general errors are made available with 
+<code>&checkError($error)</code>.  This function will return the last reported error message flagged by Sleep or Java.
+If you prefer to handle these types of errors with the try catch mechanism then you have two options:  
+
+<p>You can throw individual errors yourself.  Simply inserting <code>throw checkError($error);</code> in certain places
+will cause the error to be thrown if there is one.  If there is no error, <code>&amp;checkError($error)</code> will
+return <var>$null</var>.  If this is the case then the throw command will not process it.  If there is an error then
+the throw command will throw it and it will bubble up itself.</p>
+
+<p>The other option is to enable the Sleep debug option to cause all errors to be thrown.  This option can be enabled
+by calling: <code>debug(34)</code>.  With this debug option in place anything that would have been available to 
+<code>&amp;checkError()</code> will be automatically converted into an exception and thrown.</p>
+
+<p>The <code>&amp;checkError()</code> mechanism for handling errors is simple, requires little code on your part to
+accomodate, and has support for automatic reporting through Sleep's debug flags.  The try/catch/throw mechanism requires
+writing a little bit more code but the ability to retrieve the full stack trace that created the error condition can
+be valuable for debugging.  Ultimately the choice is yours.  You can handle errors the Sleep <code>&amp;checkError()</code> 
+way, the Java try/catch way, or somewhere in between.</p>
+
 <h3>Arrays and Hashes as Arguments</h3>
 
 <p>Arrays and Hashes can be passed to subroutines as arguments.</p>
@@ -1502,7 +1578,7 @@
 <p>Sleep will try to find the specified jar file (i.e. jdom.jar) using the Sleep classpath.  This value is the
 sleep.classpath accessible as systemProperties()["sleep.classpath"].</p>
 
-<h3>Sleep Interfaces</h3>
+<h3><a name="interfaces"></a>Sleep Interfaces</h3>
 
 <p>A neat feature of HOES is how interfaces can be quickly and easily created and passed to Java objects.  A Java interface
 defines methods that a Java class should implement to facilitate interacting with certain objects.  </p>
@@ -1544,6 +1620,8 @@
 only message passed to ActionListener interfaces is the actionPerformed message.  The button_pressed subroutine is passed as a 
 closure parameter in this line: <code>[$button addActionListener:&button_pressed];</code>.</p>
 
+<p>Any uncaught exceptions originating from a Sleep script will bubble up to the Java caller of the Sleep interface.</p>
+
 <h3>Scalar Conversions</h3>
 
 <p>Sleep automatically converts scalar data into the appropriate Java types when necessary.  Sleep strings map easily to Java 
@@ -1575,8 +1653,11 @@
 
 <h3>Catching Exceptions</h3>
 
-<p>Often times Java API's acessed via HOES can throw an "exception".  Exceptions are a mechanism used to notify programs that some type of error has occured.  You can check for an exception using the <code>checkError($scalar)</code> function.</p>
+<p>Often times Java API's acessed via HOES can throw an "exception".  Exceptions are a mechanism used to notify programs that some type of error has occured.  You can check for an exception using the <code>checkError($scalar)</code> function.  The value returned by checkError() will be the actual Exception object.  This object can be used within object expressions.</p>
 
+<p>If you prefer a more Java-esque method of handling exceptions, Sleep does have a <a href="#throw">try/catch/throw</a> mechanism that can
+be utilized.</p>
+
 <h2><a name="10a">Sleep Closures</a></h2>
 
 <p>Closely coupled with HOES is the concept of Sleep closures.  A closure in sleep is a block of code that contains its own 
@@ -2630,7 +2711,7 @@
  <tr>
   <td>$</td>
   <td>checkError([$scalar])</td>
-  <td>returns the last error message to occur.  if a $scalar is specified : $scalar is set to the error string.  Once chekError() is called the error message is cleared.  Functions that might flag an error will be documented.</td>
+  <td>returns the last error message to occur.  if a $scalar is specified : $scalar is set to the error string.  Once chekError() is called the error message is cleared.  Functions that might flag an error will be documented.  Any type of Scalar can be returned by checkError(). i.e. often times the error message might be a Java exception Object.</td>
  </tr>
  <tr>
   <td>$</td>
@@ -2646,7 +2727,7 @@
  <tr>
   <td>$</td>
   <td>debug(level)</td>
-  <td>explicitly enables the specified debug level for this script: 0 - no debugging; 1 - show only critical errors (default); 2 - show all warnings; 4 - show first time use of non-declared variables; 8 - trace all function calls (collects profiler statistics) or 24 - trace only for the purpose of collecting profiler statistics.  any of the levels can be |'d together.</td>
+  <td>explicitly enables the specified debug level for this script: 0 - no debugging; 1 - show only critical errors (default); 2 - show all messages flagged for retrieval with checkError(); 4 - show first time use of non-declared variables; 8 - trace all function calls (collects profiler statistics); 24 - trace only for the purpose of collecting profiler statistics; 34 - "throw" all messages flagged for use with checkError() - this allows use of try/catch to deal with errors.  any of the levels can be |'d together.</td>
  </tr>
  <tr>
   <td>$</td>
@@ -2655,6 +2736,11 @@
  </tr>
  <tr>
   <td>$</td>
+  <td>exit()</td>
+  <td>causes the currently executing script context to exit.</td>
+ </tr>
+ <tr>
+  <td>$</td>
   <td>expr("expr")</td>
   <td>parses and evaluates the specified sleep expression code returning the value of the expression.  syntax errors can be obtained with &amp;checkError()</td>
  </tr>
@@ -2664,6 +2750,12 @@
   <td>obtains the function handle for the function bound to the specified string</td>
  </tr>
  <tr>
+  <td>@</td>
+  <td>getStackTrace()</td>
+  <td>in the context of a catch block (try/catch handlers) this function will return a trace of the Sleep call stack
+      that caused the exceptional condition.  Returns an empty array otherwise.</td>
+ </tr>
+ <tr>
   <td>$</td>
   <td>global('$x $y')</td>
   <td>parses the specified string and declares all variables in the string as global variables.</td>
@@ -2748,6 +2840,11 @@
   <td>use("/path/to/file.jar", "Loadable")</td>
   <td>loads the specified class into the current script environment.  The sleep.interfaces.Loadable class is loaded from the specified jar file.  Use to import sleep modules and the like.</td>
  </tr>
+ <tr>
+  <td></td>
+  <td>watch('$x $y')</td>
+  <td>A useful debug function for tracking variable changes.  parses the specified string and declares all variables in the string as "watch" variables.  Any attempt to update the container *referenced* by a watch variable will print out a warning.</td>
+ </tr>
 </table>
 
 <h2><a name="12">Appendix A - System Properties</a></h2>

Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/readme.txt	2007-03-18 16:07:55 UTC (rev 230)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 12 - README   
+Sleep - 2.1 beta 13 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/src/sleep/runtime/SleepUtils.java	2007-03-18 16:07:55 UTC (rev 230)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20070311;
+   public static final int    SLEEP_RELEASE = 20070318;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/tests/output/forker.sl	2007-03-18 16:07:55 UTC (rev 230)
@@ -1,4 +1,4 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 96f4b5 at forker.sl:8
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 57ea4a at forker.sl:8
 Trace: &sleep(1000) at forker.sl:12
 Trace: &check('outside of fork') at forker.sl:14

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/tests/output/trace.sl	2007-03-18 16:07:55 UTC (rev 230)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at d4d66b println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at fe571f println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at d4d66b println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at fe571f println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at d4d66b println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at fe571f println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/tests/output/wrong.sl	2007-03-18 16:07:55 UTC (rev 230)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at 691dee println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at a2220f println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at 691dee println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at a2220f println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at 691dee println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at a2220f println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at 691dee println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at a2220f println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at 691dee println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at a2220f println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at 691dee println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at a2220f println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at 691dee println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at a2220f println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at 691dee println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at a2220f println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at 691dee println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at a2220f println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at 691dee println: test] at wrong.sl:31
-Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at dccedd at wrong.sl:34
+Trace: [java.io.PrintStream at a2220f println: test] at wrong.sl:31
+Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 9a9b65 at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at 691dee println: [C at dccedd] at wrong.sl:34
+Trace: [java.io.PrintStream at a2220f println: [C at 9a9b65] at wrong.sl:34

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-17 15:35:30 UTC (rev 229)
+++ sleep/whatsnew.txt	2007-03-18 16:07:55 UTC (rev 230)
@@ -1,4 +1,4 @@
-2.1-beta 13
+2.1-beta 13  (18 Mar 07)
 ===========
 - trace debug option now reports the parameters for a HOES call even if an
   exception is thrown.



From rsmudge at mail.berlios.de  Tue Mar 20 04:30:09 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Tue, 20 Mar 2007 04:30:09 +0100
Subject: [Sleep-svn] r231 - in sleep: . src/sleep/bridges tests tests/output
Message-ID: <200703200330.l2K3U9xR023659@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-20 04:30:08 +0100 (Tue, 20 Mar 2007)
New Revision: 231

Added:
   sleep/tests/arrmods.sl
   sleep/tests/output/arrmods.sl
Modified:
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/whatsnew.txt
Log:
..


Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/src/sleep/bridges/BasicStrings.java	2007-03-20 03:30:08 UTC (rev 231)
@@ -401,7 +401,7 @@
         {
            StringBuffer work    = new StringBuffer(BridgeUtilities.getString(l, ""));
            String       nstr    = BridgeUtilities.getString(l, "");
-           int          index   = normalize(BridgeUtilities.getInt(l, 0), work.length());
+           int          index   = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), work.length());
            int          nchar   = BridgeUtilities.getInt(l, nstr.length());
 
            work.delete(index, index + nchar);
@@ -439,7 +439,7 @@
         {
            String value = l.pop().toString();
            String item  = l.pop().toString();
-           int    start = normalize(BridgeUtilities.getInt(l, 0), value.length());
+           int    start = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.length());
                   
            return SleepUtils.getScalar(value.indexOf(item, start));
         }
@@ -645,7 +645,7 @@
       int length = str.length();
       int start, end;
 
-      start = (_start < 0 ? _start + length : _start) % length;
+      start = BridgeUtilities.normalize(_start, length);
       end   = (_end < 0 ? _end + length : _end);
       end   = end <= length ? end : length;
 
@@ -657,19 +657,10 @@
       return str.substring(start, end);
    }
 
-   /** normalizes the value based on the string length */
-   private static final int normalize(int value, int length)
-   {
-      return (value < 0 ? value + length : value) % length;
-   }
-
    /** Normalizes the start parameter based on the length of the string and returns a character.  Functions with
        parameters normalized in this way will be able to accept nagative indices for their parameters */
    private static final char charAt(String str, int start)
    {
-      int length = str.length();
-
-      start = (start < 0 ? start + length : start) % length;
-      return str.charAt(start);
+      return str.charAt(BridgeUtilities.normalize(start, str.length()));
    }
 }

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-20 03:30:08 UTC (rev 231)
@@ -68,6 +68,7 @@
         temp.put("&add",   this);      // &pop(@array) = $scalar
         temp.put("&flatten",   this);      // &pop(@array) = $scalar
         temp.put("&clear", this);
+        temp.put("&splice", this);
         temp.put("&subarray", this);
         temp.put("&copy",  new copy());
  
@@ -579,7 +580,7 @@
        public Scalar evaluate(String n, ScriptInstance si, Stack l)
        {
           ScalarArray value = BridgeUtilities.getArray(l);
-          return value.remove(BridgeUtilities.getInt(l, 0));
+          return value.remove(BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.size()));
        }
     }
 
@@ -832,6 +833,8 @@
           return SleepUtils.getScalar(i.getDebugFlags());
        }
 
+       /** Start of many array functions */
+
        Scalar value = BridgeUtilities.getScalar(l);
 
        if (n.equals("&push"))
@@ -895,9 +898,32 @@
        else if (n.equals("&add") && value.getArray() != null)
        {
           Scalar item = BridgeUtilities.getScalar(l);
-          int index = BridgeUtilities.getInt(l, 0);  
+          int index   = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
           return value.getArray().add(SleepUtils.getScalar(item), index);
        }
+       else if (n.equals("&splice") && value.getArray() != null)
+       {
+          // splice(@old, @stuff, start, n to remove)
+          ScalarArray insert = BridgeUtilities.getArray(l);
+          int         start  = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
+          int         torem  = BridgeUtilities.getInt(l, insert.size()) + start;
+
+          for (int z = start; z < torem; z++)
+          {
+             value.getArray().remove(start);
+          }
+ 
+          int count = 0;
+          Iterator j = insert.scalarIterator();
+          while (j.hasNext())
+          {
+             Scalar ins = (Scalar)j.next();
+             value.getArray().add(SleepUtils.getScalar(ins), start + count);
+             count++;
+          }
+
+          return value;
+       }
        else if (n.equals("&pop"))
        {
           return value.getArray().pop();
@@ -924,7 +950,7 @@
        else if (n.equals("&search") && value.getArray() != null)
        {
           SleepClosure f = BridgeUtilities.getFunction(l, i); 
-          int start      = BridgeUtilities.getInt(l, 0);
+          int start      = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
           int count      = 0;
           Stack locals   = new Stack();
 
@@ -990,21 +1016,13 @@
        }
        else if (n.equals("&subarray"))
        {
-          if (value.getArray() != null)
-          {
-             int begin = BridgeUtilities.getInt(l, 0);
-             int end   = BridgeUtilities.getInt(l, value.getArray().size());
-
-             Scalar rv = SleepUtils.getArrayScalar();
-             while (begin < end)
-             {
-                rv.getArray().push(SleepUtils.getScalar(value.getArray().getAt(begin)));
-                begin++;
-             }
-
-             return rv;
-          }
+          return subarray(value, BridgeUtilities.getInt(l, 0), BridgeUtilities.getInt(l, value.getArray().size()));
        }
+       else if (n.equals("&splice"))
+       {
+          // splice(@old, @new, start, nchars)
+          
+       }
        else if (n.equals("&remove"))
        {
           while (!l.isEmpty())
@@ -1130,4 +1148,32 @@
 
        return SleepUtils.getEmptyScalar();
     }
+
+    private static final Scalar subarray(Scalar value, int _start, int _end)
+    { 
+       Scalar rv = SleepUtils.getArrayScalar();
+
+       if (value.getArray() != null)
+       {
+          int length = value.getArray().size();
+          int start, end;
+
+          start = (_start < 0 ? _start + length : _start) % length;
+          end   = (_end < 0 ? _end + length : _end);
+          end   = end <= length ? end : length;
+
+          if (start >= end)
+          {
+             throw new IllegalArgumentException("illegal subarray(" + SleepUtils.describe(value) + ", " + _start + " -> " + start + ", " + _end + " -> " + end + ")");
+          }
+  
+          while (start < end)
+          {
+             rv.getArray().push(SleepUtils.getScalar(value.getArray().getAt(start)));
+             start++;
+          }
+       }
+
+       return rv;
+    }
 }

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2007-03-20 03:30:08 UTC (rev 231)
@@ -136,10 +136,11 @@
    /** grab a sleep array, if the stack is empty a scalar array with no elements will be returned. */
    public static ScalarArray getArray(Stack arguments)
    {
-      if (arguments.isEmpty())
+      Scalar s = getScalar(arguments);
+      if (s.getArray() == null)
          return SleepUtils.getArrayScalar().getArray();
 
-      return ((Scalar)arguments.pop()).getArray();
+      return s.getArray();
    }
 
    /** grab a sleep hash, if the stack is empty a scalar hash with no members will be returned. */
@@ -298,4 +299,11 @@
 
       return toValue;
    }
+
+   /** normalizes the index value based on the specified length */
+   public static final int normalize(int value, int length)
+   {
+      if (length == 0) { return 0; }
+      return (value < 0 ? value + length : value) % length;
+   }
 }

Added: sleep/tests/arrmods.sl
===================================================================
--- sleep/tests/arrmods.sl	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/tests/arrmods.sl	2007-03-20 03:30:08 UTC (rev 231)
@@ -0,0 +1,26 @@
+#
+# test of array functions...
+#
+
+ at a = @("a", "b", "c", "d", "e", "f", "g", "h", "i", "j");
+ at b = @(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
+ at c = copy(@b);
+
+println(splice(@c, subarray(@a, -4), 3));
+
+ at c = copy(@b);
+println(splice(@c, subarray(@a, -4), 3, 0));
+
+ at c = copy(@b);
+println(splice(@c, subarray(@a, -4, -2), 3, 0));
+
+ at c = copy(@b);
+println(removeAt(@c, -3));
+println(@c);
+
+add(@c, "test!!!", 0);
+println(@c);
+
+add(@c, "zzzz", -1);
+println(@c);
+

Added: sleep/tests/output/arrmods.sl
===================================================================
--- sleep/tests/output/arrmods.sl	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/tests/output/arrmods.sl	2007-03-20 03:30:08 UTC (rev 231)
@@ -0,0 +1,7 @@
+@(1, 2, 3, 'g', 'h', 'i', 'j', 8, 9, 10, 11, 12, 13, 14)
+@(1, 2, 3, 'g', 'h', 'i', 'j', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
+@(1, 2, 3, 'g', 'h', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
+12
+@(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14)
+@('test!!!', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14)
+@('test!!!', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 'zzzz', 14)

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-18 16:07:55 UTC (rev 230)
+++ sleep/whatsnew.txt	2007-03-20 03:30:08 UTC (rev 231)
@@ -1,3 +1,13 @@
+2.1-beta 14
+===========
+- added splice(@array, @insertme, position, n) for modifying an array.  
+  works a lot like replaceAt, i.e. up to n elements at the specified
+  position are removed and the elements of @insertme are put in their
+  place.  @array is modified in place.
+- array functions now normalize negative parameters as offsets from the
+  total length of the array.  updated functions include:
+  &add, &removeAt, &search, and &subarray.
+
 2.1-beta 13  (18 Mar 07)
 ===========
 - trace debug option now reports the parameters for a HOES call even if an



From rsmudge at mail.berlios.de  Wed Mar 21 02:44:57 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 21 Mar 2007 02:44:57 +0100
Subject: [Sleep-svn] r232 - in sleep: . src/sleep/bridges src/sleep/engine
	tests tests/output
Message-ID: <200703210144.l2L1ivqK018950@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-21 02:44:54 +0100 (Wed, 21 Mar 2007)
New Revision: 232

Added:
   sleep/tests/output/tracepo.sl
   sleep/tests/tracepo.sl
Modified:
   sleep/src/sleep/bridges/RegexBridge.java
   sleep/src/sleep/engine/ObjectUtilities.java
   sleep/tests/output/forker.sl
   sleep/tests/output/trace.sl
   sleep/tests/output/wrong.sl
   sleep/whatsnew.txt
Log:
more changes..



Modified: sleep/src/sleep/bridges/RegexBridge.java
===================================================================
--- sleep/src/sleep/bridges/RegexBridge.java	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/src/sleep/bridges/RegexBridge.java	2007-03-21 01:44:54 UTC (rev 232)
@@ -36,7 +36,7 @@
 /** Provides a bridge between Java's regex API and sleep.  Rock on */
 public class RegexBridge implements Loadable
 {
-    private static HashMap patternCache = new HashMap();
+    private static Map patternCache = Collections.synchronizedMap(new HashMap());
  
     static
     {
@@ -50,6 +50,11 @@
        {
           return (Pattern)patternCache.get(pattern);  
        }
+
+       if (patternCache.size() > 1024)
+       {
+          patternCache.clear(); /* ensure the pattern cache is flushed once in awhile */
+       }
      
        Pattern temp = Pattern.compile(pattern);
        patternCache.put(pattern, temp);

Modified: sleep/src/sleep/engine/ObjectUtilities.java
===================================================================
--- sleep/src/sleep/engine/ObjectUtilities.java	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/src/sleep/engine/ObjectUtilities.java	2007-03-21 01:44:54 UTC (rev 232)
@@ -548,6 +548,9 @@
       {
          Stack temp = new Stack();
 
+         boolean isTrace = (script.getDebugFlags() & ScriptInstance.DEBUG_TRACE_CALLS) == ScriptInstance.DEBUG_TRACE_CALLS;
+         StringBuffer message = null;
+
          if (args != null)
          {
             for (int z = args.length - 1; z >= 0; z--)
@@ -556,8 +559,45 @@
             }
          }
 
+         Scalar value;
+
          script.getScriptEnvironment().installExceptionHandler(null, null, null);
-         Scalar value = func.evaluate(method.getName(), script, temp); 
+
+         if (isTrace)
+         {
+            if (!script.isProfileOnly())
+            {
+               message = new StringBuffer("[" + func + " " + method.getName());
+
+               if (!temp.isEmpty())
+                  message.append(": " + SleepUtils.describe(temp));
+
+               message.append("]");
+            }
+
+            long stat = System.currentTimeMillis();
+            value = func.evaluate(method.getName(), script, temp); 
+            stat = System.currentTimeMillis() - stat;
+
+            if (func.getClass() == SleepClosure.class)
+            {
+               script.collect(((SleepClosure)func).toStringGeneric(), -1, stat);
+            }
+
+            if (message != null)
+            {
+               if (script.getScriptEnvironment().isThrownValue()) 
+                  message.append(" - FAILED!"); 
+               else
+                  message.append(" = " + SleepUtils.describe(value)); 
+
+               script.fireWarning(message.toString(), -1, true);
+            }
+         }
+         else
+         {
+            value = func.evaluate(method.getName(), script, temp); 
+         }
          script.getScriptEnvironment().popExceptionContext();
          script.getScriptEnvironment().clearReturn();
  

Modified: sleep/tests/output/forker.sl
===================================================================
--- sleep/tests/output/forker.sl	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/tests/output/forker.sl	2007-03-21 01:44:54 UTC (rev 232)
@@ -1,4 +1,4 @@
 Trace: &check('within fork') at forker.sl:9
-Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 57ea4a at forker.sl:8
+Trace: &fork(&closure[forker.sl:9]#2) = sleep.bridges.io.IOObject at 1a1399 at forker.sl:8
 Trace: &sleep(1000) at forker.sl:12
 Trace: &check('outside of fork') at forker.sl:14

Modified: sleep/tests/output/trace.sl
===================================================================
--- sleep/tests/output/trace.sl	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/tests/output/trace.sl	2007-03-21 01:44:54 UTC (rev 232)
@@ -1,13 +1,13 @@
 this is a test
-Trace: [java.io.PrintStream at fe571f println: 'this is a test'] at trace.sl:6
+Trace: [java.io.PrintStream at 57ea4a println: 'this is a test'] at trace.sl:6
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at trace.sl:7
 81.0
-Trace: [java.io.PrintStream at fe571f println: 81.0] at trace.sl:7
+Trace: [java.io.PrintStream at 57ea4a println: 81.0] at trace.sl:7
 Trace: [java.lang.Math pow: 3, 5] = 243.0 at trace.sl:8
 243.0
 Trace: &println(243.0) at trace.sl:8
 testing again...
-Trace: [java.io.PrintStream at fe571f println: 'testing again...'] at trace.sl:10
+Trace: [java.io.PrintStream at 57ea4a println: 'testing again...'] at trace.sl:10
 Trace: [sleep.runtime.SleepUtils getListFromArray: @('a', 'b', 'c')] = [a, b, c] at trace.sl:12
 Trace: [new java.util.LinkedList: [a, b, c]] = [a, b, c] at trace.sl:12
 Warning: variable '$list' not declared at trace.sl:12

Added: sleep/tests/output/tracepo.sl
===================================================================
--- sleep/tests/output/tracepo.sl	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/tests/output/tracepo.sl	2007-03-21 01:44:54 UTC (rev 232)
@@ -0,0 +1,50 @@
+Trace: &local('$enumeration') at tracepo.sl:25
+Trace: &lambda(&closure[tracepo.sl:7-15]#1) = &closure[tracepo.sl:7-15]#3 at tracepo.sl:26
+Trace: &foo() = &closure[tracepo.sl:7-15]#3 at tracepo.sl:45
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@('a', 'b', 'c', 'd', 'e')) = 5 at tracepo.sl:30
+Trace: &pop(@('a', 'b', 'c', 'd', 'e')) = 'e' at tracepo.sl:32
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'e' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'e' at tracepo.sl:-1
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@('a', 'b', 'c', 'd')) = 4 at tracepo.sl:30
+Trace: &pop(@('a', 'b', 'c', 'd')) = 'd' at tracepo.sl:32
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'd' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'd' at tracepo.sl:-1
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@('a', 'b', 'c')) = 3 at tracepo.sl:30
+Trace: &pop(@('a', 'b', 'c')) = 'c' at tracepo.sl:32
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'c' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'c' at tracepo.sl:-1
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@('a', 'b')) = 2 at tracepo.sl:30
+Trace: &pop(@('a', 'b')) = 'b' at tracepo.sl:32
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'b' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'b' at tracepo.sl:-1
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@('a')) = 1 at tracepo.sl:30
+Trace: &pop(@('a')) = 'a' at tracepo.sl:32
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) = 'a' at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] = 'a' at tracepo.sl:-1
+Trace: &invoke(&closure[tracepo.sl:28]#4, @(), $this => &closure[tracepo.sl:7-15]#3) = 1 at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 hasMoreElements] = 1 at tracepo.sl:-1
+Trace: &size(@()) = 0 at tracepo.sl:30
+Trace: [new java.util.NoSuchElementException: 'overextending my bounds dude :('] = java.util.NoSuchElementException: overextending my bounds dude :( at tracepo.sl:36
+Trace: &invoke(&closure[tracepo.sl:30-36]#5, @(), $this => &closure[tracepo.sl:7-15]#3) - FAILED! at tracepo.sl:11
+Trace: [&closure[tracepo.sl:7-15]#3 nextElement] - FAILED! at tracepo.sl:-1
+Trace: [java.util.Collections list: &closure[tracepo.sl:7-15]#3] - FAILED! at tracepo.sl:45
+Warning: checkError(): java.util.NoSuchElementException: overextending my bounds dude :( at tracepo.sl:45
+
+Trace: &println($null) at tracepo.sl:45
+Trying again... what will java do?
+Trace: &println('Trying again... what will java do?') at tracepo.sl:55
+Trace: [&closure[tracepo.sl:57]#6 hasMoreElements] - FAILED! at tracepo.sl:-1
+Trace: [java.util.Collections list: &closure[tracepo.sl:57]#6] - FAILED! at tracepo.sl:56
+Warning: checkError(): java.lang.RuntimeException: haha... testing bish!@#$ at tracepo.sl:56
+
+Trace: &println($null) at tracepo.sl:56

Modified: sleep/tests/output/wrong.sl
===================================================================
--- sleep/tests/output/wrong.sl	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/tests/output/wrong.sl	2007-03-21 01:44:54 UTC (rev 232)
@@ -1,32 +1,32 @@
 Trace: [java.lang.Math pow: 3, 4] = 81.0 at wrong.sl:6
 81.0
-Trace: [java.io.PrintStream at a2220f println: 81.0] at wrong.sl:6
+Trace: [java.io.PrintStream at a4488 println: 81.0] at wrong.sl:6
 Trace: &casti(1, 'z') = true at wrong.sl:9
 true
-Trace: [java.io.PrintStream at a2220f println: true] at wrong.sl:9
+Trace: [java.io.PrintStream at a4488 println: true] at wrong.sl:9
 Trace: &casti(0, 'z') = false at wrong.sl:10
 false
-Trace: [java.io.PrintStream at a2220f println: false] at wrong.sl:10
+Trace: [java.io.PrintStream at a4488 println: false] at wrong.sl:10
 Trace: &casti(1, 'd') = 1.0 at wrong.sl:13
 1.0
-Trace: [java.io.PrintStream at a2220f println: 1.0] at wrong.sl:13
+Trace: [java.io.PrintStream at a4488 println: 1.0] at wrong.sl:13
 Trace: &casti(1, 'b') = 1 at wrong.sl:16
 1
-Trace: [java.io.PrintStream at a2220f println: 1] at wrong.sl:16
+Trace: [java.io.PrintStream at a4488 println: 1] at wrong.sl:16
 Trace: &casti(100, 'f') = 100.0 at wrong.sl:19
 100.0
-Trace: [java.io.PrintStream at a2220f println: 100.0] at wrong.sl:19
+Trace: [java.io.PrintStream at a4488 println: 100.0] at wrong.sl:19
 Trace: &casti('b', 'c') = b at wrong.sl:22
 b
-Trace: [java.io.PrintStream at a2220f println: b] at wrong.sl:22
+Trace: [java.io.PrintStream at a4488 println: b] at wrong.sl:22
 Trace: &casti(63, 'i') = 63 at wrong.sl:25
 63
-Trace: [java.io.PrintStream at a2220f println: 63] at wrong.sl:25
+Trace: [java.io.PrintStream at a4488 println: 63] at wrong.sl:25
 this is a string y0
-Trace: [java.io.PrintStream at a2220f println: 'this is a string y0'] at wrong.sl:28
+Trace: [java.io.PrintStream at a4488 println: 'this is a string y0'] at wrong.sl:28
 Trace: [new java.lang.StringBuilder: 'test'] = test at wrong.sl:31
 test
-Trace: [java.io.PrintStream at a2220f println: test] at wrong.sl:31
-Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 9a9b65 at wrong.sl:34
+Trace: [java.io.PrintStream at a4488 println: test] at wrong.sl:31
+Trace: &cast(@('a', 'b', 'c', 'd'), 'c') = [C at 712651 at wrong.sl:34
 abcd
-Trace: [java.io.PrintStream at a2220f println: [C at 9a9b65] at wrong.sl:34
+Trace: [java.io.PrintStream at a4488 println: [C at 712651] at wrong.sl:34

Added: sleep/tests/tracepo.sl
===================================================================
--- sleep/tests/tracepo.sl	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/tests/tracepo.sl	2007-03-21 01:44:54 UTC (rev 232)
@@ -0,0 +1,65 @@
+debug(15);
+
+import java.util.*;
+
+sub object
+{
+   if ($0 !is $null)
+   {
+      if (-isfunction $this[$0])
+      {
+         return invoke($this[$0], @_, $this => $this);
+      }
+      else
+      {
+         return $this[$0];
+      }
+   }
+}
+
+#
+# mmm, sleep objects :)
+#
+sub foo
+{
+   local('$enumeration');
+   $enumeration = lambda(&object);
+   $enumeration['@data'] = @("a", "b", "c", "d", "e");
+   $enumeration["hasMoreElements"] = { return 1; };
+   $enumeration["nextElement"] = { 
+      if (size(@data) > 0)
+      {
+         return pop(@data);
+      }
+      else
+      {
+         throw [new NoSuchElementException: "overextending my bounds dude :("];
+      }
+   };
+
+   return $enumeration;
+}
+
+try
+{
+   println([Collections list: foo()]);
+}
+catch $ex
+{
+   println("Error: ".[$ex getMessage]." from: ".[$ex getClass]);
+   printAll(getStackTrace());
+}
+
+try
+{
+   println("Trying again... what will java do?");
+   println([Collections list: {
+      throw "haha... testing bish!@#$";
+   }]);
+}
+catch $ex
+{
+   println("Error: ".[$ex getMessage]." from: ".[$ex getClass]);
+   printAll(getStackTrace());
+}
+

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-20 03:30:08 UTC (rev 231)
+++ sleep/whatsnew.txt	2007-03-21 01:44:54 UTC (rev 232)
@@ -7,6 +7,9 @@
 - array functions now normalize negative parameters as offsets from the
   total length of the array.  updated functions include:
   &add, &removeAt, &search, and &subarray.
+- added a check to ensure regex pattern cache is flushed every so often.
+- tracing/profiling now records Java calls on closures passed as psuedo
+  objects.
 
 2.1-beta 13  (18 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Wed Mar 21 03:05:59 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 21 Mar 2007 03:05:59 +0100
Subject: [Sleep-svn] r233 - in sleep: . src/sleep/parser
Message-ID: <200703210205.l2L25x0s024306@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-21 03:05:58 +0100 (Wed, 21 Mar 2007)
New Revision: 233

Modified:
   sleep/src/sleep/parser/CodeGenerator.java
   sleep/whatsnew.txt
Log:
jkjkj


Modified: sleep/src/sleep/parser/CodeGenerator.java
===================================================================
--- sleep/src/sleep/parser/CodeGenerator.java	2007-03-21 01:44:54 UTC (rev 232)
+++ sleep/src/sleep/parser/CodeGenerator.java	2007-03-21 02:05:58 UTC (rev 233)
@@ -1068,6 +1068,9 @@
            }
            else
            {
+              if (Checkers.isString(strings[1]) || Checkers.isLiteral(strings[1]))
+                 strings[1] = ParserUtilities.extract(strings[1]);
+
               File searchFor = parser.importPackage(strings[0], strings[1]);
               if (searchFor == null || !searchFor.exists())
               {

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-21 01:44:54 UTC (rev 232)
+++ sleep/whatsnew.txt	2007-03-21 02:05:58 UTC (rev 233)
@@ -10,6 +10,8 @@
 - added a check to ensure regex pattern cache is flushed every so often.
 - tracing/profiling now records Java calls on closures passed as psuedo
   objects.
+- the import/from syntax now allows the jar filename to be quoted with 
+  double or single quotes to specify a path with spaces.
 
 2.1-beta 13  (18 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sat Mar 24 00:50:59 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 24 Mar 2007 00:50:59 +0100
Subject: [Sleep-svn] r234 - in sleep: . docs src/sleep/runtime
Message-ID: <200703232350.l2NNoxXm015312@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-24 00:50:57 +0100 (Sat, 24 Mar 2007)
New Revision: 234

Modified:
   sleep/docs/sleeplang.html
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
blah...


Modified: sleep/docs/sleeplang.html
===================================================================
--- sleep/docs/sleeplang.html	2007-03-21 02:05:58 UTC (rev 233)
+++ sleep/docs/sleeplang.html	2007-03-23 23:50:57 UTC (rev 234)
@@ -772,7 +772,7 @@
 "Michelangelo".</p>
 
 <p>When referencing an array with the index operator, it is acceptable to use negative indices.  For example to reference the
-last element of <var>@foo</var> one could use <code>@foo[-1]</code>.</p>
+last element of <var>@foo</var> one could use <code>@foo[-1]</code>.  Many array functions normalize negative indices as well.</p>
 
 <p>Arrays can be assigned to each other as well.   As stated in the Scalars section assigning an array to another array just 
 copies the reference.   Both <var>@array</var>'s will point to the same data.  A change in one array will affect the other 
@@ -1578,6 +1578,8 @@
 <p>Sleep will try to find the specified jar file (i.e. jdom.jar) using the Sleep classpath.  This value is the
 sleep.classpath accessible as systemProperties()["sleep.classpath"].</p>
 
+<p>If the jar filename includes spaces, you can surround it with single or double quotes.</p>
+
 <h3><a name="interfaces"></a>Sleep Interfaces</h3>
 
 <p>A neat feature of HOES is how interfaces can be quickly and easily created and passed to Java objects.  A Java interface
@@ -2001,6 +2003,11 @@
  </tr>
  <tr>
   <td>@</td>
+  <td>splice(@array, @insert, [n], [m])</td>
+  <td>removes m characters at position n from @array and splices in the contents of @insert.  @insert can be null.  default value of n is 0; default value of m is the length of @insert.</td>
+ </tr>
+ <tr>
+  <td>@</td>
   <td>subarray(@array, n, [m])</td>
   <td>extracts a subarray of range n-m from @array</td>
  </tr>

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2007-03-21 02:05:58 UTC (rev 233)
+++ sleep/src/sleep/runtime/SleepUtils.java	2007-03-23 23:50:57 UTC (rev 234)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20070318;
+   public static final int    SLEEP_RELEASE = 20070323;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-21 02:05:58 UTC (rev 233)
+++ sleep/whatsnew.txt	2007-03-23 23:50:57 UTC (rev 234)
@@ -1,4 +1,4 @@
-2.1-beta 14
+2.1-beta 14  (23 Mar 07)
 ===========
 - added splice(@array, @insertme, position, n) for modifying an array.  
   works a lot like replaceAt, i.e. up to n elements at the specified



From rsmudge at mail.berlios.de  Sat Mar 24 21:38:25 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sat, 24 Mar 2007 21:38:25 +0100
Subject: [Sleep-svn] r235 - in sleep: . src/sleep/bridges src/sleep/runtime
	tests tests/output
Message-ID: <200703242038.l2OKcPJW009116@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-24 21:38:23 +0100 (Sat, 24 Mar 2007)
New Revision: 235

Added:
   sleep/tests/border.sl
   sleep/tests/output/border.sl
Modified:
   sleep/readme.txt
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/output/arrmods.sl
   sleep/tests/output/include.sl
   sleep/tests/output/strmods.sl
   sleep/tests/strmods.sl
   sleep/whatsnew.txt
Log:
Sleep 2.1-b14 baby!


Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/readme.txt	2007-03-24 20:38:23 UTC (rev 235)
@@ -1,5 +1,5 @@
  ------- -------------------- ---------   ---------------  ------- ---------
-Sleep - 2.1 beta 13 - README   
+Sleep - 2.1 beta 14 - README   
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
 "You got the language, all you need now is the O'Reilly book".  That is

Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/src/sleep/bridges/BasicStrings.java	2007-03-24 20:38:23 UTC (rev 235)
@@ -649,8 +649,12 @@
       end   = (_end < 0 ? _end + length : _end);
       end   = end <= length ? end : length;
 
-      if (start >= end)
+      if (start == end)
       {
+         return "";
+      }
+      else if (start > end)
+      {
          throw new IllegalArgumentException(func + ": illegal substring('" + str + "', " + _start + " -> " + start + ", " + _end + " -> " + end + ") indices");
       }
 

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2007-03-24 20:38:23 UTC (rev 235)
@@ -898,7 +898,7 @@
        else if (n.equals("&add") && value.getArray() != null)
        {
           Scalar item = BridgeUtilities.getScalar(l);
-          int index   = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size());
+          int index   = BridgeUtilities.normalize(BridgeUtilities.getInt(l, 0), value.getArray().size() + 1);
           return value.getArray().add(SleepUtils.getScalar(item), index);
        }
        else if (n.equals("&splice") && value.getArray() != null)
@@ -1158,11 +1158,11 @@
           int length = value.getArray().size();
           int start, end;
 
-          start = (_start < 0 ? _start + length : _start) % length;
+          start = BridgeUtilities.normalize(_start, length);
           end   = (_end < 0 ? _end + length : _end);
           end   = end <= length ? end : length;
 
-          if (start >= end)
+          if (start > end)
           {
              throw new IllegalArgumentException("illegal subarray(" + SleepUtils.describe(value) + ", " + _start + " -> " + start + ", " + _end + " -> " + end + ")");
           }

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2007-03-24 20:38:23 UTC (rev 235)
@@ -303,7 +303,6 @@
    /** normalizes the index value based on the specified length */
    public static final int normalize(int value, int length)
    {
-      if (length == 0) { return 0; }
-      return (value < 0 ? value + length : value) % length;
+      return value < 0 ? value + length : value;
    }
 }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/src/sleep/runtime/SleepUtils.java	2007-03-24 20:38:23 UTC (rev 235)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20070323;
+   public static final int    SLEEP_RELEASE = 20070324;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Added: sleep/tests/border.sl
===================================================================
--- sleep/tests/border.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/border.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -0,0 +1,32 @@
+#
+# borderline string manipulation cases...
+#
+
+println(substr("ab", 1));
+println(substr("a", 1));
+println(substr("abc", 2));
+println(substr("ab", 2));
+
+println(subarray(@("a", "b"), 1));
+println(subarray(@("a"), 1));
+println(subarray(@("a", "b", "c"), 2));
+println(subarray(@("a", "b"), 2));
+
+println(subarray(@("a", "b", "c"), -1));
+println(subarray(@("a", "b", "c"), -2));
+println(subarray(@("a", "b", "c"), -3));
+
+println(substr("abc", -1));
+println(substr("abc", -2));
+println(substr("abc", -3));
+
+ at test = @("a", "b", "c", "d");
+add(@test, "e", -1);
+
+println(@test);
+
+ at test = @("v", "w", "x", "y", "z");
+removeAt(@test, -1);
+
+println(@test);
+

Modified: sleep/tests/output/arrmods.sl
===================================================================
--- sleep/tests/output/arrmods.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/output/arrmods.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -4,4 +4,4 @@
 12
 @(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14)
 @('test!!!', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14)
-@('test!!!', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 'zzzz', 14)
+@('test!!!', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 'zzzz')

Added: sleep/tests/output/border.sl
===================================================================
--- sleep/tests/output/border.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/output/border.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -0,0 +1,16 @@
+b
+
+c
+
+@('b')
+@()
+@('c')
+@()
+@('c')
+@('b', 'c')
+@('a', 'b', 'c')
+c
+bc
+abc
+@('a', 'b', 'c', 'd', 'e')
+@('v', 'w', 'x', 'y')

Modified: sleep/tests/output/include.sl
===================================================================
--- sleep/tests/output/include.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/output/include.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -6,8 +6,8 @@
 Trace: &foo() at injar.sl:9
 Done with injar.sl -- Harf... bish
 Trace: &println('Done with injar.sl -- Harf... bish') at injar.sl:12
-Trace: &substr('test', 8, 20) = 'test' at injar.sl:17
-Warning: variable '$x' not declared at injar.sl:17
+Trace: &substr('test', 8, 20) - FAILED! at injar.sl:17
+Warning: &substr: illegal substring('test', 8 -> 8, 20 -> 4) indices at injar.sl:17
 Trace: &debug(7) = 7 at include.sl:19
 Eh?!? Hello from injar.sl
 Warning: checkError(): YourCodeSucksException: 3 error(s): Mismatched Parentheses - missing close paren at 9; Mismatched Braces - missing close brace at 6; Runaway string at 9 at include.sl:24

Modified: sleep/tests/output/strmods.sl
===================================================================
--- sleep/tests/output/strmods.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/output/strmods.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -4,12 +4,11 @@
 this is a
 this is uNF test
 a
-this is a testthis is a testthis is a testthis is a testthis is a testthis is a 
-t a si sihttset a si sihttset a si sihttset a si sihttset a si sihttset a si siht
+this is a testthis is a test
 --): gnirts elbisrever a si siht++
 string
 string
-Warning: &substr: illegal substring('++this is a reversible string :)--', -11 -> 23, -15 -> 19) indices at strmods.sl:42
+Warning: &substr: illegal substring('++this is a reversible string :)--', -11 -> 23, -15 -> 19) indices at strmods.sl:52
 2
 2
 2
@@ -24,14 +23,3 @@
 -1
 -1
 -1
-2
-2
-2
-5
-5
-5
--1
--1
--1
--1
--1

Modified: sleep/tests/strmods.sl
===================================================================
--- sleep/tests/strmods.sl	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/tests/strmods.sl	2007-03-24 20:38:23 UTC (rev 235)
@@ -2,24 +2,34 @@
 # test of string functions...
 #
 
+
 println(right("this is a test", 4));  # the right most 4 chars
 println(left("this is a test", 4));   # the left most 4 chars
 
+# expected:
+# test
+# this
+
 println(right("this is a test", -5)); # all right chars except the left 5
 println(left("this is a test", -5));  # all left chars except the right 5
 
+# expected:
+# is a test
+# this is a
+
 println(replaceAt("this is a test", "uNF", -6, 1));
 
+# expected:
+# this is uNF test
+
 println(charAt("this is a test", -6));
 
-for ($x = 0; $x < 80; $x++)
-{
-   print(charAt("this is a test", $x));
-}
+# expected:
+# a
 
-println();
+$len = strlen("this is a test");
 
-for ($x = 80; $x >= 0; $x--)
+for ($x = $len * -1; $x < $len; $x++)
 {
    print(charAt("this is a test", $x));
 }
@@ -41,7 +51,7 @@
 
 [{ println(substr($str, -11, -15)); }];
 
-for ($x = 0; $x < 25; $x++)
+for ($x = 0; $x < $len; $x++)
 {
    println(indexOf("this is a test", "i", $x));
 }

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-23 23:50:57 UTC (rev 234)
+++ sleep/whatsnew.txt	2007-03-24 20:38:23 UTC (rev 235)
@@ -1,4 +1,4 @@
-2.1-beta 14  (23 Mar 07)
+2.1-beta 14  (24 Mar 07)
 ===========
 - added splice(@array, @insertme, position, n) for modifying an array.  
   works a lot like replaceAt, i.e. up to n elements at the specified
@@ -12,6 +12,7 @@
   objects.
 - the import/from syntax now allows the jar filename to be quoted with 
   double or single quotes to specify a path with spaces.
+- fixed a bug with normalized parameters (for both arrays and strings)
 
 2.1-beta 13  (18 Mar 07)
 ===========



From rsmudge at mail.berlios.de  Sun Mar 25 18:05:34 2007
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Sun, 25 Mar 2007 18:05:34 +0200
Subject: [Sleep-svn] r236 - in sleep: . src/sleep/runtime
Message-ID: <200703251605.l2PG5Y1H022965@sheep.berlios.de>

Author: rsmudge
Date: 2007-03-25 18:05:34 +0200 (Sun, 25 Mar 2007)
New Revision: 236

Modified:
   sleep/src/sleep/runtime/ScriptEnvironment.java
   sleep/whatsnew.txt
Log:
small fix.


Modified: sleep/src/sleep/runtime/ScriptEnvironment.java
===================================================================
--- sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-24 20:38:23 UTC (rev 235)
+++ sleep/src/sleep/runtime/ScriptEnvironment.java	2007-03-25 16:05:34 UTC (rev 236)
@@ -526,7 +526,10 @@
     /** obtain the filename of the current source of execution */
     public String getCurrentSource()
     {
-       return sources.peek() + "";
+       if (!sources.isEmpty())
+          return sources.peek() + "";
+
+       return "unknown";
     }
  
     /** remove the latest source information from the source stack */

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2007-03-24 20:38:23 UTC (rev 235)
+++ sleep/whatsnew.txt	2007-03-25 16:05:34 UTC (rev 236)
@@ -1,3 +1,8 @@
+2.1-beta 15
+===========
+- fixed a potential problem that could arise when one attempts to 
+  query which file is currently executing and no file is executing.
+
 2.1-beta 14  (24 Mar 07)
 ===========
 - added splice(@array, @insertme, position, n) for modifying an array.  



