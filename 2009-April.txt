From rsmudge at mail.berlios.de  Wed Apr 29 19:57:03 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 29 Apr 2009 19:57:03 +0200
Subject: [Sleep-svn] r444 - in sleep: . src/sleep/bridges src/sleep/runtime
	tests tests/output
Message-ID: <200904291757.n3THv3fc027033@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-29 19:57:02 +0200 (Wed, 29 Apr 2009)
New Revision: 444

Added:
   sleep/tests/hfreeze.sl
   sleep/tests/output/hfreeze.sl
   sleep/tests/output/strfun.sl
   sleep/tests/output/sumtest.sl
   sleep/tests/strfun.sl
   sleep/tests/sumtest.sl
Modified:
   sleep/src/sleep/bridges/BasicNumbers.java
   sleep/src/sleep/bridges/BasicStrings.java
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/bridges/BridgeUtilities.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/tests/dataio.sl
   sleep/tests/megaio.sl
   sleep/whatsnew.txt
Log:
some updates.



Modified: sleep/src/sleep/bridges/BasicNumbers.java
===================================================================
--- sleep/src/sleep/bridges/BasicNumbers.java	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/src/sleep/bridges/BasicNumbers.java	2009-04-29 17:57:02 UTC (rev 444)
@@ -47,7 +47,7 @@
        // math ops..
 
        String funcs[] = new String[] { "&abs", "&acos", "&asin", "&atan", "&atan2", "&ceil", "&cos", "&log", "&round", 
-                                       "&sin", "&sqrt", "&tan", "&radians", "&degrees", "&exp", "&floor" };
+                                       "&sin", "&sqrt", "&tan", "&radians", "&degrees", "&exp", "&floor", "&sum" };
 
        for (int x = 0; x < funcs.length; x++)
        {
@@ -131,7 +131,62 @@
        else if (name.equals("&radians")) { return SleepUtils.getScalar(Math.toRadians(BridgeUtilities.getDouble(args, 0.0))); }
        else if (name.equals("&degrees")) { return SleepUtils.getScalar(Math.toDegrees(BridgeUtilities.getDouble(args, 0.0))); }
        else if (name.equals("&exp")) { return SleepUtils.getScalar(Math.exp(BridgeUtilities.getDouble(args, 0.0))); }
-       else if (name.equals("&not")) {
+       else if (name.equals("&sum"))
+       {
+           Iterator i = BridgeUtilities.getIterator(args, si);
+
+           List iterators = null;
+           if (args.size() >= 1)
+           {
+              /* auxillary iterators */
+              iterators = new LinkedList();
+              while (!args.isEmpty())
+              {
+                 iterators.add(BridgeUtilities.getIterator(args, si));
+              }
+           }
+
+           double result = 0.0;
+           double temp;
+
+           /* this is a simple sum of an array or iterator */
+           if (iterators == null)
+           {
+              while (i.hasNext())
+              {
+                 result += ((Scalar)i.next()).doubleValue();
+              }
+           }
+           /* this is for summing the products of multiple arrays or iterators */
+           else
+           {
+              while (i.hasNext())
+              {
+                 temp = ((Scalar)i.next()).doubleValue();
+
+                 Iterator j = iterators.iterator();
+                 while (j.hasNext())
+                 {
+                    Iterator tempi = (Iterator)j.next();
+                    if (tempi.hasNext())
+                    {
+                       temp *= ((Scalar)tempi.next()).doubleValue();
+                    }
+                    else
+                    {
+                       temp = 0.0;
+                       break;
+                    }
+                 }
+
+                 result += temp;
+              }
+           }
+
+           return SleepUtils.getScalar(result);
+       }
+       else if (name.equals("&not")) 
+       {
            ScalarType sa = ((Scalar)args.pop()).getActualValue(); /* we already assume this is a number */
 
            if (sa.getType() == IntValue.class)

Modified: sleep/src/sleep/bridges/BasicStrings.java
===================================================================
--- sleep/src/sleep/bridges/BasicStrings.java	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/src/sleep/bridges/BasicStrings.java	2009-04-29 17:57:02 UTC (rev 444)
@@ -30,7 +30,7 @@
 import sleep.parser.ParserConfig;
 
 /** provides basic string parsing facilities */
-public class BasicStrings implements Loadable
+public class BasicStrings implements Loadable, Predicate
 {
     static 
     {
@@ -87,15 +87,18 @@
         temp.put("&sortd",   funky);
 
         // predicates
-        temp.put("eq", new pred_eq());
-        temp.put("ne", new pred_ne());
-        temp.put("lt", new pred_lt());
-        temp.put("gt", new pred_gt());
+        temp.put("eq", this);
+        temp.put("ne", this);
+        temp.put("lt", this);
+        temp.put("gt", this);
 
-        temp.put("-isletter", new pred_isletter());
-        temp.put("-isnumber", new pred_isnumber());
+        temp.put("-isletter", this);
+        temp.put("-isnumber", this);
 
-        temp.put("isin", new pred_isin());
+        temp.put("-isupper", this);
+        temp.put("-islower", this);
+
+        temp.put("isin", this);
         temp.put("iswm", new pred_iswm());  // I couldn't resist >)
 
         // operators
@@ -105,106 +108,84 @@
         temp.put("<=>", new oper_spaceship());
     }
 
-    private static class pred_eq implements Predicate
+    public boolean decide(String n, ScriptInstance i, Stack l)
     {
-        public boolean decide(String n, ScriptInstance i, Stack l)
+        if (l.size() == 1)
         {
-           String b = BridgeUtilities.getString(l, "");
            String a = BridgeUtilities.getString(l, "");
 
-           return a.equals(b);
-        }
-    }
-
-    private static class pred_isin implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
-        {
-           String b = BridgeUtilities.getString(l, "");
-           String a = BridgeUtilities.getString(l, "");
-
-           return b.indexOf(a) > -1;
-        }
-    }
-
-    private static class pred_isletter implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
-        {
-           String check = l.pop().toString();
-
-           if (check.length() <= 0)
-              return false;
-
-           for (int x = 0; x < check.length(); x++)
+           if (n.equals("-isupper"))
            {
-              if (! Character.isLetter(check.charAt(x)) )
-              {
-                 return false;
-              }
+              return a.toUpperCase().equals(a);                   
            }
-
-           return true;
-        }
-    }
-
-    private static class pred_isnumber implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
-        {
-           String check = l.pop().toString();
- 
-           if (check.length() <= 0)
-              return false;
-
-           if (check.indexOf('.') > -1 && check.indexOf('.') != check.lastIndexOf('.'))
-              return false;
-
-           for (int x = 0; x < check.length(); x++)
+           else if (n.equals("-islower"))
            {
-              if (! Character.isDigit(check.charAt(x)) && (check.charAt(x) != '.' || (x+1) >= check.length()) )
-              {
+              return a.toLowerCase().equals(a);
+           }
+           else if (n.equals("-isletter"))
+           {
+              if (a.length() <= 0)
                  return false;
+
+              for (int x = 0; x < a.length(); x++)
+              {
+                 if (! Character.isLetter(a.charAt(x)) )
+                 {
+                    return false;
+                 }
               }
+
+              return true;
            }
+           else if (n.equals("-isnumber"))
+           {
+              if (a.length() <= 0)
+                 return false;
 
-           return true;
+              if (a.indexOf('.') > -1 && a.indexOf('.') != a.lastIndexOf('.'))
+                 return false;
+   
+              for (int x = 0; x < a.length(); x++)
+              {
+                 if (! Character.isDigit(a.charAt(x)) && (a.charAt(x) != '.' || (x+1) >= a.length()) )
+                 {
+                    return false;
+                 }
+              } 
+ 
+              return true;
+           }
         }
-    }
-
-    private static class pred_ne implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
+        else
         {
            String b = BridgeUtilities.getString(l, "");
            String a = BridgeUtilities.getString(l, "");
 
-           return ! a.equals(b);
+           if (n.equals("eq"))
+           {
+              return a.equals(b);
+           }
+           else if (n.equals("ne"))
+           {
+              return ! a.equals(b);
+           }
+           else if (n.equals("isin"))
+           {
+              return b.indexOf(a) > -1;
+           }
+           else if (n.equals("gt"))
+           {
+              return a.compareTo(b) > 0;
+           }
+           else if (n.equals("lt"))
+           {
+              return a.compareTo(b) < 0;
+           }
         }
-    }
 
-    private static class pred_gt implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
-        {
-           String b = BridgeUtilities.getString(l, "");
-           String a = BridgeUtilities.getString(l, "");
-
-           return a.compareTo(b) > 0;
-        }
+        return false;
     }
 
-    private static class pred_lt implements Predicate
-    {
-        public boolean decide(String n, ScriptInstance i, Stack l)
-        {
-           String b = BridgeUtilities.getString(l, "");
-           String a = BridgeUtilities.getString(l, "");
-
-           return a.compareTo(b) < 0;
-        }
-    }
-
     private static class pred_iswm implements Predicate
     {
         public boolean decide(String name, ScriptInstance script, Stack locals)

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2009-04-29 17:57:02 UTC (rev 444)
@@ -229,9 +229,14 @@
        {
           Scalar temp = BridgeUtilities.getScalar(terms);
  
-          if (temp.getArray() != null)
+          if (temp.getHash() != null)
           {
-             Iterator iter = temp.getArray().scalarIterator();
+             String key = BridgeUtilities.getString(terms, "");
+             return temp.getHash().getData().containsKey(key) && !SleepUtils.isEmptyScalar((Scalar)(temp.getHash().getData().get(key)));
+          }
+          else
+          {
+             Iterator iter = SleepUtils.getIterator(temp, anInstance);
              Scalar   left = BridgeUtilities.getScalar(terms);
 
              while (iter.hasNext())
@@ -246,12 +251,6 @@
 
              return false;
           }
-          else if (temp.getHash() != null)
-          {
-             String key = BridgeUtilities.getString(terms, "");
-             return temp.getHash().getData().containsKey(key) && !SleepUtils.isEmptyScalar((Scalar)(temp.getHash().getData().get(key)));
-          }
-          return false;
        }
  
        Scalar value = (Scalar)terms.pop();

Modified: sleep/src/sleep/bridges/BridgeUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BridgeUtilities.java	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/src/sleep/bridges/BridgeUtilities.java	2009-04-29 17:57:02 UTC (rev 444)
@@ -146,21 +146,7 @@
         return getArray(arguments).scalarIterator();
 
       Scalar temp = (Scalar)arguments.pop();
-
-      if (temp.getArray() != null)
-      {
-         return temp.getArray().scalarIterator();
-      }      
-      else if (SleepUtils.isFunctionScalar(temp))
-      {
-         return SleepUtils.getFunctionFromScalar(temp).scalarIterator();
-      }
-      else if (ProxyIterator.isIterator(temp))
-      {
-         return new ProxyIterator((Iterator)temp.objectValue(), true);
-      }
-
-      throw new IllegalArgumentException("expected iterator (@array or &closure)--received: " + SleepUtils.describe(temp));
+      return SleepUtils.getIterator(temp, script);
    }
 
    /** grab a sleep array, if the stack is empty a scalar array with no elements will be returned. */

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/src/sleep/runtime/SleepUtils.java	2009-04-29 17:57:02 UTC (rev 444)
@@ -283,6 +283,25 @@
        return locals;
    }
 
+   /** Returns a scalar iterator depending grabbed from the Scalar.  The scalar can contain an array, a function, or a java.util.Iterator object. */
+   public static Iterator getIterator(Scalar temp, ScriptInstance script)
+   {
+      if (temp.getArray() != null)
+      {
+         return temp.getArray().scalarIterator();
+      }
+      else if (SleepUtils.isFunctionScalar(temp))
+      {
+         return SleepUtils.getFunctionFromScalar(temp).scalarIterator();
+      }   
+      else if (ProxyIterator.isIterator(temp))
+      {
+         return new ProxyIterator((Iterator)temp.objectValue(), true);
+      }
+
+      throw new IllegalArgumentException("expected iterator (@array or &closure)--received: " + SleepUtils.describe(temp));
+   }
+
    /** Generate a java.util.List from a scalar array.  Values will be the Java object 
        equivalents of the data stored in the scalar array. */
    public static List getListFromArray(Scalar array)

Modified: sleep/tests/dataio.sl
===================================================================
--- sleep/tests/dataio.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/dataio.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -46,4 +46,4 @@
   println("Read in $z bytes");
 
   closef($handle);
-}, $handle => $src), 5000);
+}, $handle => $src), 30000);

Added: sleep/tests/hfreeze.sl
===================================================================
--- sleep/tests/hfreeze.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/hfreeze.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1,32 @@
+sub foo
+{
+   local('$x $z');
+   for ($x = 0; $x < 10000; $x++)
+   {
+      if ($x !in %shared)
+      {
+         $z++;
+      }
+      else
+      {
+         $z--;
+      }
+      [Thread yield];
+   }
+   println($z);
+}
+
+global('%shared $x @threads');
+
+%shared[50] = 1;
+%shared[60] = 1;
+
+for ($x = 0; $x < 12; $x++)
+{
+   push(@threads, fork(&foo, \%shared));
+}
+
+foreach $x (@threads)
+{
+   wait($x);
+}

Modified: sleep/tests/megaio.sl
===================================================================
--- sleep/tests/megaio.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/megaio.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -49,4 +49,4 @@
   println("Read in $z bytes");
 
   closef($handle);
-}, $handle => $src), 10000);
+}, $handle => $src), 30000);

Added: sleep/tests/output/hfreeze.sl
===================================================================
--- sleep/tests/output/hfreeze.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/output/hfreeze.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1,12 @@
+9996
+9996
+9996
+9996
+9996
+9996
+9996
+9996
+9996
+9996
+9996
+9996

Added: sleep/tests/output/strfun.sl
===================================================================
--- sleep/tests/output/strfun.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/output/strfun.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1 @@
+Done!

Added: sleep/tests/output/sumtest.sl
===================================================================
--- sleep/tests/output/sumtest.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/output/sumtest.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1,7 @@
+255.0
+510.0
+420.0
+0.0
+0.0
+3366.0
+15.0

Added: sleep/tests/strfun.sl
===================================================================
--- sleep/tests/strfun.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/strfun.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1,20 @@
+$a = "thIS is A TeST";
+$b = uc($a);
+$c = lc($a);
+
+assert -isupper $b;
+assert !-islower $b;
+
+assert -islower $c;
+assert !-isupper $c;
+
+assert $a eq $a;
+assert $b ne $c;
+assert "a" lt "b";
+assert "b" gt "a";
+assert "a" !gt "b";
+assert "b" !lt "a";
+assert "IS" isin $a;
+assert "THIS" !isin $a;
+
+println("Done!");

Added: sleep/tests/sumtest.sl
===================================================================
--- sleep/tests/sumtest.sl	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/tests/sumtest.sl	2009-04-29 17:57:02 UTC (rev 444)
@@ -0,0 +1,38 @@
+#
+# test out different forms of the sum function
+#
+
+ at test = @(1, 2, 4, 8, 16, 32, 64, 128);
+
+# simple, sum an array
+println(sum(@test));
+
+# sum an array multiplied by a constant
+println(sum(@test, { return 2; }));
+
+# sum multiple array products
+ at a = @(1, 2, 3, 4, 5);
+ at b = @(2, 3, 4, 5, 6);
+ at c = @(3, 4, 5, 6, 7);
+
+println(sum(@a, @b, @c)); 
+
+# should be $null or 0.0
+println(sum());
+println(sum(@()));
+
+# ...
+sub to100
+{
+   local('$x');
+   for ($x = 0; $x < 100; $x += 3)
+   {
+       yield $x;
+   }
+}
+
+println(sum(&to100, { return 2; }));
+
+# 0 out the later args.
+ at test2 = @(1, 1, 1, 1);
+println(sum(@test, @test2));

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2009-03-20 16:07:24 UTC (rev 443)
+++ sleep/whatsnew.txt	2009-04-29 17:57:02 UTC (rev 444)
@@ -11,6 +11,9 @@
   are thread safe.  %hash["unknownKey"] is a write operation when "unknownKey"
   is not in the hash.  This is because Sleep adds "unknownKey" to the hash
   with a value of $null.  In a multithreaded context this will corrupt you.
+- added a sum(@a|&iter, ...) function to sum the products of all specified
+  arrays or iterators:  (@a[0] * @b[0] * ...) + (@a[1] * @b[1] * ...) + ...
+- added -isupper and -islower to check the case of a string. 
 
 2.1-release (25 Sept 08) [update 3]
 ===========



From rsmudge at mail.berlios.de  Wed Apr 29 20:07:53 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 29 Apr 2009 20:07:53 +0200
Subject: [Sleep-svn] r445 - in sleep/tests: . output
Message-ID: <200904291807.n3TI7rRx028646@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-29 20:07:53 +0200 (Wed, 29 Apr 2009)
New Revision: 445

Added:
   sleep/tests/output/trybreak.sl
   sleep/tests/trybreak.sl
Log:
yet another unit test.


Added: sleep/tests/output/trybreak.sl
===================================================================
--- sleep/tests/output/trybreak.sl	2009-04-29 17:57:02 UTC (rev 444)
+++ sleep/tests/output/trybreak.sl	2009-04-29 18:07:53 UTC (rev 445)
@@ -0,0 +1,9 @@
+0
+1
+2
+3
+4
+5
+Warning: CORRECT: done with loop! at trybreak.sl:17
+   trybreak.sl:13 &bar()
+   trybreak.sl:42 <origin of exception>

Added: sleep/tests/trybreak.sl
===================================================================
--- sleep/tests/trybreak.sl	2009-04-29 17:57:02 UTC (rev 444)
+++ sleep/tests/trybreak.sl	2009-04-29 18:07:53 UTC (rev 445)
@@ -0,0 +1,45 @@
+#
+# a unit test to check that break still causes exception context to get popped.
+#
+
+debug(7);
+
+sub foo
+{
+   local('$exception');
+
+   try
+   {
+      bar();
+   }
+   catch $exception
+   {
+      warn("CORRECT: $exception");
+      printAll(getStackTrace());
+   }
+}
+
+sub bar
+{
+   local('$x $ex');
+
+   for ($x = 0; $x < 10; $x++)
+   {
+      try
+      {
+         println($x);
+         if ($x == 5)
+         {
+            break;
+         }
+      }
+      catch $ex
+      {
+         warn("WRONG ONE: $ex");
+      }
+   }
+
+   throw "done with loop!";
+}
+
+foo();



From rsmudge at mail.berlios.de  Wed Apr 29 22:34:57 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 29 Apr 2009 22:34:57 +0200
Subject: [Sleep-svn] r446 - in sleep: . src/sleep/bridges src/sleep/runtime
	tests tests/output
Message-ID: <200904292034.n3TKYvLe015773@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-29 22:34:55 +0200 (Wed, 29 Apr 2009)
New Revision: 446

Added:
   sleep/tests/output/pipeit.sl
   sleep/tests/output/putAll2.sl
   sleep/tests/output/putAll3.sl
   sleep/tests/output/values2.sl
   sleep/tests/pipeit.sl
   sleep/tests/putAll2.sl
   sleep/tests/putAll3.sl
   sleep/tests/values2.sl
Modified:
   sleep/readme.txt
   sleep/src/sleep/bridges/BasicUtilities.java
   sleep/src/sleep/runtime/SleepUtils.java
   sleep/whatsnew.txt
Log:
more changes?!?


Modified: sleep/readme.txt
===================================================================
--- sleep/readme.txt	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/readme.txt	2009-04-29 20:34:55 UTC (rev 446)
@@ -80,7 +80,7 @@
 
 To compile sleep:
 
-[raffi at beardsley ~/sleep]$ rm -rf bin
+[raffi at beardsley ~/sleep]$ ant clean
 [raffi at beardsley ~/sleep]$ ant all
 
 If you made any changes or just want to make sure nothing is broken you can
@@ -169,9 +169,9 @@
 Legal Garbage
 -  ------------- -------- -   ---------------- --       -    -     -     - - -
 
-Sleep is (c) 2002, 2003, 2004, 2005, 2006, 2007, and 2008 (wow, been at this
-awhile) Raphael Mudge (rsmudge at gmail.com).  All of the source is released under
-the GNU Lesser Public License.
+Sleep is (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008, and 2009 (wow, been at 
+this awhile) Raphael Mudge (rsmudge at gmail.com).  All of the source is released 
+under the GNU Lesser Public License.
 
 The scripts and library files supplied as input to or produced as output 
 from the Sleep library do not automatically fall under the copyright of the

Modified: sleep/src/sleep/bridges/BasicUtilities.java
===================================================================
--- sleep/src/sleep/bridges/BasicUtilities.java	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/src/sleep/bridges/BasicUtilities.java	2009-04-29 20:34:55 UTC (rev 446)
@@ -1376,6 +1376,15 @@
                 }
              }
           }
+          else if (value.getArray() != null)
+          {
+             Iterator temp = BridgeUtilities.getIterator(l, i);
+             while (temp.hasNext())
+             {
+                Scalar next = (Scalar)temp.next();
+                value.getArray().push(SleepUtils.getScalar(next));
+             }
+          }
 
           return value;
        }
@@ -1385,17 +1394,28 @@
           {
              Scalar temp = SleepUtils.getArrayScalar();
 
-             Iterator iter = value.getHash().getData().values().iterator();
-             while (iter.hasNext())
+             if (l.isEmpty())
              {
-                Scalar next = (Scalar)iter.next();
+                Iterator iter = value.getHash().getData().values().iterator();
+                while (iter.hasNext())
+                {
+                   Scalar next = (Scalar)iter.next();
 
-                if (!SleepUtils.isEmptyScalar(next))
+                   if (!SleepUtils.isEmptyScalar(next))
+                   {
+                      temp.getArray().push(SleepUtils.getScalar(next));
+                   }
+                }
+             }
+             else
+             {
+                Iterator iter = BridgeUtilities.getIterator(l, i);
+                while (iter.hasNext())
                 {
-                   temp.getArray().push(next);
+                   Scalar key = (Scalar)iter.next();
+                   temp.getArray().push(SleepUtils.getScalar(value.getHash().getAt(key)));
                 }
              }
-
              return temp;
           }
        }

Modified: sleep/src/sleep/runtime/SleepUtils.java
===================================================================
--- sleep/src/sleep/runtime/SleepUtils.java	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/src/sleep/runtime/SleepUtils.java	2009-04-29 20:34:55 UTC (rev 446)
@@ -26,7 +26,7 @@
 public class SleepUtils
 {
    /** A date stamp of this Sleep release in YYYYMMDD format */
-   public static final int    SLEEP_RELEASE = 20080925;
+   public static final int    SLEEP_RELEASE = 20090430;
 
    /** A string description of this Sleep release */
    public static final String SLEEP_VERSION = "Sleep 2.1";

Added: sleep/tests/output/pipeit.sl
===================================================================
--- sleep/tests/output/pipeit.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/output/pipeit.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,3 @@
+1234
+4567
+000

Added: sleep/tests/output/putAll2.sl
===================================================================
--- sleep/tests/output/putAll2.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/output/putAll2.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,3 @@
+@('a', 'b', 'c', 1, 2, 3)
+@('a', 'b', 'c', 1, 2, 3)
+@(1, 'hah!', 3)

Added: sleep/tests/output/putAll3.sl
===================================================================
--- sleep/tests/output/putAll3.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/output/putAll3.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,4 @@
+%(k3 => 'v3', k1 => 'v1', k2 => 'v2')
+%(k3 => 'v3', k1 => 'v1', k2 => 'test')
+@('v1', 'v2', 'v3')
+@('k1', 'k2', 'k3')

Added: sleep/tests/output/values2.sl
===================================================================
--- sleep/tests/output/values2.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/output/values2.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,5 @@
+@('apple', 'cat', 'bat')
+%(a => 'apple', c => 'cat', b => 'bat')
+@('apple', 'blah', 'bat')
+%(a => 'apple', c => 'cat', b => 'bat')
+@('APPLE', 'ARDVARKS', 'DOGS', 'DUDES')

Added: sleep/tests/pipeit.sl
===================================================================
--- sleep/tests/pipeit.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/pipeit.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,33 @@
+$buffer = allocate();
+println($buffer, '1234
+this is a test
+uNF
+0r5ewr5
+4567
+blah
+you suck
+000
+...');
+closef($buffer);
+
+sub myRegexHandle
+{
+    return fork({
+        while $text (readln($handle))
+        {
+            if ($text ismatch $regex)
+            {
+                println($source, $text);
+            }
+        }
+
+        closef($handle);
+   }, $handle => $1, $regex => $2);
+}
+
+$h2 = myRegexHandle($buffer, '\d+'); 
+while $data (readln($h2))
+{
+    println($data);
+}
+closef($h2);

Added: sleep/tests/putAll2.sl
===================================================================
--- sleep/tests/putAll2.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/putAll2.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,10 @@
+ at a = @("a", "b", "c");
+ at b = @(1, 2, 3);
+
+putAll(@a, @b);
+
+println(@a);
+ at b[1] = "hah!";
+println(@a);
+println(@b);
+

Added: sleep/tests/putAll3.sl
===================================================================
--- sleep/tests/putAll3.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/putAll3.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,11 @@
+ at a = @("v1", "v2", "v3");
+ at b = @("k1", "k2", "k3");
+
+putAll(%hash, @b, @a);
+
+println(%hash);
+%hash["k2"] = "test";
+println(%hash);
+println(@a);
+println(@b);
+

Added: sleep/tests/values2.sl
===================================================================
--- sleep/tests/values2.sl	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/tests/values2.sl	2009-04-29 20:34:55 UTC (rev 446)
@@ -0,0 +1,18 @@
+#
+#
+#
+
+%data = %(a => "apple", b => "bat", c => "cat");
+ at temp = values(%data);
+
+println(@temp);
+println(%data);
+
+ at temp[1] = "blah";
+println(@temp);
+println(%data);
+
+%cache = ohasha();
+setMissPolicy(%cache, { return uc($2); });
+
+println(values(%cache, @("apple", "ardvarks", "dogs", "duDeS")));

Modified: sleep/whatsnew.txt
===================================================================
--- sleep/whatsnew.txt	2009-04-29 18:07:53 UTC (rev 445)
+++ sleep/whatsnew.txt	2009-04-29 20:34:55 UTC (rev 446)
@@ -1,4 +1,4 @@
-2.1-release (5 Nov 08)   [update 4]
+2.1-release (30 Apr 09) [update 4]
 ===========
 - Sleep semaphores use notifyAll() instead of notify() to wake up threads.
   Was experiencing deadlock on a multicore box due to the single woken 
@@ -14,6 +14,10 @@
 - added a sum(@a|&iter, ...) function to sum the products of all specified
   arrays or iterators:  (@a[0] * @b[0] * ...) + (@a[1] * @b[1] * ...) + ...
 - added -isupper and -islower to check the case of a string. 
+- putAll(@a, @b) now puts all elements of @b onto @a.
+- extended values(%hash, [@|&iter]) to accept an array or iterator of keys to
+  pull from the specified hash.  i.e. values(%hash, @("key1", "key2", ...))
+- values(...) makes copies of the scalar containers taken from the hash
 
 2.1-release (25 Sept 08) [update 3]
 ===========



From rsmudge at mail.berlios.de  Wed Apr 29 23:09:07 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Wed, 29 Apr 2009 23:09:07 +0200
Subject: [Sleep-svn] r447 - sleep/src/sleep/runtime
Message-ID: <200904292109.n3TL97p4020426@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-29 23:09:06 +0200 (Wed, 29 Apr 2009)
New Revision: 447

Modified:
   sleep/src/sleep/runtime/ScriptInstance.java
Log:
phear.


Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2009-04-29 20:34:55 UTC (rev 446)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2009-04-29 21:09:06 UTC (rev 447)
@@ -432,6 +432,34 @@
         }
     }
 
+    /** Call this function if you're sharing a script environment with other script instances.  This will sanitize the current
+        script environment to avoid leakage between closure scopes, coroutines, and continuations.  Call this after script loading / bridge installation and
+        before you run any scripts. */
+    public void makeSafe()
+    {
+        Hashtable oldEnv = environment.getEnvironment();
+        Hashtable newEnv = new Hashtable(  (oldEnv.size() * 2) - 1  );
+
+        /* reset the environment please */
+        Iterator i = oldEnv.entrySet().iterator();
+        while (i.hasNext())
+        {
+            Map.Entry temp = (Map.Entry)i.next();
+            if (temp.getKey().toString().charAt(0) == '&' && temp.getValue() instanceof SleepClosure)
+            {
+               SleepClosure closure = new SleepClosure(this, ((SleepClosure)temp.getValue()).getRunnableCode());
+               newEnv.put(temp.getKey(), closure);
+            }
+            else
+            { 
+               newEnv.put(temp.getKey(), temp.getValue());
+            }
+        }
+
+        /* update the environment */
+        environment.setEnvironment(newEnv);
+    }
+
     /** Creates a forked script instance.  This does not work like fork in an operating system.  Variables are not copied, period.
         The idea is to create a fork that shares the same environment as this script instance. */
     public ScriptInstance fork()



From rsmudge at mail.berlios.de  Thu Apr 30 02:03:10 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 30 Apr 2009 02:03:10 +0200
Subject: [Sleep-svn] r448 - sleep/src/sleep/runtime
Message-ID: <200904300003.n3U03AEf020340@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-30 02:03:08 +0200 (Thu, 30 Apr 2009)
New Revision: 448

Modified:
   sleep/src/sleep/runtime/ScriptInstance.java
Log:
changes to SI file


Modified: sleep/src/sleep/runtime/ScriptInstance.java
===================================================================
--- sleep/src/sleep/runtime/ScriptInstance.java	2009-04-29 21:09:06 UTC (rev 447)
+++ sleep/src/sleep/runtime/ScriptInstance.java	2009-04-30 00:03:08 UTC (rev 448)
@@ -464,27 +464,9 @@
         The idea is to create a fork that shares the same environment as this script instance. */
     public ScriptInstance fork()
     {
-        Hashtable oldEnv = environment.getEnvironment();
-        Hashtable newEnv = new Hashtable(  (oldEnv.size() * 2) - 1  );
+        ScriptInstance si = new ScriptInstance(variables.getGlobalVariables().createInternalVariableContainer(), environment.getEnvironment());
+        si.makeSafe();
 
-        ScriptInstance si = new ScriptInstance(variables.getGlobalVariables().createInternalVariableContainer(), newEnv);
-
-        /* reset the environment please */
-        Iterator i = oldEnv.entrySet().iterator();
-        while (i.hasNext())
-        {
-            Map.Entry temp = (Map.Entry)i.next();
-            if (temp.getKey().toString().charAt(0) == '&' && temp.getValue() instanceof SleepClosure)
-            {
-               SleepClosure closure = new SleepClosure(si, ((SleepClosure)temp.getValue()).getRunnableCode());
-               newEnv.put(temp.getKey(), closure);
-            }
-            else
-            { 
-               newEnv.put(temp.getKey(), temp.getValue());
-            }
-        }
-
         /* set the other cool stuff pls */
         si.setName(getName());
         si.setDebugFlags(getDebugFlags());



From rsmudge at mail.berlios.de  Thu Apr 30 05:42:11 2009
From: rsmudge at mail.berlios.de (rsmudge at BerliOS)
Date: Thu, 30 Apr 2009 05:42:11 +0200
Subject: [Sleep-svn] r449 - sleep
Message-ID: <200904300342.n3U3gBcv032124@sheep.berlios.de>

Author: rsmudge
Date: 2009-04-30 05:42:10 +0200 (Thu, 30 Apr 2009)
New Revision: 449

Modified:
   sleep/build.xml
Log:
preparing for release


Modified: sleep/build.xml
===================================================================
--- sleep/build.xml	2009-04-30 00:03:08 UTC (rev 448)
+++ sleep/build.xml	2009-04-30 03:42:10 UTC (rev 449)
@@ -16,7 +16,7 @@
            destdir="${project.build}"
            nowarn="yes"
            depend="yes"
-           debug="true"
+           debug="false"
            source="1.4"
            target="1.4"
            optimize="yes"



